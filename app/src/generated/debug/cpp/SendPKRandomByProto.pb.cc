// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendPKRandomByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SendPKRandomByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* SendPKRandomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPKRandomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPKRandomRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPKRandomRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SendPKRandomByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SendPKRandomByProto_2eproto() {
  protobuf_AddDesc_SendPKRandomByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SendPKRandomByProto.proto");
  GOOGLE_CHECK(file != NULL);
  SendPKRandomReq_descriptor_ = file->message_type(0);
  static const int SendPKRandomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRandomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRandomReq, streamid_),
  };
  SendPKRandomReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendPKRandomReq_descriptor_,
      SendPKRandomReq::internal_default_instance(),
      SendPKRandomReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendPKRandomReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRandomReq, _internal_metadata_));
  SendPKRandomRes_descriptor_ = file->message_type(1);
  static const int SendPKRandomRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRandomRes, msg_),
  };
  SendPKRandomRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendPKRandomRes_descriptor_,
      SendPKRandomRes::internal_default_instance(),
      SendPKRandomRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendPKRandomRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRandomRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SendPKRandomByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendPKRandomReq_descriptor_, SendPKRandomReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendPKRandomRes_descriptor_, SendPKRandomRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SendPKRandomByProto_2eproto() {
  SendPKRandomReq_default_instance_.Shutdown();
  delete SendPKRandomReq_reflection_;
  SendPKRandomRes_default_instance_.Shutdown();
  delete SendPKRandomRes_reflection_;
}

void protobuf_InitDefaults_SendPKRandomByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  SendPKRandomReq_default_instance_.DefaultConstruct();
  SendPKRandomRes_default_instance_.DefaultConstruct();
  SendPKRandomReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  SendPKRandomRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_SendPKRandomByProto_2eproto_once_);
void protobuf_InitDefaults_SendPKRandomByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_SendPKRandomByProto_2eproto_once_,
                 &protobuf_InitDefaults_SendPKRandomByProto_2eproto_impl);
}
void protobuf_AddDesc_SendPKRandomByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_SendPKRandomByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SendPKRandomByProto.proto\022\005proto\032\014Enti"
    "ty.proto\"3\n\017SendPKRandomReq\022\016\n\006roomId\030\001 "
    "\001(\t\022\020\n\010streamId\030\002 \001(\t\"0\n\017SendPKRandomRes"
    "\022\035\n\003msg\030\001 \001(\0132\020.proto.ReturnMsgB \n\036com.s"
    "encorsta.ids.common.protob\006proto3", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SendPKRandomByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SendPKRandomByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SendPKRandomByProto_2eproto_once_);
void protobuf_AddDesc_SendPKRandomByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SendPKRandomByProto_2eproto_once_,
                 &protobuf_AddDesc_SendPKRandomByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SendPKRandomByProto_2eproto {
  StaticDescriptorInitializer_SendPKRandomByProto_2eproto() {
    protobuf_AddDesc_SendPKRandomByProto_2eproto();
  }
} static_descriptor_initializer_SendPKRandomByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPKRandomReq::kRoomIdFieldNumber;
const int SendPKRandomReq::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPKRandomReq::SendPKRandomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SendPKRandomByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SendPKRandomReq)
}

void SendPKRandomReq::InitAsDefaultInstance() {
}

SendPKRandomReq::SendPKRandomReq(const SendPKRandomReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.SendPKRandomReq)
}

void SendPKRandomReq::SharedCtor() {
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendPKRandomReq::~SendPKRandomReq() {
  // @@protoc_insertion_point(destructor:proto.SendPKRandomReq)
  SharedDtor();
}

void SendPKRandomReq::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendPKRandomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPKRandomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPKRandomReq_descriptor_;
}

const SendPKRandomReq& SendPKRandomReq::default_instance() {
  protobuf_InitDefaults_SendPKRandomByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SendPKRandomReq> SendPKRandomReq_default_instance_;

SendPKRandomReq* SendPKRandomReq::New(::google::protobuf::Arena* arena) const {
  SendPKRandomReq* n = new SendPKRandomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendPKRandomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SendPKRandomReq)
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendPKRandomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SendPKRandomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SendPKRandomReq.roomId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_streamId;
        break;
      }

      // optional string streamId = 2;
      case 2: {
        if (tag == 18) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SendPKRandomReq.streamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SendPKRandomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SendPKRandomReq)
  return false;
#undef DO_
}

void SendPKRandomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SendPKRandomReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRandomReq.roomId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomid(), output);
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRandomReq.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->streamid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SendPKRandomReq)
}

::google::protobuf::uint8* SendPKRandomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SendPKRandomReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRandomReq.roomId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRandomReq.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->streamid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.SendPKRandomReq)
  return target;
}

size_t SendPKRandomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SendPKRandomReq)
  size_t total_size = 0;

  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPKRandomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SendPKRandomReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendPKRandomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendPKRandomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SendPKRandomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SendPKRandomReq)
    UnsafeMergeFrom(*source);
  }
}

void SendPKRandomReq::MergeFrom(const SendPKRandomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SendPKRandomReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SendPKRandomReq::UnsafeMergeFrom(const SendPKRandomReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.streamid().size() > 0) {

    streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
  }
}

void SendPKRandomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SendPKRandomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPKRandomReq::CopyFrom(const SendPKRandomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SendPKRandomReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SendPKRandomReq::IsInitialized() const {

  return true;
}

void SendPKRandomReq::Swap(SendPKRandomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPKRandomReq::InternalSwap(SendPKRandomReq* other) {
  roomid_.Swap(&other->roomid_);
  streamid_.Swap(&other->streamid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendPKRandomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPKRandomReq_descriptor_;
  metadata.reflection = SendPKRandomReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendPKRandomReq

// optional string roomId = 1;
void SendPKRandomReq::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendPKRandomReq::roomid() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRandomReq.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRandomReq::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SendPKRandomReq.roomId)
}
void SendPKRandomReq::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SendPKRandomReq.roomId)
}
void SendPKRandomReq::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SendPKRandomReq.roomId)
}
::std::string* SendPKRandomReq::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SendPKRandomReq.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendPKRandomReq::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.SendPKRandomReq.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRandomReq::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRandomReq.roomId)
}

// optional string streamId = 2;
void SendPKRandomReq::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendPKRandomReq::streamid() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRandomReq.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRandomReq::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SendPKRandomReq.streamId)
}
void SendPKRandomReq::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SendPKRandomReq.streamId)
}
void SendPKRandomReq::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SendPKRandomReq.streamId)
}
::std::string* SendPKRandomReq::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SendPKRandomReq.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendPKRandomReq::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.SendPKRandomReq.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRandomReq::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRandomReq.streamId)
}

inline const SendPKRandomReq* SendPKRandomReq::internal_default_instance() {
  return &SendPKRandomReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPKRandomRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPKRandomRes::SendPKRandomRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SendPKRandomByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SendPKRandomRes)
}

void SendPKRandomRes::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::ReturnMsg*>(
      ::proto::ReturnMsg::internal_default_instance());
}

SendPKRandomRes::SendPKRandomRes(const SendPKRandomRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.SendPKRandomRes)
}

void SendPKRandomRes::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

SendPKRandomRes::~SendPKRandomRes() {
  // @@protoc_insertion_point(destructor:proto.SendPKRandomRes)
  SharedDtor();
}

void SendPKRandomRes::SharedDtor() {
  if (this != &SendPKRandomRes_default_instance_.get()) {
    delete msg_;
  }
}

void SendPKRandomRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPKRandomRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPKRandomRes_descriptor_;
}

const SendPKRandomRes& SendPKRandomRes::default_instance() {
  protobuf_InitDefaults_SendPKRandomByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SendPKRandomRes> SendPKRandomRes_default_instance_;

SendPKRandomRes* SendPKRandomRes::New(::google::protobuf::Arena* arena) const {
  SendPKRandomRes* n = new SendPKRandomRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendPKRandomRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SendPKRandomRes)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool SendPKRandomRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SendPKRandomRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ReturnMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SendPKRandomRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SendPKRandomRes)
  return false;
#undef DO_
}

void SendPKRandomRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SendPKRandomRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SendPKRandomRes)
}

::google::protobuf::uint8* SendPKRandomRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SendPKRandomRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.SendPKRandomRes)
  return target;
}

size_t SendPKRandomRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SendPKRandomRes)
  size_t total_size = 0;

  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPKRandomRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SendPKRandomRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendPKRandomRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendPKRandomRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SendPKRandomRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SendPKRandomRes)
    UnsafeMergeFrom(*source);
  }
}

void SendPKRandomRes::MergeFrom(const SendPKRandomRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SendPKRandomRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SendPKRandomRes::UnsafeMergeFrom(const SendPKRandomRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_msg()) {
    mutable_msg()->::proto::ReturnMsg::MergeFrom(from.msg());
  }
}

void SendPKRandomRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SendPKRandomRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPKRandomRes::CopyFrom(const SendPKRandomRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SendPKRandomRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SendPKRandomRes::IsInitialized() const {

  return true;
}

void SendPKRandomRes::Swap(SendPKRandomRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPKRandomRes::InternalSwap(SendPKRandomRes* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendPKRandomRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPKRandomRes_descriptor_;
  metadata.reflection = SendPKRandomRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendPKRandomRes

// optional .proto.ReturnMsg msg = 1;
bool SendPKRandomRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void SendPKRandomRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::ReturnMsg& SendPKRandomRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRandomRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
::proto::ReturnMsg* SendPKRandomRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.SendPKRandomRes.msg)
  return msg_;
}
::proto::ReturnMsg* SendPKRandomRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.SendPKRandomRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void SendPKRandomRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRandomRes.msg)
}

inline const SendPKRandomRes* SendPKRandomRes::internal_default_instance() {
  return &SendPKRandomRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
