// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PKCancelByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PKCancelByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* PKCancelByProtoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKCancelByProtoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKCancelProtoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKCancelProtoRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PKCancelByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PKCancelByProto_2eproto() {
  protobuf_AddDesc_PKCancelByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PKCancelByProto.proto");
  GOOGLE_CHECK(file != NULL);
  PKCancelByProtoReq_descriptor_ = file->message_type(0);
  static const int PKCancelByProtoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKCancelByProtoReq, taguserid_),
  };
  PKCancelByProtoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PKCancelByProtoReq_descriptor_,
      PKCancelByProtoReq::internal_default_instance(),
      PKCancelByProtoReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(PKCancelByProtoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKCancelByProtoReq, _internal_metadata_));
  PKCancelProtoRes_descriptor_ = file->message_type(1);
  static const int PKCancelProtoRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKCancelProtoRes, msg_),
  };
  PKCancelProtoRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PKCancelProtoRes_descriptor_,
      PKCancelProtoRes::internal_default_instance(),
      PKCancelProtoRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(PKCancelProtoRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKCancelProtoRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PKCancelByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PKCancelByProtoReq_descriptor_, PKCancelByProtoReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PKCancelProtoRes_descriptor_, PKCancelProtoRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PKCancelByProto_2eproto() {
  PKCancelByProtoReq_default_instance_.Shutdown();
  delete PKCancelByProtoReq_reflection_;
  PKCancelProtoRes_default_instance_.Shutdown();
  delete PKCancelProtoRes_reflection_;
}

void protobuf_InitDefaults_PKCancelByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  PKCancelByProtoReq_default_instance_.DefaultConstruct();
  PKCancelProtoRes_default_instance_.DefaultConstruct();
  PKCancelByProtoReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  PKCancelProtoRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PKCancelByProto_2eproto_once_);
void protobuf_InitDefaults_PKCancelByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PKCancelByProto_2eproto_once_,
                 &protobuf_InitDefaults_PKCancelByProto_2eproto_impl);
}
void protobuf_AddDesc_PKCancelByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PKCancelByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PKCancelByProto.proto\022\005proto\032\014Entity.p"
    "roto\"\'\n\022PKCancelByProtoReq\022\021\n\ttagUserId\030"
    "\001 \001(\t\"1\n\020PKCancelProtoRes\022\035\n\003msg\030\001 \001(\0132\020"
    ".proto.ReturnMsgB \n\036com.sencorsta.ids.co"
    "mmon.protob\006proto3", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PKCancelByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PKCancelByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PKCancelByProto_2eproto_once_);
void protobuf_AddDesc_PKCancelByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PKCancelByProto_2eproto_once_,
                 &protobuf_AddDesc_PKCancelByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PKCancelByProto_2eproto {
  StaticDescriptorInitializer_PKCancelByProto_2eproto() {
    protobuf_AddDesc_PKCancelByProto_2eproto();
  }
} static_descriptor_initializer_PKCancelByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PKCancelByProtoReq::kTagUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PKCancelByProtoReq::PKCancelByProtoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PKCancelByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PKCancelByProtoReq)
}

void PKCancelByProtoReq::InitAsDefaultInstance() {
}

PKCancelByProtoReq::PKCancelByProtoReq(const PKCancelByProtoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PKCancelByProtoReq)
}

void PKCancelByProtoReq::SharedCtor() {
  taguserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PKCancelByProtoReq::~PKCancelByProtoReq() {
  // @@protoc_insertion_point(destructor:proto.PKCancelByProtoReq)
  SharedDtor();
}

void PKCancelByProtoReq::SharedDtor() {
  taguserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PKCancelByProtoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKCancelByProtoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKCancelByProtoReq_descriptor_;
}

const PKCancelByProtoReq& PKCancelByProtoReq::default_instance() {
  protobuf_InitDefaults_PKCancelByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PKCancelByProtoReq> PKCancelByProtoReq_default_instance_;

PKCancelByProtoReq* PKCancelByProtoReq::New(::google::protobuf::Arena* arena) const {
  PKCancelByProtoReq* n = new PKCancelByProtoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PKCancelByProtoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PKCancelByProtoReq)
  taguserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PKCancelByProtoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PKCancelByProtoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tagUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taguserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taguserid().data(), this->taguserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PKCancelByProtoReq.tagUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PKCancelByProtoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PKCancelByProtoReq)
  return false;
#undef DO_
}

void PKCancelByProtoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PKCancelByProtoReq)
  // optional string tagUserId = 1;
  if (this->taguserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taguserid().data(), this->taguserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PKCancelByProtoReq.tagUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taguserid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PKCancelByProtoReq)
}

::google::protobuf::uint8* PKCancelByProtoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PKCancelByProtoReq)
  // optional string tagUserId = 1;
  if (this->taguserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taguserid().data(), this->taguserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PKCancelByProtoReq.tagUserId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taguserid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.PKCancelByProtoReq)
  return target;
}

size_t PKCancelByProtoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PKCancelByProtoReq)
  size_t total_size = 0;

  // optional string tagUserId = 1;
  if (this->taguserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taguserid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKCancelByProtoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PKCancelByProtoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PKCancelByProtoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PKCancelByProtoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PKCancelByProtoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PKCancelByProtoReq)
    UnsafeMergeFrom(*source);
  }
}

void PKCancelByProtoReq::MergeFrom(const PKCancelByProtoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PKCancelByProtoReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PKCancelByProtoReq::UnsafeMergeFrom(const PKCancelByProtoReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taguserid().size() > 0) {

    taguserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taguserid_);
  }
}

void PKCancelByProtoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PKCancelByProtoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKCancelByProtoReq::CopyFrom(const PKCancelByProtoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PKCancelByProtoReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PKCancelByProtoReq::IsInitialized() const {

  return true;
}

void PKCancelByProtoReq::Swap(PKCancelByProtoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PKCancelByProtoReq::InternalSwap(PKCancelByProtoReq* other) {
  taguserid_.Swap(&other->taguserid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PKCancelByProtoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKCancelByProtoReq_descriptor_;
  metadata.reflection = PKCancelByProtoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PKCancelByProtoReq

// optional string tagUserId = 1;
void PKCancelByProtoReq::clear_taguserid() {
  taguserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PKCancelByProtoReq::taguserid() const {
  // @@protoc_insertion_point(field_get:proto.PKCancelByProtoReq.tagUserId)
  return taguserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PKCancelByProtoReq::set_taguserid(const ::std::string& value) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PKCancelByProtoReq.tagUserId)
}
void PKCancelByProtoReq::set_taguserid(const char* value) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PKCancelByProtoReq.tagUserId)
}
void PKCancelByProtoReq::set_taguserid(const char* value, size_t size) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PKCancelByProtoReq.tagUserId)
}
::std::string* PKCancelByProtoReq::mutable_taguserid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PKCancelByProtoReq.tagUserId)
  return taguserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PKCancelByProtoReq::release_taguserid() {
  // @@protoc_insertion_point(field_release:proto.PKCancelByProtoReq.tagUserId)
  
  return taguserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PKCancelByProtoReq::set_allocated_taguserid(::std::string* taguserid) {
  if (taguserid != NULL) {
    
  } else {
    
  }
  taguserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taguserid);
  // @@protoc_insertion_point(field_set_allocated:proto.PKCancelByProtoReq.tagUserId)
}

inline const PKCancelByProtoReq* PKCancelByProtoReq::internal_default_instance() {
  return &PKCancelByProtoReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PKCancelProtoRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PKCancelProtoRes::PKCancelProtoRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PKCancelByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PKCancelProtoRes)
}

void PKCancelProtoRes::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::ReturnMsg*>(
      ::proto::ReturnMsg::internal_default_instance());
}

PKCancelProtoRes::PKCancelProtoRes(const PKCancelProtoRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PKCancelProtoRes)
}

void PKCancelProtoRes::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

PKCancelProtoRes::~PKCancelProtoRes() {
  // @@protoc_insertion_point(destructor:proto.PKCancelProtoRes)
  SharedDtor();
}

void PKCancelProtoRes::SharedDtor() {
  if (this != &PKCancelProtoRes_default_instance_.get()) {
    delete msg_;
  }
}

void PKCancelProtoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKCancelProtoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKCancelProtoRes_descriptor_;
}

const PKCancelProtoRes& PKCancelProtoRes::default_instance() {
  protobuf_InitDefaults_PKCancelByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PKCancelProtoRes> PKCancelProtoRes_default_instance_;

PKCancelProtoRes* PKCancelProtoRes::New(::google::protobuf::Arena* arena) const {
  PKCancelProtoRes* n = new PKCancelProtoRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PKCancelProtoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PKCancelProtoRes)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool PKCancelProtoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PKCancelProtoRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ReturnMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PKCancelProtoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PKCancelProtoRes)
  return false;
#undef DO_
}

void PKCancelProtoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PKCancelProtoRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PKCancelProtoRes)
}

::google::protobuf::uint8* PKCancelProtoRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PKCancelProtoRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.PKCancelProtoRes)
  return target;
}

size_t PKCancelProtoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PKCancelProtoRes)
  size_t total_size = 0;

  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKCancelProtoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PKCancelProtoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PKCancelProtoRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PKCancelProtoRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PKCancelProtoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PKCancelProtoRes)
    UnsafeMergeFrom(*source);
  }
}

void PKCancelProtoRes::MergeFrom(const PKCancelProtoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PKCancelProtoRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PKCancelProtoRes::UnsafeMergeFrom(const PKCancelProtoRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_msg()) {
    mutable_msg()->::proto::ReturnMsg::MergeFrom(from.msg());
  }
}

void PKCancelProtoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PKCancelProtoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKCancelProtoRes::CopyFrom(const PKCancelProtoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PKCancelProtoRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PKCancelProtoRes::IsInitialized() const {

  return true;
}

void PKCancelProtoRes::Swap(PKCancelProtoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PKCancelProtoRes::InternalSwap(PKCancelProtoRes* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PKCancelProtoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKCancelProtoRes_descriptor_;
  metadata.reflection = PKCancelProtoRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PKCancelProtoRes

// optional .proto.ReturnMsg msg = 1;
bool PKCancelProtoRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void PKCancelProtoRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::ReturnMsg& PKCancelProtoRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.PKCancelProtoRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
::proto::ReturnMsg* PKCancelProtoRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.PKCancelProtoRes.msg)
  return msg_;
}
::proto::ReturnMsg* PKCancelProtoRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.PKCancelProtoRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void PKCancelProtoRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PKCancelProtoRes.msg)
}

inline const PKCancelProtoRes* PKCancelProtoRes::internal_default_instance() {
  return &PKCancelProtoRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
