// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushPKAnchorInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushPKAnchorInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* PushPKAnchorInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushPKAnchorInfoMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushPKAnchorInfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushPKAnchorInfo_2eproto() {
  protobuf_AddDesc_PushPKAnchorInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushPKAnchorInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PushPKAnchorInfoMessage_descriptor_ = file->message_type(0);
  static const int PushPKAnchorInfoMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, anchorgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, mergestreamurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, leftpkmaxvictory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, rightpkmaxvictory_),
  };
  PushPKAnchorInfoMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushPKAnchorInfoMessage_descriptor_,
      PushPKAnchorInfoMessage::internal_default_instance(),
      PushPKAnchorInfoMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PushPKAnchorInfoMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPKAnchorInfoMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushPKAnchorInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushPKAnchorInfoMessage_descriptor_, PushPKAnchorInfoMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushPKAnchorInfo_2eproto() {
  PushPKAnchorInfoMessage_default_instance_.Shutdown();
  delete PushPKAnchorInfoMessage_reflection_;
}

void protobuf_InitDefaults_PushPKAnchorInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  PushPKAnchorInfoMessage_default_instance_.DefaultConstruct();
  PushPKAnchorInfoMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushPKAnchorInfo_2eproto_once_);
void protobuf_InitDefaults_PushPKAnchorInfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushPKAnchorInfo_2eproto_once_,
                 &protobuf_InitDefaults_PushPKAnchorInfo_2eproto_impl);
}
void protobuf_AddDesc_PushPKAnchorInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushPKAnchorInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026PushPKAnchorInfo.proto\022\005proto\032\014Entity."
    "proto\"\276\001\n\027PushPKAnchorInfoMessage\022\016\n\006use"
    "rId\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\017\n\007picture\030\003"
    " \001(\t\022\023\n\013anchorGrade\030\004 \001(\005\022\016\n\006roomId\030\005 \001("
    "\t\022\026\n\016mergeStreamUrl\030\006 \001(\t\022\030\n\020leftPkMaxVi"
    "ctory\030\007 \001(\t\022\031\n\021rightPkMaxVictory\030\010 \001(\tB "
    "\n\036com.sencorsta.ids.common.protob\006proto3", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushPKAnchorInfo.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushPKAnchorInfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushPKAnchorInfo_2eproto_once_);
void protobuf_AddDesc_PushPKAnchorInfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushPKAnchorInfo_2eproto_once_,
                 &protobuf_AddDesc_PushPKAnchorInfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushPKAnchorInfo_2eproto {
  StaticDescriptorInitializer_PushPKAnchorInfo_2eproto() {
    protobuf_AddDesc_PushPKAnchorInfo_2eproto();
  }
} static_descriptor_initializer_PushPKAnchorInfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushPKAnchorInfoMessage::kUserIdFieldNumber;
const int PushPKAnchorInfoMessage::kNicknameFieldNumber;
const int PushPKAnchorInfoMessage::kPictureFieldNumber;
const int PushPKAnchorInfoMessage::kAnchorGradeFieldNumber;
const int PushPKAnchorInfoMessage::kRoomIdFieldNumber;
const int PushPKAnchorInfoMessage::kMergeStreamUrlFieldNumber;
const int PushPKAnchorInfoMessage::kLeftPkMaxVictoryFieldNumber;
const int PushPKAnchorInfoMessage::kRightPkMaxVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushPKAnchorInfoMessage::PushPKAnchorInfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushPKAnchorInfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PushPKAnchorInfoMessage)
}

void PushPKAnchorInfoMessage::InitAsDefaultInstance() {
}

PushPKAnchorInfoMessage::PushPKAnchorInfoMessage(const PushPKAnchorInfoMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PushPKAnchorInfoMessage)
}

void PushPKAnchorInfoMessage::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leftpkmaxvictory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rightpkmaxvictory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorgrade_ = 0;
  _cached_size_ = 0;
}

PushPKAnchorInfoMessage::~PushPKAnchorInfoMessage() {
  // @@protoc_insertion_point(destructor:proto.PushPKAnchorInfoMessage)
  SharedDtor();
}

void PushPKAnchorInfoMessage::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leftpkmaxvictory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rightpkmaxvictory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushPKAnchorInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushPKAnchorInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushPKAnchorInfoMessage_descriptor_;
}

const PushPKAnchorInfoMessage& PushPKAnchorInfoMessage::default_instance() {
  protobuf_InitDefaults_PushPKAnchorInfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PushPKAnchorInfoMessage> PushPKAnchorInfoMessage_default_instance_;

PushPKAnchorInfoMessage* PushPKAnchorInfoMessage::New(::google::protobuf::Arena* arena) const {
  PushPKAnchorInfoMessage* n = new PushPKAnchorInfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushPKAnchorInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PushPKAnchorInfoMessage)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorgrade_ = 0;
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leftpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rightpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PushPKAnchorInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PushPKAnchorInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picture;
        break;
      }

      // optional string picture = 3;
      case 3: {
        if (tag == 26) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->picture().data(), this->picture().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.picture"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_anchorGrade;
        break;
      }

      // optional int32 anchorGrade = 4;
      case 4: {
        if (tag == 32) {
         parse_anchorGrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anchorgrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_roomId;
        break;
      }

      // optional string roomId = 5;
      case 5: {
        if (tag == 42) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.roomId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mergeStreamUrl;
        break;
      }

      // optional string mergeStreamUrl = 6;
      case 6: {
        if (tag == 50) {
         parse_mergeStreamUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mergestreamurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mergestreamurl().data(), this->mergestreamurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.mergeStreamUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_leftPkMaxVictory;
        break;
      }

      // optional string leftPkMaxVictory = 7;
      case 7: {
        if (tag == 58) {
         parse_leftPkMaxVictory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leftpkmaxvictory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leftpkmaxvictory().data(), this->leftpkmaxvictory().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.leftPkMaxVictory"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rightPkMaxVictory;
        break;
      }

      // optional string rightPkMaxVictory = 8;
      case 8: {
        if (tag == 66) {
         parse_rightPkMaxVictory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rightpkmaxvictory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rightpkmaxvictory().data(), this->rightpkmaxvictory().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushPKAnchorInfoMessage.rightPkMaxVictory"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PushPKAnchorInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PushPKAnchorInfoMessage)
  return false;
#undef DO_
}

void PushPKAnchorInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PushPKAnchorInfoMessage)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string picture = 3;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.picture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->picture(), output);
  }

  // optional int32 anchorGrade = 4;
  if (this->anchorgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->anchorgrade(), output);
  }

  // optional string roomId = 5;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.roomId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->roomid(), output);
  }

  // optional string mergeStreamUrl = 6;
  if (this->mergestreamurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mergestreamurl().data(), this->mergestreamurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.mergeStreamUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mergestreamurl(), output);
  }

  // optional string leftPkMaxVictory = 7;
  if (this->leftpkmaxvictory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leftpkmaxvictory().data(), this->leftpkmaxvictory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.leftPkMaxVictory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->leftpkmaxvictory(), output);
  }

  // optional string rightPkMaxVictory = 8;
  if (this->rightpkmaxvictory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rightpkmaxvictory().data(), this->rightpkmaxvictory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.rightPkMaxVictory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rightpkmaxvictory(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PushPKAnchorInfoMessage)
}

::google::protobuf::uint8* PushPKAnchorInfoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PushPKAnchorInfoMessage)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string picture = 3;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.picture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picture(), target);
  }

  // optional int32 anchorGrade = 4;
  if (this->anchorgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->anchorgrade(), target);
  }

  // optional string roomId = 5;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.roomId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomid(), target);
  }

  // optional string mergeStreamUrl = 6;
  if (this->mergestreamurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mergestreamurl().data(), this->mergestreamurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.mergeStreamUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mergestreamurl(), target);
  }

  // optional string leftPkMaxVictory = 7;
  if (this->leftpkmaxvictory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leftpkmaxvictory().data(), this->leftpkmaxvictory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.leftPkMaxVictory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leftpkmaxvictory(), target);
  }

  // optional string rightPkMaxVictory = 8;
  if (this->rightpkmaxvictory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rightpkmaxvictory().data(), this->rightpkmaxvictory().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushPKAnchorInfoMessage.rightPkMaxVictory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rightpkmaxvictory(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.PushPKAnchorInfoMessage)
  return target;
}

size_t PushPKAnchorInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PushPKAnchorInfoMessage)
  size_t total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string picture = 3;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picture());
  }

  // optional int32 anchorGrade = 4;
  if (this->anchorgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anchorgrade());
  }

  // optional string roomId = 5;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // optional string mergeStreamUrl = 6;
  if (this->mergestreamurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mergestreamurl());
  }

  // optional string leftPkMaxVictory = 7;
  if (this->leftpkmaxvictory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leftpkmaxvictory());
  }

  // optional string rightPkMaxVictory = 8;
  if (this->rightpkmaxvictory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rightpkmaxvictory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushPKAnchorInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PushPKAnchorInfoMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PushPKAnchorInfoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushPKAnchorInfoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PushPKAnchorInfoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PushPKAnchorInfoMessage)
    UnsafeMergeFrom(*source);
  }
}

void PushPKAnchorInfoMessage::MergeFrom(const PushPKAnchorInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PushPKAnchorInfoMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PushPKAnchorInfoMessage::UnsafeMergeFrom(const PushPKAnchorInfoMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.picture().size() > 0) {

    picture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_);
  }
  if (from.anchorgrade() != 0) {
    set_anchorgrade(from.anchorgrade());
  }
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.mergestreamurl().size() > 0) {

    mergestreamurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mergestreamurl_);
  }
  if (from.leftpkmaxvictory().size() > 0) {

    leftpkmaxvictory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leftpkmaxvictory_);
  }
  if (from.rightpkmaxvictory().size() > 0) {

    rightpkmaxvictory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rightpkmaxvictory_);
  }
}

void PushPKAnchorInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PushPKAnchorInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushPKAnchorInfoMessage::CopyFrom(const PushPKAnchorInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PushPKAnchorInfoMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PushPKAnchorInfoMessage::IsInitialized() const {

  return true;
}

void PushPKAnchorInfoMessage::Swap(PushPKAnchorInfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushPKAnchorInfoMessage::InternalSwap(PushPKAnchorInfoMessage* other) {
  userid_.Swap(&other->userid_);
  nickname_.Swap(&other->nickname_);
  picture_.Swap(&other->picture_);
  std::swap(anchorgrade_, other->anchorgrade_);
  roomid_.Swap(&other->roomid_);
  mergestreamurl_.Swap(&other->mergestreamurl_);
  leftpkmaxvictory_.Swap(&other->leftpkmaxvictory_);
  rightpkmaxvictory_.Swap(&other->rightpkmaxvictory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushPKAnchorInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushPKAnchorInfoMessage_descriptor_;
  metadata.reflection = PushPKAnchorInfoMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushPKAnchorInfoMessage

// optional string userId = 1;
void PushPKAnchorInfoMessage::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::userid() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.userId)
}
void PushPKAnchorInfoMessage::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.userId)
}
void PushPKAnchorInfoMessage::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.userId)
}
::std::string* PushPKAnchorInfoMessage::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_userid() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.userId)
}

// optional string nickname = 2;
void PushPKAnchorInfoMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::nickname() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.nickname)
}
void PushPKAnchorInfoMessage::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.nickname)
}
void PushPKAnchorInfoMessage::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.nickname)
}
::std::string* PushPKAnchorInfoMessage::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.nickname)
}

// optional string picture = 3;
void PushPKAnchorInfoMessage::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::picture() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.picture)
}
void PushPKAnchorInfoMessage::set_picture(const char* value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.picture)
}
void PushPKAnchorInfoMessage::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.picture)
}
::std::string* PushPKAnchorInfoMessage::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_picture() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.picture)
}

// optional int32 anchorGrade = 4;
void PushPKAnchorInfoMessage::clear_anchorgrade() {
  anchorgrade_ = 0;
}
::google::protobuf::int32 PushPKAnchorInfoMessage::anchorgrade() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.anchorGrade)
  return anchorgrade_;
}
void PushPKAnchorInfoMessage::set_anchorgrade(::google::protobuf::int32 value) {
  
  anchorgrade_ = value;
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.anchorGrade)
}

// optional string roomId = 5;
void PushPKAnchorInfoMessage::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::roomid() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.roomId)
}
void PushPKAnchorInfoMessage::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.roomId)
}
void PushPKAnchorInfoMessage::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.roomId)
}
::std::string* PushPKAnchorInfoMessage::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.roomId)
}

// optional string mergeStreamUrl = 6;
void PushPKAnchorInfoMessage::clear_mergestreamurl() {
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::mergestreamurl() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  return mergestreamurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_mergestreamurl(const ::std::string& value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
void PushPKAnchorInfoMessage::set_mergestreamurl(const char* value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
void PushPKAnchorInfoMessage::set_mergestreamurl(const char* value, size_t size) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
::std::string* PushPKAnchorInfoMessage::mutable_mergestreamurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  return mergestreamurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_mergestreamurl() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  
  return mergestreamurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_mergestreamurl(::std::string* mergestreamurl) {
  if (mergestreamurl != NULL) {
    
  } else {
    
  }
  mergestreamurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mergestreamurl);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}

// optional string leftPkMaxVictory = 7;
void PushPKAnchorInfoMessage::clear_leftpkmaxvictory() {
  leftpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::leftpkmaxvictory() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  return leftpkmaxvictory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const ::std::string& value) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const char* value) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const char* value, size_t size) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
::std::string* PushPKAnchorInfoMessage::mutable_leftpkmaxvictory() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  return leftpkmaxvictory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_leftpkmaxvictory() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  
  return leftpkmaxvictory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_leftpkmaxvictory(::std::string* leftpkmaxvictory) {
  if (leftpkmaxvictory != NULL) {
    
  } else {
    
  }
  leftpkmaxvictory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leftpkmaxvictory);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}

// optional string rightPkMaxVictory = 8;
void PushPKAnchorInfoMessage::clear_rightpkmaxvictory() {
  rightpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushPKAnchorInfoMessage::rightpkmaxvictory() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  return rightpkmaxvictory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const ::std::string& value) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const char* value) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const char* value, size_t size) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
::std::string* PushPKAnchorInfoMessage::mutable_rightpkmaxvictory() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  return rightpkmaxvictory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushPKAnchorInfoMessage::release_rightpkmaxvictory() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  
  return rightpkmaxvictory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushPKAnchorInfoMessage::set_allocated_rightpkmaxvictory(::std::string* rightpkmaxvictory) {
  if (rightpkmaxvictory != NULL) {
    
  } else {
    
  }
  rightpkmaxvictory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rightpkmaxvictory);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}

inline const PushPKAnchorInfoMessage* PushPKAnchorInfoMessage::internal_default_instance() {
  return &PushPKAnchorInfoMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
