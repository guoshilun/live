// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushStreamByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushStreamByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* pushStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pushStream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushStreamByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushStreamByProto_2eproto() {
  protobuf_AddDesc_PushStreamByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushStreamByProto.proto");
  GOOGLE_CHECK(file != NULL);
  pushStream_descriptor_ = file->message_type(0);
  static const int pushStream_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushStream, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushStream, anchorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushStream, streamid_),
  };
  pushStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pushStream_descriptor_,
      pushStream::internal_default_instance(),
      pushStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(pushStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushStream, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushStreamByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pushStream_descriptor_, pushStream::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushStreamByProto_2eproto() {
  pushStream_default_instance_.Shutdown();
  delete pushStream_reflection_;
}

void protobuf_InitDefaults_PushStreamByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  pushStream_default_instance_.DefaultConstruct();
  pushStream_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushStreamByProto_2eproto_once_);
void protobuf_InitDefaults_PushStreamByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushStreamByProto_2eproto_once_,
                 &protobuf_InitDefaults_PushStreamByProto_2eproto_impl);
}
void protobuf_AddDesc_PushStreamByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushStreamByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027PushStreamByProto.proto\022\005proto\032\014Entity"
    ".proto\"@\n\npushStream\022\016\n\006userId\030\001 \001(\t\022\020\n\010"
    "anchorId\030\002 \001(\t\022\020\n\010streamId\030\003 \001(\tB \n\036com."
    "sencorsta.ids.common.protob\006proto3", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushStreamByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushStreamByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushStreamByProto_2eproto_once_);
void protobuf_AddDesc_PushStreamByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushStreamByProto_2eproto_once_,
                 &protobuf_AddDesc_PushStreamByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushStreamByProto_2eproto {
  StaticDescriptorInitializer_PushStreamByProto_2eproto() {
    protobuf_AddDesc_PushStreamByProto_2eproto();
  }
} static_descriptor_initializer_PushStreamByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pushStream::kUserIdFieldNumber;
const int pushStream::kAnchorIdFieldNumber;
const int pushStream::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pushStream::pushStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushStreamByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.pushStream)
}

void pushStream::InitAsDefaultInstance() {
}

pushStream::pushStream(const pushStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.pushStream)
}

void pushStream::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

pushStream::~pushStream() {
  // @@protoc_insertion_point(destructor:proto.pushStream)
  SharedDtor();
}

void pushStream::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pushStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pushStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pushStream_descriptor_;
}

const pushStream& pushStream::default_instance() {
  protobuf_InitDefaults_PushStreamByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<pushStream> pushStream_default_instance_;

pushStream* pushStream::New(::google::protobuf::Arena* arena) const {
  pushStream* n = new pushStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pushStream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.pushStream)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pushStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.pushStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushStream.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_anchorId;
        break;
      }

      // optional string anchorId = 2;
      case 2: {
        if (tag == 18) {
         parse_anchorId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), this->anchorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushStream.anchorId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_streamId;
        break;
      }

      // optional string streamId = 3;
      case 3: {
        if (tag == 26) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushStream.streamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.pushStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.pushStream)
  return false;
#undef DO_
}

void pushStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.pushStream)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), this->anchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.anchorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->anchorid(), output);
  }

  // optional string streamId = 3;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->streamid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.pushStream)
}

::google::protobuf::uint8* pushStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.pushStream)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), this->anchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.anchorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->anchorid(), target);
  }

  // optional string streamId = 3;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushStream.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->streamid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.pushStream)
  return target;
}

size_t pushStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.pushStream)
  size_t total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // optional string streamId = 3;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pushStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.pushStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pushStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pushStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.pushStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.pushStream)
    UnsafeMergeFrom(*source);
  }
}

void pushStream::MergeFrom(const pushStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.pushStream)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void pushStream::UnsafeMergeFrom(const pushStream& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.streamid().size() > 0) {

    streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
  }
}

void pushStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.pushStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pushStream::CopyFrom(const pushStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.pushStream)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool pushStream::IsInitialized() const {

  return true;
}

void pushStream::Swap(pushStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pushStream::InternalSwap(pushStream* other) {
  userid_.Swap(&other->userid_);
  anchorid_.Swap(&other->anchorid_);
  streamid_.Swap(&other->streamid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pushStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pushStream_descriptor_;
  metadata.reflection = pushStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pushStream

// optional string userId = 1;
void pushStream::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushStream::userid() const {
  // @@protoc_insertion_point(field_get:proto.pushStream.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushStream.userId)
}
void pushStream::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushStream.userId)
}
void pushStream::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushStream.userId)
}
::std::string* pushStream::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushStream.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushStream::release_userid() {
  // @@protoc_insertion_point(field_release:proto.pushStream.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushStream.userId)
}

// optional string anchorId = 2;
void pushStream::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushStream::anchorid() const {
  // @@protoc_insertion_point(field_get:proto.pushStream.anchorId)
  return anchorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_anchorid(const ::std::string& value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushStream.anchorId)
}
void pushStream::set_anchorid(const char* value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushStream.anchorId)
}
void pushStream::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushStream.anchorId)
}
::std::string* pushStream::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushStream.anchorId)
  return anchorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushStream::release_anchorid() {
  // @@protoc_insertion_point(field_release:proto.pushStream.anchorId)
  
  return anchorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_allocated_anchorid(::std::string* anchorid) {
  if (anchorid != NULL) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushStream.anchorId)
}

// optional string streamId = 3;
void pushStream::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushStream::streamid() const {
  // @@protoc_insertion_point(field_get:proto.pushStream.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushStream.streamId)
}
void pushStream::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushStream.streamId)
}
void pushStream::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushStream.streamId)
}
::std::string* pushStream::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushStream.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushStream::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.pushStream.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushStream::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushStream.streamId)
}

inline const pushStream* pushStream::internal_default_instance() {
  return &pushStream_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
