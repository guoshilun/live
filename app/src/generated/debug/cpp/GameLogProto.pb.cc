// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameLogProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameLogProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* GameLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameLogRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLogRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameLogResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLogResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameLogProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameLogProto_2eproto() {
  protobuf_AddDesc_GameLogProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameLogProto.proto");
  GOOGLE_CHECK(file != NULL);
  GameLogReq_descriptor_ = file->message_type(0);
  static const int GameLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogReq, userid_),
  };
  GameLogReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameLogReq_descriptor_,
      GameLogReq::internal_default_instance(),
      GameLogReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameLogReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogReq, _internal_metadata_));
  GameLogRes_descriptor_ = file->message_type(1);
  static const int GameLogRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogRes, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogRes, gamelog_),
  };
  GameLogRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameLogRes_descriptor_,
      GameLogRes::internal_default_instance(),
      GameLogRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameLogRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogRes, _internal_metadata_));
  GameLogResult_descriptor_ = file->message_type(2);
  static const int GameLogResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogResult, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogResult, money_),
  };
  GameLogResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameLogResult_descriptor_,
      GameLogResult::internal_default_instance(),
      GameLogResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameLogResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLogResult, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameLogProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameLogReq_descriptor_, GameLogReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameLogRes_descriptor_, GameLogRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameLogResult_descriptor_, GameLogResult::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameLogProto_2eproto() {
  GameLogReq_default_instance_.Shutdown();
  delete GameLogReq_reflection_;
  GameLogRes_default_instance_.Shutdown();
  delete GameLogRes_reflection_;
  GameLogResult_default_instance_.Shutdown();
  delete GameLogResult_reflection_;
}

void protobuf_InitDefaults_GameLogProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  GameLogReq_default_instance_.DefaultConstruct();
  GameLogRes_default_instance_.DefaultConstruct();
  GameLogResult_default_instance_.DefaultConstruct();
  GameLogReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameLogRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameLogResult_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_GameLogProto_2eproto_once_);
void protobuf_InitDefaults_GameLogProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_GameLogProto_2eproto_once_,
                 &protobuf_InitDefaults_GameLogProto_2eproto_impl);
}
void protobuf_AddDesc_GameLogProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_GameLogProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GameLogProto.proto\022\005proto\032\014Entity.prot"
    "o\"\034\n\nGameLogReq\022\016\n\006userId\030\001 \001(\t\"R\n\nGameL"
    "ogRes\022\035\n\003msg\030\001 \001(\0132\020.proto.ReturnMsg\022%\n\007"
    "gameLog\030\002 \003(\0132\024.proto.GameLogResult\"9\n\rG"
    "ameLogResult\022\013\n\003num\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022"
    "\r\n\005money\030\003 \001(\005B \n\036com.sencorsta.ids.comm"
    "on.protob\006proto3", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameLogProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameLogProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GameLogProto_2eproto_once_);
void protobuf_AddDesc_GameLogProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GameLogProto_2eproto_once_,
                 &protobuf_AddDesc_GameLogProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameLogProto_2eproto {
  StaticDescriptorInitializer_GameLogProto_2eproto() {
    protobuf_AddDesc_GameLogProto_2eproto();
  }
} static_descriptor_initializer_GameLogProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLogReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLogReq::GameLogReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_GameLogProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GameLogReq)
}

void GameLogReq::InitAsDefaultInstance() {
}

GameLogReq::GameLogReq(const GameLogReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GameLogReq)
}

void GameLogReq::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GameLogReq::~GameLogReq() {
  // @@protoc_insertion_point(destructor:proto.GameLogReq)
  SharedDtor();
}

void GameLogReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLogReq_descriptor_;
}

const GameLogReq& GameLogReq::default_instance() {
  protobuf_InitDefaults_GameLogProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameLogReq> GameLogReq_default_instance_;

GameLogReq* GameLogReq::New(::google::protobuf::Arena* arena) const {
  GameLogReq* n = new GameLogReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameLogReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameLogReq)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GameLogReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GameLogReq.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GameLogReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GameLogReq)
  return false;
#undef DO_
}

void GameLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GameLogReq)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GameLogReq.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.GameLogReq)
}

::google::protobuf::uint8* GameLogReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameLogReq)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GameLogReq.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.GameLogReq)
  return target;
}

size_t GameLogReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameLogReq)
  size_t total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLogReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GameLogReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameLogReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameLogReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GameLogReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GameLogReq)
    UnsafeMergeFrom(*source);
  }
}

void GameLogReq::MergeFrom(const GameLogReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GameLogReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameLogReq::UnsafeMergeFrom(const GameLogReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void GameLogReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GameLogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogReq::CopyFrom(const GameLogReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameLogReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameLogReq::IsInitialized() const {

  return true;
}

void GameLogReq::Swap(GameLogReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLogReq::InternalSwap(GameLogReq* other) {
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLogReq_descriptor_;
  metadata.reflection = GameLogReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameLogReq

// optional string userId = 1;
void GameLogReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameLogReq::userid() const {
  // @@protoc_insertion_point(field_get:proto.GameLogReq.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameLogReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GameLogReq.userId)
}
void GameLogReq::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GameLogReq.userId)
}
void GameLogReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GameLogReq.userId)
}
::std::string* GameLogReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.GameLogReq.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameLogReq::release_userid() {
  // @@protoc_insertion_point(field_release:proto.GameLogReq.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameLogReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.GameLogReq.userId)
}

inline const GameLogReq* GameLogReq::internal_default_instance() {
  return &GameLogReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLogRes::kMsgFieldNumber;
const int GameLogRes::kGameLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLogRes::GameLogRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_GameLogProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GameLogRes)
}

void GameLogRes::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::ReturnMsg*>(
      ::proto::ReturnMsg::internal_default_instance());
}

GameLogRes::GameLogRes(const GameLogRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GameLogRes)
}

void GameLogRes::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

GameLogRes::~GameLogRes() {
  // @@protoc_insertion_point(destructor:proto.GameLogRes)
  SharedDtor();
}

void GameLogRes::SharedDtor() {
  if (this != &GameLogRes_default_instance_.get()) {
    delete msg_;
  }
}

void GameLogRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLogRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLogRes_descriptor_;
}

const GameLogRes& GameLogRes::default_instance() {
  protobuf_InitDefaults_GameLogProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameLogRes> GameLogRes_default_instance_;

GameLogRes* GameLogRes::New(::google::protobuf::Arena* arena) const {
  GameLogRes* n = new GameLogRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameLogRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameLogRes)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
  gamelog_.Clear();
}

bool GameLogRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GameLogRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ReturnMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gameLog;
        break;
      }

      // repeated .proto.GameLogResult gameLog = 2;
      case 2: {
        if (tag == 18) {
         parse_gameLog:
          DO_(input->IncrementRecursionDepth());
         parse_loop_gameLog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gamelog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_gameLog;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GameLogRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GameLogRes)
  return false;
#undef DO_
}

void GameLogRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GameLogRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // repeated .proto.GameLogResult gameLog = 2;
  for (unsigned int i = 0, n = this->gamelog_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gamelog(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.GameLogRes)
}

::google::protobuf::uint8* GameLogRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameLogRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // repeated .proto.GameLogResult gameLog = 2;
  for (unsigned int i = 0, n = this->gamelog_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gamelog(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.GameLogRes)
  return target;
}

size_t GameLogRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameLogRes)
  size_t total_size = 0;

  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  // repeated .proto.GameLogResult gameLog = 2;
  {
    unsigned int count = this->gamelog_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelog(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLogRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GameLogRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameLogRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameLogRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GameLogRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GameLogRes)
    UnsafeMergeFrom(*source);
  }
}

void GameLogRes::MergeFrom(const GameLogRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GameLogRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameLogRes::UnsafeMergeFrom(const GameLogRes& from) {
  GOOGLE_DCHECK(&from != this);
  gamelog_.MergeFrom(from.gamelog_);
  if (from.has_msg()) {
    mutable_msg()->::proto::ReturnMsg::MergeFrom(from.msg());
  }
}

void GameLogRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GameLogRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogRes::CopyFrom(const GameLogRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameLogRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameLogRes::IsInitialized() const {

  return true;
}

void GameLogRes::Swap(GameLogRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLogRes::InternalSwap(GameLogRes* other) {
  std::swap(msg_, other->msg_);
  gamelog_.UnsafeArenaSwap(&other->gamelog_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameLogRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLogRes_descriptor_;
  metadata.reflection = GameLogRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameLogRes

// optional .proto.ReturnMsg msg = 1;
bool GameLogRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void GameLogRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::ReturnMsg& GameLogRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.GameLogRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
::proto::ReturnMsg* GameLogRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.GameLogRes.msg)
  return msg_;
}
::proto::ReturnMsg* GameLogRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.GameLogRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void GameLogRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GameLogRes.msg)
}

// repeated .proto.GameLogResult gameLog = 2;
int GameLogRes::gamelog_size() const {
  return gamelog_.size();
}
void GameLogRes::clear_gamelog() {
  gamelog_.Clear();
}
const ::proto::GameLogResult& GameLogRes::gamelog(int index) const {
  // @@protoc_insertion_point(field_get:proto.GameLogRes.gameLog)
  return gamelog_.Get(index);
}
::proto::GameLogResult* GameLogRes::mutable_gamelog(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GameLogRes.gameLog)
  return gamelog_.Mutable(index);
}
::proto::GameLogResult* GameLogRes::add_gamelog() {
  // @@protoc_insertion_point(field_add:proto.GameLogRes.gameLog)
  return gamelog_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GameLogResult >*
GameLogRes::mutable_gamelog() {
  // @@protoc_insertion_point(field_mutable_list:proto.GameLogRes.gameLog)
  return &gamelog_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GameLogResult >&
GameLogRes::gamelog() const {
  // @@protoc_insertion_point(field_list:proto.GameLogRes.gameLog)
  return gamelog_;
}

inline const GameLogRes* GameLogRes::internal_default_instance() {
  return &GameLogRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLogResult::kNumFieldNumber;
const int GameLogResult::kTypeFieldNumber;
const int GameLogResult::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLogResult::GameLogResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_GameLogProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GameLogResult)
}

void GameLogResult::InitAsDefaultInstance() {
}

GameLogResult::GameLogResult(const GameLogResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.GameLogResult)
}

void GameLogResult::SharedCtor() {
  ::memset(&num_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&num_) + sizeof(money_));
  _cached_size_ = 0;
}

GameLogResult::~GameLogResult() {
  // @@protoc_insertion_point(destructor:proto.GameLogResult)
  SharedDtor();
}

void GameLogResult::SharedDtor() {
}

void GameLogResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLogResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLogResult_descriptor_;
}

const GameLogResult& GameLogResult::default_instance() {
  protobuf_InitDefaults_GameLogProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameLogResult> GameLogResult_default_instance_;

GameLogResult* GameLogResult::New(::google::protobuf::Arena* arena) const {
  GameLogResult* n = new GameLogResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameLogResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameLogResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameLogResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameLogResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_, money_);

#undef ZR_HELPER_
#undef ZR_

}

bool GameLogResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GameLogResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GameLogResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GameLogResult)
  return false;
#undef DO_
}

void GameLogResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GameLogResult)
  // optional int32 num = 1;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 money = 3;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.GameLogResult)
}

::google::protobuf::uint8* GameLogResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameLogResult)
  // optional int32 num = 1;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 money = 3;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.GameLogResult)
  return target;
}

size_t GameLogResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameLogResult)
  size_t total_size = 0;

  // optional int32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLogResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GameLogResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameLogResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameLogResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GameLogResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GameLogResult)
    UnsafeMergeFrom(*source);
  }
}

void GameLogResult::MergeFrom(const GameLogResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GameLogResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameLogResult::UnsafeMergeFrom(const GameLogResult& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
}

void GameLogResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GameLogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLogResult::CopyFrom(const GameLogResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameLogResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameLogResult::IsInitialized() const {

  return true;
}

void GameLogResult::Swap(GameLogResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLogResult::InternalSwap(GameLogResult* other) {
  std::swap(num_, other->num_);
  std::swap(type_, other->type_);
  std::swap(money_, other->money_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameLogResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLogResult_descriptor_;
  metadata.reflection = GameLogResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameLogResult

// optional int32 num = 1;
void GameLogResult::clear_num() {
  num_ = 0;
}
::google::protobuf::int32 GameLogResult::num() const {
  // @@protoc_insertion_point(field_get:proto.GameLogResult.num)
  return num_;
}
void GameLogResult::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.GameLogResult.num)
}

// optional int32 type = 2;
void GameLogResult::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GameLogResult::type() const {
  // @@protoc_insertion_point(field_get:proto.GameLogResult.type)
  return type_;
}
void GameLogResult::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.GameLogResult.type)
}

// optional int32 money = 3;
void GameLogResult::clear_money() {
  money_ = 0;
}
::google::protobuf::int32 GameLogResult::money() const {
  // @@protoc_insertion_point(field_get:proto.GameLogResult.money)
  return money_;
}
void GameLogResult::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.GameLogResult.money)
}

inline const GameLogResult* GameLogResult::internal_default_instance() {
  return &GameLogResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
