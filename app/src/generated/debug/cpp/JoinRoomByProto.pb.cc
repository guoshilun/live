// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoinRoomByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JoinRoomByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* JoinRoomByProtoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomByProtoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomByProtoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomByProtoRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JoinRoomByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_JoinRoomByProto_2eproto() {
  protobuf_AddDesc_JoinRoomByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JoinRoomByProto.proto");
  GOOGLE_CHECK(file != NULL);
  JoinRoomByProtoReq_descriptor_ = file->message_type(0);
  static const int JoinRoomByProtoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoReq, roomid_),
  };
  JoinRoomByProtoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinRoomByProtoReq_descriptor_,
      JoinRoomByProtoReq::internal_default_instance(),
      JoinRoomByProtoReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinRoomByProtoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoReq, _internal_metadata_));
  JoinRoomByProtoRes_descriptor_ = file->message_type(1);
  static const int JoinRoomByProtoRes_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, playurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, anchorgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, needexperience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, isattention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, oth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, streampkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, pkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, gamestate_),
  };
  JoinRoomByProtoRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JoinRoomByProtoRes_descriptor_,
      JoinRoomByProtoRes::internal_default_instance(),
      JoinRoomByProtoRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(JoinRoomByProtoRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomByProtoRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JoinRoomByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinRoomByProtoReq_descriptor_, JoinRoomByProtoReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JoinRoomByProtoRes_descriptor_, JoinRoomByProtoRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JoinRoomByProto_2eproto() {
  JoinRoomByProtoReq_default_instance_.Shutdown();
  delete JoinRoomByProtoReq_reflection_;
  JoinRoomByProtoRes_default_instance_.Shutdown();
  delete JoinRoomByProtoRes_reflection_;
}

void protobuf_InitDefaults_JoinRoomByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  JoinRoomByProtoReq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  JoinRoomByProtoRes_default_instance_.DefaultConstruct();
  JoinRoomByProtoReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  JoinRoomByProtoRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_JoinRoomByProto_2eproto_once_);
void protobuf_InitDefaults_JoinRoomByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_JoinRoomByProto_2eproto_once_,
                 &protobuf_InitDefaults_JoinRoomByProto_2eproto_impl);
}
void protobuf_AddDesc_JoinRoomByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_JoinRoomByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025JoinRoomByProto.proto\022\005proto\032\014Entity.p"
    "roto\"$\n\022JoinRoomByProtoReq\022\016\n\006roomId\030\001 \001"
    "(\t\"\340\002\n\022JoinRoomByProtoRes\022\035\n\003msg\030\001 \001(\0132\020"
    ".proto.ReturnMsg\022\016\n\006banned\030\002 \001(\005\022\017\n\007play"
    "Url\030\003 \001(\t\022\020\n\010roomName\030\004 \001(\t\022\r\n\005count\030\005 \001"
    "(\005\022\017\n\007picture\030\006 \001(\t\022\020\n\010nickname\030\007 \001(\t\022\017\n"
    "\007account\030\010 \001(\t\022\016\n\006userId\030\t \001(\t\022\023\n\013anchor"
    "Grade\030\n \001(\005\022\026\n\016needExperience\030\013 \001(\005\022\023\n\013i"
    "sAttention\030\014 \001(\005\022\017\n\007ranking\030\r \001(\005\022\013\n\003oth"
    "\030\016 \001(\005\022\020\n\010streamId\030\017 \001(\t\022\022\n\nstreamPkId\030\020"
    " \001(\t\022\014\n\004pkId\030\021 \001(\t\022\021\n\tgameState\030\022 \001(\005B \n"
    "\036com.sencorsta.ids.common.protob\006proto3", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JoinRoomByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JoinRoomByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_JoinRoomByProto_2eproto_once_);
void protobuf_AddDesc_JoinRoomByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_JoinRoomByProto_2eproto_once_,
                 &protobuf_AddDesc_JoinRoomByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JoinRoomByProto_2eproto {
  StaticDescriptorInitializer_JoinRoomByProto_2eproto() {
    protobuf_AddDesc_JoinRoomByProto_2eproto();
  }
} static_descriptor_initializer_JoinRoomByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomByProtoReq::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomByProtoReq::JoinRoomByProtoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_JoinRoomByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.JoinRoomByProtoReq)
}

void JoinRoomByProtoReq::InitAsDefaultInstance() {
}

JoinRoomByProtoReq::JoinRoomByProtoReq(const JoinRoomByProtoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.JoinRoomByProtoReq)
}

void JoinRoomByProtoReq::SharedCtor() {
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JoinRoomByProtoReq::~JoinRoomByProtoReq() {
  // @@protoc_insertion_point(destructor:proto.JoinRoomByProtoReq)
  SharedDtor();
}

void JoinRoomByProtoReq::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinRoomByProtoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomByProtoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomByProtoReq_descriptor_;
}

const JoinRoomByProtoReq& JoinRoomByProtoReq::default_instance() {
  protobuf_InitDefaults_JoinRoomByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JoinRoomByProtoReq> JoinRoomByProtoReq_default_instance_;

JoinRoomByProtoReq* JoinRoomByProtoReq::New(::google::protobuf::Arena* arena) const {
  JoinRoomByProtoReq* n = new JoinRoomByProtoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomByProtoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.JoinRoomByProtoReq)
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinRoomByProtoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.JoinRoomByProtoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoReq.roomId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.JoinRoomByProtoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.JoinRoomByProtoReq)
  return false;
#undef DO_
}

void JoinRoomByProtoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.JoinRoomByProtoReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoReq.roomId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.JoinRoomByProtoReq)
}

::google::protobuf::uint8* JoinRoomByProtoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.JoinRoomByProtoReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoReq.roomId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.JoinRoomByProtoReq)
  return target;
}

size_t JoinRoomByProtoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.JoinRoomByProtoReq)
  size_t total_size = 0;

  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomByProtoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.JoinRoomByProtoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JoinRoomByProtoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomByProtoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.JoinRoomByProtoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.JoinRoomByProtoReq)
    UnsafeMergeFrom(*source);
  }
}

void JoinRoomByProtoReq::MergeFrom(const JoinRoomByProtoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.JoinRoomByProtoReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JoinRoomByProtoReq::UnsafeMergeFrom(const JoinRoomByProtoReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
}

void JoinRoomByProtoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.JoinRoomByProtoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomByProtoReq::CopyFrom(const JoinRoomByProtoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.JoinRoomByProtoReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JoinRoomByProtoReq::IsInitialized() const {

  return true;
}

void JoinRoomByProtoReq::Swap(JoinRoomByProtoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomByProtoReq::InternalSwap(JoinRoomByProtoReq* other) {
  roomid_.Swap(&other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomByProtoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomByProtoReq_descriptor_;
  metadata.reflection = JoinRoomByProtoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomByProtoReq

// optional string roomId = 1;
void JoinRoomByProtoReq::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoReq::roomid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoReq.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoReq::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoReq.roomId)
}
void JoinRoomByProtoReq::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoReq.roomId)
}
void JoinRoomByProtoReq::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoReq.roomId)
}
::std::string* JoinRoomByProtoReq::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoReq.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoReq::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoReq.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoReq::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoReq.roomId)
}

inline const JoinRoomByProtoReq* JoinRoomByProtoReq::internal_default_instance() {
  return &JoinRoomByProtoReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomByProtoRes::kMsgFieldNumber;
const int JoinRoomByProtoRes::kBannedFieldNumber;
const int JoinRoomByProtoRes::kPlayUrlFieldNumber;
const int JoinRoomByProtoRes::kRoomNameFieldNumber;
const int JoinRoomByProtoRes::kCountFieldNumber;
const int JoinRoomByProtoRes::kPictureFieldNumber;
const int JoinRoomByProtoRes::kNicknameFieldNumber;
const int JoinRoomByProtoRes::kAccountFieldNumber;
const int JoinRoomByProtoRes::kUserIdFieldNumber;
const int JoinRoomByProtoRes::kAnchorGradeFieldNumber;
const int JoinRoomByProtoRes::kNeedExperienceFieldNumber;
const int JoinRoomByProtoRes::kIsAttentionFieldNumber;
const int JoinRoomByProtoRes::kRankingFieldNumber;
const int JoinRoomByProtoRes::kOthFieldNumber;
const int JoinRoomByProtoRes::kStreamIdFieldNumber;
const int JoinRoomByProtoRes::kStreamPkIdFieldNumber;
const int JoinRoomByProtoRes::kPkIdFieldNumber;
const int JoinRoomByProtoRes::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomByProtoRes::JoinRoomByProtoRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_JoinRoomByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.JoinRoomByProtoRes)
}

void JoinRoomByProtoRes::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::ReturnMsg*>(
      ::proto::ReturnMsg::internal_default_instance());
}

JoinRoomByProtoRes::JoinRoomByProtoRes(const JoinRoomByProtoRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.JoinRoomByProtoRes)
}

void JoinRoomByProtoRes::SharedCtor() {
  playurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streampkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = NULL;
  ::memset(&banned_, 0, reinterpret_cast<char*>(&gamestate_) -
    reinterpret_cast<char*>(&banned_) + sizeof(gamestate_));
  _cached_size_ = 0;
}

JoinRoomByProtoRes::~JoinRoomByProtoRes() {
  // @@protoc_insertion_point(destructor:proto.JoinRoomByProtoRes)
  SharedDtor();
}

void JoinRoomByProtoRes::SharedDtor() {
  playurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streampkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &JoinRoomByProtoRes_default_instance_.get()) {
    delete msg_;
  }
}

void JoinRoomByProtoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomByProtoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomByProtoRes_descriptor_;
}

const JoinRoomByProtoRes& JoinRoomByProtoRes::default_instance() {
  protobuf_InitDefaults_JoinRoomByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JoinRoomByProtoRes> JoinRoomByProtoRes_default_instance_;

JoinRoomByProtoRes* JoinRoomByProtoRes::New(::google::protobuf::Arena* arena) const {
  JoinRoomByProtoRes* n = new JoinRoomByProtoRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomByProtoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.JoinRoomByProtoRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JoinRoomByProtoRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinRoomByProtoRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(banned_, count_);
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
  playurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(anchorgrade_, oth_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streampkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamestate_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool JoinRoomByProtoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.JoinRoomByProtoRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ReturnMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banned;
        break;
      }

      // optional int32 banned = 2;
      case 2: {
        if (tag == 16) {
         parse_banned:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playUrl;
        break;
      }

      // optional string playUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_playUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playurl().data(), this->playurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.playUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }

      // optional string roomName = 4;
      case 4: {
        if (tag == 34) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_picture;
        break;
      }

      // optional string picture = 6;
      case 6: {
        if (tag == 50) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->picture().data(), this->picture().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.picture"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nickname;
        break;
      }

      // optional string nickname = 7;
      case 7: {
        if (tag == 58) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_account;
        break;
      }

      // optional string account = 8;
      case 8: {
        if (tag == 66) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_userId;
        break;
      }

      // optional string userId = 9;
      case 9: {
        if (tag == 74) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_anchorGrade;
        break;
      }

      // optional int32 anchorGrade = 10;
      case 10: {
        if (tag == 80) {
         parse_anchorGrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anchorgrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_needExperience;
        break;
      }

      // optional int32 needExperience = 11;
      case 11: {
        if (tag == 88) {
         parse_needExperience:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needexperience_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_isAttention;
        break;
      }

      // optional int32 isAttention = 12;
      case 12: {
        if (tag == 96) {
         parse_isAttention:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isattention_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 13;
      case 13: {
        if (tag == 104) {
         parse_ranking:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_oth;
        break;
      }

      // optional int32 oth = 14;
      case 14: {
        if (tag == 112) {
         parse_oth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_streamId;
        break;
      }

      // optional string streamId = 15;
      case 15: {
        if (tag == 122) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.streamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_streamPkId;
        break;
      }

      // optional string streamPkId = 16;
      case 16: {
        if (tag == 130) {
         parse_streamPkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streampkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streampkid().data(), this->streampkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.streamPkId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_pkId;
        break;
      }

      // optional string pkId = 17;
      case 17: {
        if (tag == 138) {
         parse_pkId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pkid().data(), this->pkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.JoinRoomByProtoRes.pkId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_gameState;
        break;
      }

      // optional int32 gameState = 18;
      case 18: {
        if (tag == 144) {
         parse_gameState:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamestate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.JoinRoomByProtoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.JoinRoomByProtoRes)
  return false;
#undef DO_
}

void JoinRoomByProtoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.JoinRoomByProtoRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // optional int32 banned = 2;
  if (this->banned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banned(), output);
  }

  // optional string playUrl = 3;
  if (this->playurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playurl().data(), this->playurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.playUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playurl(), output);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional string picture = 6;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.picture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->picture(), output);
  }

  // optional string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // optional string account = 8;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->account(), output);
  }

  // optional string userId = 9;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->userid(), output);
  }

  // optional int32 anchorGrade = 10;
  if (this->anchorgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->anchorgrade(), output);
  }

  // optional int32 needExperience = 11;
  if (this->needexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->needexperience(), output);
  }

  // optional int32 isAttention = 12;
  if (this->isattention() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->isattention(), output);
  }

  // optional int32 ranking = 13;
  if (this->ranking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ranking(), output);
  }

  // optional int32 oth = 14;
  if (this->oth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->oth(), output);
  }

  // optional string streamId = 15;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->streamid(), output);
  }

  // optional string streamPkId = 16;
  if (this->streampkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streampkid().data(), this->streampkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.streamPkId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->streampkid(), output);
  }

  // optional string pkId = 17;
  if (this->pkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkid().data(), this->pkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.pkId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->pkid(), output);
  }

  // optional int32 gameState = 18;
  if (this->gamestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->gamestate(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.JoinRoomByProtoRes)
}

::google::protobuf::uint8* JoinRoomByProtoRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.JoinRoomByProtoRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // optional int32 banned = 2;
  if (this->banned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banned(), target);
  }

  // optional string playUrl = 3;
  if (this->playurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playurl().data(), this->playurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.playUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playurl(), target);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional string picture = 6;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.picture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->picture(), target);
  }

  // optional string nickname = 7;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional string account = 8;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->account(), target);
  }

  // optional string userId = 9;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->userid(), target);
  }

  // optional int32 anchorGrade = 10;
  if (this->anchorgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->anchorgrade(), target);
  }

  // optional int32 needExperience = 11;
  if (this->needexperience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->needexperience(), target);
  }

  // optional int32 isAttention = 12;
  if (this->isattention() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->isattention(), target);
  }

  // optional int32 ranking = 13;
  if (this->ranking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ranking(), target);
  }

  // optional int32 oth = 14;
  if (this->oth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->oth(), target);
  }

  // optional string streamId = 15;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->streamid(), target);
  }

  // optional string streamPkId = 16;
  if (this->streampkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streampkid().data(), this->streampkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.streamPkId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->streampkid(), target);
  }

  // optional string pkId = 17;
  if (this->pkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkid().data(), this->pkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.JoinRoomByProtoRes.pkId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->pkid(), target);
  }

  // optional int32 gameState = 18;
  if (this->gamestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->gamestate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.JoinRoomByProtoRes)
  return target;
}

size_t JoinRoomByProtoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.JoinRoomByProtoRes)
  size_t total_size = 0;

  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  // optional int32 banned = 2;
  if (this->banned() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banned());
  }

  // optional string playUrl = 3;
  if (this->playurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playurl());
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // optional string picture = 6;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picture());
  }

  // optional string nickname = 7;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string account = 8;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string userId = 9;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 anchorGrade = 10;
  if (this->anchorgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anchorgrade());
  }

  // optional int32 needExperience = 11;
  if (this->needexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->needexperience());
  }

  // optional int32 isAttention = 12;
  if (this->isattention() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isattention());
  }

  // optional int32 ranking = 13;
  if (this->ranking() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ranking());
  }

  // optional int32 oth = 14;
  if (this->oth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->oth());
  }

  // optional string streamId = 15;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  // optional string streamPkId = 16;
  if (this->streampkid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streampkid());
  }

  // optional string pkId = 17;
  if (this->pkid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pkid());
  }

  // optional int32 gameState = 18;
  if (this->gamestate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomByProtoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.JoinRoomByProtoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JoinRoomByProtoRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomByProtoRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.JoinRoomByProtoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.JoinRoomByProtoRes)
    UnsafeMergeFrom(*source);
  }
}

void JoinRoomByProtoRes::MergeFrom(const JoinRoomByProtoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.JoinRoomByProtoRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JoinRoomByProtoRes::UnsafeMergeFrom(const JoinRoomByProtoRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_msg()) {
    mutable_msg()->::proto::ReturnMsg::MergeFrom(from.msg());
  }
  if (from.banned() != 0) {
    set_banned(from.banned());
  }
  if (from.playurl().size() > 0) {

    playurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playurl_);
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.picture().size() > 0) {

    picture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.anchorgrade() != 0) {
    set_anchorgrade(from.anchorgrade());
  }
  if (from.needexperience() != 0) {
    set_needexperience(from.needexperience());
  }
  if (from.isattention() != 0) {
    set_isattention(from.isattention());
  }
  if (from.ranking() != 0) {
    set_ranking(from.ranking());
  }
  if (from.oth() != 0) {
    set_oth(from.oth());
  }
  if (from.streamid().size() > 0) {

    streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
  }
  if (from.streampkid().size() > 0) {

    streampkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streampkid_);
  }
  if (from.pkid().size() > 0) {

    pkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkid_);
  }
  if (from.gamestate() != 0) {
    set_gamestate(from.gamestate());
  }
}

void JoinRoomByProtoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.JoinRoomByProtoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomByProtoRes::CopyFrom(const JoinRoomByProtoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.JoinRoomByProtoRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JoinRoomByProtoRes::IsInitialized() const {

  return true;
}

void JoinRoomByProtoRes::Swap(JoinRoomByProtoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomByProtoRes::InternalSwap(JoinRoomByProtoRes* other) {
  std::swap(msg_, other->msg_);
  std::swap(banned_, other->banned_);
  playurl_.Swap(&other->playurl_);
  roomname_.Swap(&other->roomname_);
  std::swap(count_, other->count_);
  picture_.Swap(&other->picture_);
  nickname_.Swap(&other->nickname_);
  account_.Swap(&other->account_);
  userid_.Swap(&other->userid_);
  std::swap(anchorgrade_, other->anchorgrade_);
  std::swap(needexperience_, other->needexperience_);
  std::swap(isattention_, other->isattention_);
  std::swap(ranking_, other->ranking_);
  std::swap(oth_, other->oth_);
  streamid_.Swap(&other->streamid_);
  streampkid_.Swap(&other->streampkid_);
  pkid_.Swap(&other->pkid_);
  std::swap(gamestate_, other->gamestate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomByProtoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomByProtoRes_descriptor_;
  metadata.reflection = JoinRoomByProtoRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomByProtoRes

// optional .proto.ReturnMsg msg = 1;
bool JoinRoomByProtoRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void JoinRoomByProtoRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::ReturnMsg& JoinRoomByProtoRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
::proto::ReturnMsg* JoinRoomByProtoRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.msg)
  return msg_;
}
::proto::ReturnMsg* JoinRoomByProtoRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void JoinRoomByProtoRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.msg)
}

// optional int32 banned = 2;
void JoinRoomByProtoRes::clear_banned() {
  banned_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::banned() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.banned)
  return banned_;
}
void JoinRoomByProtoRes::set_banned(::google::protobuf::int32 value) {
  
  banned_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.banned)
}

// optional string playUrl = 3;
void JoinRoomByProtoRes::clear_playurl() {
  playurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::playurl() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.playUrl)
  return playurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_playurl(const ::std::string& value) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.playUrl)
}
void JoinRoomByProtoRes::set_playurl(const char* value) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.playUrl)
}
void JoinRoomByProtoRes::set_playurl(const char* value, size_t size) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.playUrl)
}
::std::string* JoinRoomByProtoRes::mutable_playurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.playUrl)
  return playurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_playurl() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.playUrl)
  
  return playurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_playurl(::std::string* playurl) {
  if (playurl != NULL) {
    
  } else {
    
  }
  playurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playurl);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.playUrl)
}

// optional string roomName = 4;
void JoinRoomByProtoRes::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::roomname() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.roomName)
}
void JoinRoomByProtoRes::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.roomName)
}
void JoinRoomByProtoRes::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.roomName)
}
::std::string* JoinRoomByProtoRes::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_roomname() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.roomName)
}

// optional int32 count = 5;
void JoinRoomByProtoRes::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::count() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.count)
  return count_;
}
void JoinRoomByProtoRes::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.count)
}

// optional string picture = 6;
void JoinRoomByProtoRes::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::picture() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.picture)
}
void JoinRoomByProtoRes::set_picture(const char* value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.picture)
}
void JoinRoomByProtoRes::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.picture)
}
::std::string* JoinRoomByProtoRes::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_picture() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.picture)
}

// optional string nickname = 7;
void JoinRoomByProtoRes::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::nickname() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.nickname)
}
void JoinRoomByProtoRes::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.nickname)
}
void JoinRoomByProtoRes::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.nickname)
}
::std::string* JoinRoomByProtoRes::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.nickname)
}

// optional string account = 8;
void JoinRoomByProtoRes::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::account() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.account)
}
void JoinRoomByProtoRes::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.account)
}
void JoinRoomByProtoRes::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.account)
}
::std::string* JoinRoomByProtoRes::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_account() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.account)
}

// optional string userId = 9;
void JoinRoomByProtoRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::userid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.userId)
}
void JoinRoomByProtoRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.userId)
}
void JoinRoomByProtoRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.userId)
}
::std::string* JoinRoomByProtoRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_userid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.userId)
}

// optional int32 anchorGrade = 10;
void JoinRoomByProtoRes::clear_anchorgrade() {
  anchorgrade_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::anchorgrade() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.anchorGrade)
  return anchorgrade_;
}
void JoinRoomByProtoRes::set_anchorgrade(::google::protobuf::int32 value) {
  
  anchorgrade_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.anchorGrade)
}

// optional int32 needExperience = 11;
void JoinRoomByProtoRes::clear_needexperience() {
  needexperience_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::needexperience() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.needExperience)
  return needexperience_;
}
void JoinRoomByProtoRes::set_needexperience(::google::protobuf::int32 value) {
  
  needexperience_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.needExperience)
}

// optional int32 isAttention = 12;
void JoinRoomByProtoRes::clear_isattention() {
  isattention_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::isattention() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.isAttention)
  return isattention_;
}
void JoinRoomByProtoRes::set_isattention(::google::protobuf::int32 value) {
  
  isattention_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.isAttention)
}

// optional int32 ranking = 13;
void JoinRoomByProtoRes::clear_ranking() {
  ranking_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::ranking() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.ranking)
  return ranking_;
}
void JoinRoomByProtoRes::set_ranking(::google::protobuf::int32 value) {
  
  ranking_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.ranking)
}

// optional int32 oth = 14;
void JoinRoomByProtoRes::clear_oth() {
  oth_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::oth() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.oth)
  return oth_;
}
void JoinRoomByProtoRes::set_oth(::google::protobuf::int32 value) {
  
  oth_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.oth)
}

// optional string streamId = 15;
void JoinRoomByProtoRes::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::streamid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.streamId)
}
void JoinRoomByProtoRes::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.streamId)
}
void JoinRoomByProtoRes::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.streamId)
}
::std::string* JoinRoomByProtoRes::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.streamId)
}

// optional string streamPkId = 16;
void JoinRoomByProtoRes::clear_streampkid() {
  streampkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::streampkid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.streamPkId)
  return streampkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_streampkid(const ::std::string& value) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.streamPkId)
}
void JoinRoomByProtoRes::set_streampkid(const char* value) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.streamPkId)
}
void JoinRoomByProtoRes::set_streampkid(const char* value, size_t size) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.streamPkId)
}
::std::string* JoinRoomByProtoRes::mutable_streampkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.streamPkId)
  return streampkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_streampkid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.streamPkId)
  
  return streampkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_streampkid(::std::string* streampkid) {
  if (streampkid != NULL) {
    
  } else {
    
  }
  streampkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streampkid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.streamPkId)
}

// optional string pkId = 17;
void JoinRoomByProtoRes::clear_pkid() {
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JoinRoomByProtoRes::pkid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.pkId)
  return pkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_pkid(const ::std::string& value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.pkId)
}
void JoinRoomByProtoRes::set_pkid(const char* value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.pkId)
}
void JoinRoomByProtoRes::set_pkid(const char* value, size_t size) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.pkId)
}
::std::string* JoinRoomByProtoRes::mutable_pkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.pkId)
  return pkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JoinRoomByProtoRes::release_pkid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.pkId)
  
  return pkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JoinRoomByProtoRes::set_allocated_pkid(::std::string* pkid) {
  if (pkid != NULL) {
    
  } else {
    
  }
  pkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.pkId)
}

// optional int32 gameState = 18;
void JoinRoomByProtoRes::clear_gamestate() {
  gamestate_ = 0;
}
::google::protobuf::int32 JoinRoomByProtoRes::gamestate() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.gameState)
  return gamestate_;
}
void JoinRoomByProtoRes::set_gamestate(::google::protobuf::int32 value) {
  
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.gameState)
}

inline const JoinRoomByProtoRes* JoinRoomByProtoRes::internal_default_instance() {
  return &JoinRoomByProtoRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
