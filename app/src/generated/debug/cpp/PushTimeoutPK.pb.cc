// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushTimeoutPK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushTimeoutPK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* PushTimeoutPKMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushTimeoutPKMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushTimeoutPK_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushTimeoutPK_2eproto() {
  protobuf_AddDesc_PushTimeoutPK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushTimeoutPK.proto");
  GOOGLE_CHECK(file != NULL);
  PushTimeoutPKMessage_descriptor_ = file->message_type(0);
  static const int PushTimeoutPKMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTimeoutPKMessage, userid_),
  };
  PushTimeoutPKMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushTimeoutPKMessage_descriptor_,
      PushTimeoutPKMessage::internal_default_instance(),
      PushTimeoutPKMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PushTimeoutPKMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTimeoutPKMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushTimeoutPK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushTimeoutPKMessage_descriptor_, PushTimeoutPKMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushTimeoutPK_2eproto() {
  PushTimeoutPKMessage_default_instance_.Shutdown();
  delete PushTimeoutPKMessage_reflection_;
}

void protobuf_InitDefaults_PushTimeoutPK_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  PushTimeoutPKMessage_default_instance_.DefaultConstruct();
  PushTimeoutPKMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushTimeoutPK_2eproto_once_);
void protobuf_InitDefaults_PushTimeoutPK_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushTimeoutPK_2eproto_once_,
                 &protobuf_InitDefaults_PushTimeoutPK_2eproto_impl);
}
void protobuf_AddDesc_PushTimeoutPK_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushTimeoutPK_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PushTimeoutPK.proto\022\005proto\032\014Entity.pro"
    "to\"&\n\024PushTimeoutPKMessage\022\016\n\006userId\030\001 \001"
    "(\tB \n\036com.sencorsta.ids.common.protob\006pr"
    "oto3", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushTimeoutPK.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushTimeoutPK_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushTimeoutPK_2eproto_once_);
void protobuf_AddDesc_PushTimeoutPK_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushTimeoutPK_2eproto_once_,
                 &protobuf_AddDesc_PushTimeoutPK_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushTimeoutPK_2eproto {
  StaticDescriptorInitializer_PushTimeoutPK_2eproto() {
    protobuf_AddDesc_PushTimeoutPK_2eproto();
  }
} static_descriptor_initializer_PushTimeoutPK_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushTimeoutPKMessage::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushTimeoutPKMessage::PushTimeoutPKMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushTimeoutPK_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PushTimeoutPKMessage)
}

void PushTimeoutPKMessage::InitAsDefaultInstance() {
}

PushTimeoutPKMessage::PushTimeoutPKMessage(const PushTimeoutPKMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PushTimeoutPKMessage)
}

void PushTimeoutPKMessage::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PushTimeoutPKMessage::~PushTimeoutPKMessage() {
  // @@protoc_insertion_point(destructor:proto.PushTimeoutPKMessage)
  SharedDtor();
}

void PushTimeoutPKMessage::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushTimeoutPKMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushTimeoutPKMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushTimeoutPKMessage_descriptor_;
}

const PushTimeoutPKMessage& PushTimeoutPKMessage::default_instance() {
  protobuf_InitDefaults_PushTimeoutPK_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PushTimeoutPKMessage> PushTimeoutPKMessage_default_instance_;

PushTimeoutPKMessage* PushTimeoutPKMessage::New(::google::protobuf::Arena* arena) const {
  PushTimeoutPKMessage* n = new PushTimeoutPKMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushTimeoutPKMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PushTimeoutPKMessage)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PushTimeoutPKMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PushTimeoutPKMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.PushTimeoutPKMessage.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PushTimeoutPKMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PushTimeoutPKMessage)
  return false;
#undef DO_
}

void PushTimeoutPKMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PushTimeoutPKMessage)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushTimeoutPKMessage.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PushTimeoutPKMessage)
}

::google::protobuf::uint8* PushTimeoutPKMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PushTimeoutPKMessage)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.PushTimeoutPKMessage.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.PushTimeoutPKMessage)
  return target;
}

size_t PushTimeoutPKMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PushTimeoutPKMessage)
  size_t total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushTimeoutPKMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PushTimeoutPKMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PushTimeoutPKMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushTimeoutPKMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PushTimeoutPKMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PushTimeoutPKMessage)
    UnsafeMergeFrom(*source);
  }
}

void PushTimeoutPKMessage::MergeFrom(const PushTimeoutPKMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PushTimeoutPKMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PushTimeoutPKMessage::UnsafeMergeFrom(const PushTimeoutPKMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PushTimeoutPKMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PushTimeoutPKMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushTimeoutPKMessage::CopyFrom(const PushTimeoutPKMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PushTimeoutPKMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PushTimeoutPKMessage::IsInitialized() const {

  return true;
}

void PushTimeoutPKMessage::Swap(PushTimeoutPKMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushTimeoutPKMessage::InternalSwap(PushTimeoutPKMessage* other) {
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushTimeoutPKMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushTimeoutPKMessage_descriptor_;
  metadata.reflection = PushTimeoutPKMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushTimeoutPKMessage

// optional string userId = 1;
void PushTimeoutPKMessage::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushTimeoutPKMessage::userid() const {
  // @@protoc_insertion_point(field_get:proto.PushTimeoutPKMessage.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushTimeoutPKMessage::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushTimeoutPKMessage.userId)
}
void PushTimeoutPKMessage::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushTimeoutPKMessage.userId)
}
void PushTimeoutPKMessage::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushTimeoutPKMessage.userId)
}
::std::string* PushTimeoutPKMessage::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushTimeoutPKMessage.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushTimeoutPKMessage::release_userid() {
  // @@protoc_insertion_point(field_release:proto.PushTimeoutPKMessage.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushTimeoutPKMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.PushTimeoutPKMessage.userId)
}

inline const PushTimeoutPKMessage* PushTimeoutPKMessage::internal_default_instance() {
  return &PushTimeoutPKMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
