// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushStreamPKByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushStreamPKByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* pushPKStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pushPKStream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushStreamPKByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushStreamPKByProto_2eproto() {
  protobuf_AddDesc_PushStreamPKByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushStreamPKByProto.proto");
  GOOGLE_CHECK(file != NULL);
  pushPKStream_descriptor_ = file->message_type(0);
  static const int pushPKStream_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, taganchorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, anchorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, mergestreamurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, pkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, tagroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, tagstreamid_),
  };
  pushPKStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pushPKStream_descriptor_,
      pushPKStream::internal_default_instance(),
      pushPKStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(pushPKStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushPKStream, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushStreamPKByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pushPKStream_descriptor_, pushPKStream::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushStreamPKByProto_2eproto() {
  pushPKStream_default_instance_.Shutdown();
  delete pushPKStream_reflection_;
}

void protobuf_InitDefaults_PushStreamPKByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  pushPKStream_default_instance_.DefaultConstruct();
  pushPKStream_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushStreamPKByProto_2eproto_once_);
void protobuf_InitDefaults_PushStreamPKByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushStreamPKByProto_2eproto_once_,
                 &protobuf_InitDefaults_PushStreamPKByProto_2eproto_impl);
}
void protobuf_AddDesc_PushStreamPKByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushStreamPKByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031PushStreamPKByProto.proto\022\005proto\032\014Enti"
    "ty.proto\"\203\001\n\014pushPKStream\022\023\n\013tagAnchorId"
    "\030\001 \001(\t\022\020\n\010anchorId\030\002 \001(\t\022\026\n\016mergeStreamU"
    "rl\030\003 \001(\t\022\014\n\004PKId\030\004 \001(\t\022\021\n\ttagRoomId\030\005 \001("
    "\t\022\023\n\013tagStreamId\030\006 \001(\tB \n\036com.sencorsta."
    "ids.common.protob\006proto3", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushStreamPKByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushStreamPKByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushStreamPKByProto_2eproto_once_);
void protobuf_AddDesc_PushStreamPKByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushStreamPKByProto_2eproto_once_,
                 &protobuf_AddDesc_PushStreamPKByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushStreamPKByProto_2eproto {
  StaticDescriptorInitializer_PushStreamPKByProto_2eproto() {
    protobuf_AddDesc_PushStreamPKByProto_2eproto();
  }
} static_descriptor_initializer_PushStreamPKByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pushPKStream::kTagAnchorIdFieldNumber;
const int pushPKStream::kAnchorIdFieldNumber;
const int pushPKStream::kMergeStreamUrlFieldNumber;
const int pushPKStream::kPKIdFieldNumber;
const int pushPKStream::kTagRoomIdFieldNumber;
const int pushPKStream::kTagStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pushPKStream::pushPKStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushStreamPKByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.pushPKStream)
}

void pushPKStream::InitAsDefaultInstance() {
}

pushPKStream::pushPKStream(const pushPKStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.pushPKStream)
}

void pushPKStream::SharedCtor() {
  taganchorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagroomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagstreamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

pushPKStream::~pushPKStream() {
  // @@protoc_insertion_point(destructor:proto.pushPKStream)
  SharedDtor();
}

void pushPKStream::SharedDtor() {
  taganchorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagroomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagstreamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pushPKStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pushPKStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pushPKStream_descriptor_;
}

const pushPKStream& pushPKStream::default_instance() {
  protobuf_InitDefaults_PushStreamPKByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<pushPKStream> pushPKStream_default_instance_;

pushPKStream* pushPKStream::New(::google::protobuf::Arena* arena) const {
  pushPKStream* n = new pushPKStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pushPKStream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.pushPKStream)
  taganchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagstreamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pushPKStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.pushPKStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tagAnchorId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taganchorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taganchorid().data(), this->taganchorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.tagAnchorId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_anchorId;
        break;
      }

      // optional string anchorId = 2;
      case 2: {
        if (tag == 18) {
         parse_anchorId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->anchorid().data(), this->anchorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.anchorId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mergeStreamUrl;
        break;
      }

      // optional string mergeStreamUrl = 3;
      case 3: {
        if (tag == 26) {
         parse_mergeStreamUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mergestreamurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mergestreamurl().data(), this->mergestreamurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.mergeStreamUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PKId;
        break;
      }

      // optional string PKId = 4;
      case 4: {
        if (tag == 34) {
         parse_PKId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pkid().data(), this->pkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.PKId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tagRoomId;
        break;
      }

      // optional string tagRoomId = 5;
      case 5: {
        if (tag == 42) {
         parse_tagRoomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagroomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tagroomid().data(), this->tagroomid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.tagRoomId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tagStreamId;
        break;
      }

      // optional string tagStreamId = 6;
      case 6: {
        if (tag == 50) {
         parse_tagStreamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagstreamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tagstreamid().data(), this->tagstreamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushPKStream.tagStreamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.pushPKStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.pushPKStream)
  return false;
#undef DO_
}

void pushPKStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.pushPKStream)
  // optional string tagAnchorId = 1;
  if (this->taganchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taganchorid().data(), this->taganchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagAnchorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taganchorid(), output);
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), this->anchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.anchorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->anchorid(), output);
  }

  // optional string mergeStreamUrl = 3;
  if (this->mergestreamurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mergestreamurl().data(), this->mergestreamurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.mergeStreamUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mergestreamurl(), output);
  }

  // optional string PKId = 4;
  if (this->pkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkid().data(), this->pkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.PKId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pkid(), output);
  }

  // optional string tagRoomId = 5;
  if (this->tagroomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tagroomid().data(), this->tagroomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagRoomId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tagroomid(), output);
  }

  // optional string tagStreamId = 6;
  if (this->tagstreamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tagstreamid().data(), this->tagstreamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagStreamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tagstreamid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.pushPKStream)
}

::google::protobuf::uint8* pushPKStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.pushPKStream)
  // optional string tagAnchorId = 1;
  if (this->taganchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taganchorid().data(), this->taganchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagAnchorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taganchorid(), target);
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anchorid().data(), this->anchorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.anchorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->anchorid(), target);
  }

  // optional string mergeStreamUrl = 3;
  if (this->mergestreamurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mergestreamurl().data(), this->mergestreamurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.mergeStreamUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mergestreamurl(), target);
  }

  // optional string PKId = 4;
  if (this->pkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkid().data(), this->pkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.PKId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pkid(), target);
  }

  // optional string tagRoomId = 5;
  if (this->tagroomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tagroomid().data(), this->tagroomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagRoomId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tagroomid(), target);
  }

  // optional string tagStreamId = 6;
  if (this->tagstreamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tagstreamid().data(), this->tagstreamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushPKStream.tagStreamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tagstreamid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.pushPKStream)
  return target;
}

size_t pushPKStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.pushPKStream)
  size_t total_size = 0;

  // optional string tagAnchorId = 1;
  if (this->taganchorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taganchorid());
  }

  // optional string anchorId = 2;
  if (this->anchorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->anchorid());
  }

  // optional string mergeStreamUrl = 3;
  if (this->mergestreamurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mergestreamurl());
  }

  // optional string PKId = 4;
  if (this->pkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pkid());
  }

  // optional string tagRoomId = 5;
  if (this->tagroomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tagroomid());
  }

  // optional string tagStreamId = 6;
  if (this->tagstreamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tagstreamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pushPKStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.pushPKStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pushPKStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pushPKStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.pushPKStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.pushPKStream)
    UnsafeMergeFrom(*source);
  }
}

void pushPKStream::MergeFrom(const pushPKStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.pushPKStream)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void pushPKStream::UnsafeMergeFrom(const pushPKStream& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taganchorid().size() > 0) {

    taganchorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taganchorid_);
  }
  if (from.anchorid().size() > 0) {

    anchorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anchorid_);
  }
  if (from.mergestreamurl().size() > 0) {

    mergestreamurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mergestreamurl_);
  }
  if (from.pkid().size() > 0) {

    pkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkid_);
  }
  if (from.tagroomid().size() > 0) {

    tagroomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagroomid_);
  }
  if (from.tagstreamid().size() > 0) {

    tagstreamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagstreamid_);
  }
}

void pushPKStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.pushPKStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pushPKStream::CopyFrom(const pushPKStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.pushPKStream)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool pushPKStream::IsInitialized() const {

  return true;
}

void pushPKStream::Swap(pushPKStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pushPKStream::InternalSwap(pushPKStream* other) {
  taganchorid_.Swap(&other->taganchorid_);
  anchorid_.Swap(&other->anchorid_);
  mergestreamurl_.Swap(&other->mergestreamurl_);
  pkid_.Swap(&other->pkid_);
  tagroomid_.Swap(&other->tagroomid_);
  tagstreamid_.Swap(&other->tagstreamid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pushPKStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pushPKStream_descriptor_;
  metadata.reflection = pushPKStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pushPKStream

// optional string tagAnchorId = 1;
void pushPKStream::clear_taganchorid() {
  taganchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::taganchorid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagAnchorId)
  return taganchorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_taganchorid(const ::std::string& value) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagAnchorId)
}
void pushPKStream::set_taganchorid(const char* value) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagAnchorId)
}
void pushPKStream::set_taganchorid(const char* value, size_t size) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagAnchorId)
}
::std::string* pushPKStream::mutable_taganchorid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagAnchorId)
  return taganchorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_taganchorid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagAnchorId)
  
  return taganchorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_taganchorid(::std::string* taganchorid) {
  if (taganchorid != NULL) {
    
  } else {
    
  }
  taganchorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taganchorid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagAnchorId)
}

// optional string anchorId = 2;
void pushPKStream::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::anchorid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.anchorId)
  return anchorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_anchorid(const ::std::string& value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.anchorId)
}
void pushPKStream::set_anchorid(const char* value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.anchorId)
}
void pushPKStream::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.anchorId)
}
::std::string* pushPKStream::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.anchorId)
  return anchorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_anchorid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.anchorId)
  
  return anchorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_anchorid(::std::string* anchorid) {
  if (anchorid != NULL) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.anchorId)
}

// optional string mergeStreamUrl = 3;
void pushPKStream::clear_mergestreamurl() {
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::mergestreamurl() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.mergeStreamUrl)
  return mergestreamurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_mergestreamurl(const ::std::string& value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.mergeStreamUrl)
}
void pushPKStream::set_mergestreamurl(const char* value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.mergeStreamUrl)
}
void pushPKStream::set_mergestreamurl(const char* value, size_t size) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.mergeStreamUrl)
}
::std::string* pushPKStream::mutable_mergestreamurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.mergeStreamUrl)
  return mergestreamurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_mergestreamurl() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.mergeStreamUrl)
  
  return mergestreamurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_mergestreamurl(::std::string* mergestreamurl) {
  if (mergestreamurl != NULL) {
    
  } else {
    
  }
  mergestreamurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mergestreamurl);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.mergeStreamUrl)
}

// optional string PKId = 4;
void pushPKStream::clear_pkid() {
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::pkid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.PKId)
  return pkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_pkid(const ::std::string& value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.PKId)
}
void pushPKStream::set_pkid(const char* value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.PKId)
}
void pushPKStream::set_pkid(const char* value, size_t size) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.PKId)
}
::std::string* pushPKStream::mutable_pkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.PKId)
  return pkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_pkid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.PKId)
  
  return pkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_pkid(::std::string* pkid) {
  if (pkid != NULL) {
    
  } else {
    
  }
  pkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.PKId)
}

// optional string tagRoomId = 5;
void pushPKStream::clear_tagroomid() {
  tagroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::tagroomid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagRoomId)
  return tagroomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_tagroomid(const ::std::string& value) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagRoomId)
}
void pushPKStream::set_tagroomid(const char* value) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagRoomId)
}
void pushPKStream::set_tagroomid(const char* value, size_t size) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagRoomId)
}
::std::string* pushPKStream::mutable_tagroomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagRoomId)
  return tagroomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_tagroomid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagRoomId)
  
  return tagroomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_tagroomid(::std::string* tagroomid) {
  if (tagroomid != NULL) {
    
  } else {
    
  }
  tagroomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagroomid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagRoomId)
}

// optional string tagStreamId = 6;
void pushPKStream::clear_tagstreamid() {
  tagstreamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushPKStream::tagstreamid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagStreamId)
  return tagstreamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_tagstreamid(const ::std::string& value) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagStreamId)
}
void pushPKStream::set_tagstreamid(const char* value) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagStreamId)
}
void pushPKStream::set_tagstreamid(const char* value, size_t size) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagStreamId)
}
::std::string* pushPKStream::mutable_tagstreamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagStreamId)
  return tagstreamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushPKStream::release_tagstreamid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagStreamId)
  
  return tagstreamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushPKStream::set_allocated_tagstreamid(::std::string* tagstreamid) {
  if (tagstreamid != NULL) {
    
  } else {
    
  }
  tagstreamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagstreamid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagStreamId)
}

inline const pushPKStream* pushPKStream::internal_default_instance() {
  return &pushPKStream_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
