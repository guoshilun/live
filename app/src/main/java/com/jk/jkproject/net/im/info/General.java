// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: general.proto

package com.jk.jkproject.net.im.info;

public final class General {
  private General() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EPhoneType}
   */
  public enum EPhoneType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EPT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    EPT_UNKNOWN(0, 0),
    /**
     * <code>EPT_ANDROID = 1;</code>
     *
     * <pre>
     *&#47; 安卓
     * </pre>
     */
    EPT_ANDROID(1, 1),
    /**
     * <code>EPT_IOS = 2;</code>
     *
     * <pre>
     *&#47; 苹果
     * </pre>
     */
    EPT_IOS(2, 2),
    ;

    /**
     * <code>EPT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int EPT_UNKNOWN_VALUE = 0;
    /**
     * <code>EPT_ANDROID = 1;</code>
     *
     * <pre>
     *&#47; 安卓
     * </pre>
     */
    public static final int EPT_ANDROID_VALUE = 1;
    /**
     * <code>EPT_IOS = 2;</code>
     *
     * <pre>
     *&#47; 苹果
     * </pre>
     */
    public static final int EPT_IOS_VALUE = 2;


    public final int getNumber() { return value; }

    public static EPhoneType valueOf(int value) {
      switch (value) {
        case 0: return EPT_UNKNOWN;
        case 1: return EPT_ANDROID;
        case 2: return EPT_IOS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EPhoneType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EPhoneType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EPhoneType>() {
            public EPhoneType findValueByNumber(int number) {
              return EPhoneType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(0);
    }

    private static final EPhoneType[] VALUES = values();

    public static EPhoneType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EPhoneType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EPhoneType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EEncryptionType}
   */
  public enum EEncryptionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EENCRYPT_UNKNOWN = 0;</code>
     *
     * <pre>
     *未知
     * </pre>
     */
    EENCRYPT_UNKNOWN(0, 0),
    /**
     * <code>EENCRYPT_NONE = 1;</code>
     *
     * <pre>
     *无加密
     * </pre>
     */
    EENCRYPT_NONE(1, 1),
    /**
     * <code>EENCRYPT_AES = 2;</code>
     *
     * <pre>
     *AES加密
     * </pre>
     */
    EENCRYPT_AES(2, 2),
    ;

    /**
     * <code>EENCRYPT_UNKNOWN = 0;</code>
     *
     * <pre>
     *未知
     * </pre>
     */
    public static final int EENCRYPT_UNKNOWN_VALUE = 0;
    /**
     * <code>EENCRYPT_NONE = 1;</code>
     *
     * <pre>
     *无加密
     * </pre>
     */
    public static final int EENCRYPT_NONE_VALUE = 1;
    /**
     * <code>EENCRYPT_AES = 2;</code>
     *
     * <pre>
     *AES加密
     * </pre>
     */
    public static final int EENCRYPT_AES_VALUE = 2;


    public final int getNumber() { return value; }

    public static EEncryptionType valueOf(int value) {
      switch (value) {
        case 0: return EENCRYPT_UNKNOWN;
        case 1: return EENCRYPT_NONE;
        case 2: return EENCRYPT_AES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EEncryptionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EEncryptionType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EEncryptionType>() {
            public EEncryptionType findValueByNumber(int number) {
              return EEncryptionType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(1);
    }

    private static final EEncryptionType[] VALUES = values();

    public static EEncryptionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EEncryptionType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EEncryptionType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EResType}
   */
  public enum EResType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ERT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    ERT_UNKNOWN(0, 0),
    /**
     * <code>ERT_SUCCESS = 1;</code>
     *
     * <pre>
     *&#47; 成功
     * </pre>
     */
    ERT_SUCCESS(1, 1),
    /**
     * <code>ERT_FAIL = 2;</code>
     *
     * <pre>
     *&#47; 失败
     * </pre>
     */
    ERT_FAIL(2, 2),
    /**
     * <code>ERT_NOAUTH = 3;</code>
     *
     * <pre>
     *&#47; 无权限
     * </pre>
     */
    ERT_NOAUTH(3, 3),
    /**
     * <code>ERT_VER_LOW = 4;</code>
     *
     * <pre>
     *&#47; 客户端版本过低 
     * </pre>
     */
    ERT_VER_LOW(4, 4),
    /**
     * <code>ERT_VER_ERR = 5;</code>
     *
     * <pre>
     *&#47; 客户端版本错误
     * </pre>
     */
    ERT_VER_ERR(5, 5),
    /**
     * <code>ERT_ENCRYPT_ERR = 6;</code>
     *
     * <pre>
     *&#47; 加密错误
     * </pre>
     */
    ERT_ENCRYPT_ERR(6, 6),
    /**
     * <code>ERT_ARG = 7;</code>
     *
     * <pre>
     *&#47; 参数错误
     * </pre>
     */
    ERT_ARG(7, 7),
    /**
     * <code>ERT_PRIVILEGE = 100;</code>
     *
     * <pre>
     *&#47; 权限错误
     * </pre>
     */
    ERT_PRIVILEGE(8, 100),
    /**
     * <code>ERT_MAXIMUM = 101;</code>
     *
     * <pre>
     *&#47; 达到上限
     * </pre>
     */
    ERT_MAXIMUM(9, 101),
    /**
     * <code>ERT_REPEAT = 102;</code>
     *
     * <pre>
     *&#47; 重复的请求
     * </pre>
     */
    ERT_REPEAT(10, 102),
    /**
     * <code>ERT_NOT_FOUND = 103;</code>
     *
     * <pre>
     *&#47; 为未找到/没有发现
     * </pre>
     */
    ERT_NOT_FOUND(11, 103),
    /**
     * <code>ERT_HAS_BEEN = 104;</code>
     *
     * <pre>
     *&#47; 已经是
     * </pre>
     */
    ERT_HAS_BEEN(12, 104),
    /**
     * <code>ERT_SENSITIVE_WORD = 105;</code>
     *
     * <pre>
     *&#47; 敏感字d
     * </pre>
     */
    ERT_SENSITIVE_WORD(13, 105),
    /**
     * <code>ERT_PARSE_PROTOBUF = 106;</code>
     *
     * <pre>
     *&#47; parse protobuf fail
     * </pre>
     */
    ERT_PARSE_PROTOBUF(14, 106),
    /**
     * <code>ERT_DAILY_NEW_CHAT_MAXIMUM = 107;</code>
     *
     * <pre>
     *&#47; 用户每日新聊天上限
     * </pre>
     */
    ERT_DAILY_NEW_CHAT_MAXIMUM(15, 107),
    ;

    /**
     * <code>ERT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int ERT_UNKNOWN_VALUE = 0;
    /**
     * <code>ERT_SUCCESS = 1;</code>
     *
     * <pre>
     *&#47; 成功
     * </pre>
     */
    public static final int ERT_SUCCESS_VALUE = 1;
    /**
     * <code>ERT_FAIL = 2;</code>
     *
     * <pre>
     *&#47; 失败
     * </pre>
     */
    public static final int ERT_FAIL_VALUE = 2;
    /**
     * <code>ERT_NOAUTH = 3;</code>
     *
     * <pre>
     *&#47; 无权限
     * </pre>
     */
    public static final int ERT_NOAUTH_VALUE = 3;
    /**
     * <code>ERT_VER_LOW = 4;</code>
     *
     * <pre>
     *&#47; 客户端版本过低 
     * </pre>
     */
    public static final int ERT_VER_LOW_VALUE = 4;
    /**
     * <code>ERT_VER_ERR = 5;</code>
     *
     * <pre>
     *&#47; 客户端版本错误
     * </pre>
     */
    public static final int ERT_VER_ERR_VALUE = 5;
    /**
     * <code>ERT_ENCRYPT_ERR = 6;</code>
     *
     * <pre>
     *&#47; 加密错误
     * </pre>
     */
    public static final int ERT_ENCRYPT_ERR_VALUE = 6;
    /**
     * <code>ERT_ARG = 7;</code>
     *
     * <pre>
     *&#47; 参数错误
     * </pre>
     */
    public static final int ERT_ARG_VALUE = 7;
    /**
     * <code>ERT_PRIVILEGE = 100;</code>
     *
     * <pre>
     *&#47; 权限错误
     * </pre>
     */
    public static final int ERT_PRIVILEGE_VALUE = 100;
    /**
     * <code>ERT_MAXIMUM = 101;</code>
     *
     * <pre>
     *&#47; 达到上限
     * </pre>
     */
    public static final int ERT_MAXIMUM_VALUE = 101;
    /**
     * <code>ERT_REPEAT = 102;</code>
     *
     * <pre>
     *&#47; 重复的请求
     * </pre>
     */
    public static final int ERT_REPEAT_VALUE = 102;
    /**
     * <code>ERT_NOT_FOUND = 103;</code>
     *
     * <pre>
     *&#47; 为未找到/没有发现
     * </pre>
     */
    public static final int ERT_NOT_FOUND_VALUE = 103;
    /**
     * <code>ERT_HAS_BEEN = 104;</code>
     *
     * <pre>
     *&#47; 已经是
     * </pre>
     */
    public static final int ERT_HAS_BEEN_VALUE = 104;
    /**
     * <code>ERT_SENSITIVE_WORD = 105;</code>
     *
     * <pre>
     *&#47; 敏感字d
     * </pre>
     */
    public static final int ERT_SENSITIVE_WORD_VALUE = 105;
    /**
     * <code>ERT_PARSE_PROTOBUF = 106;</code>
     *
     * <pre>
     *&#47; parse protobuf fail
     * </pre>
     */
    public static final int ERT_PARSE_PROTOBUF_VALUE = 106;
    /**
     * <code>ERT_DAILY_NEW_CHAT_MAXIMUM = 107;</code>
     *
     * <pre>
     *&#47; 用户每日新聊天上限
     * </pre>
     */
    public static final int ERT_DAILY_NEW_CHAT_MAXIMUM_VALUE = 107;


    public final int getNumber() { return value; }

    public static EResType valueOf(int value) {
      switch (value) {
        case 0: return ERT_UNKNOWN;
        case 1: return ERT_SUCCESS;
        case 2: return ERT_FAIL;
        case 3: return ERT_NOAUTH;
        case 4: return ERT_VER_LOW;
        case 5: return ERT_VER_ERR;
        case 6: return ERT_ENCRYPT_ERR;
        case 7: return ERT_ARG;
        case 100: return ERT_PRIVILEGE;
        case 101: return ERT_MAXIMUM;
        case 102: return ERT_REPEAT;
        case 103: return ERT_NOT_FOUND;
        case 104: return ERT_HAS_BEEN;
        case 105: return ERT_SENSITIVE_WORD;
        case 106: return ERT_PARSE_PROTOBUF;
        case 107: return ERT_DAILY_NEW_CHAT_MAXIMUM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EResType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EResType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EResType>() {
            public EResType findValueByNumber(int number) {
              return EResType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(2);
    }

    private static final EResType[] VALUES = values();

    public static EResType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EResType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EResType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EErrorType}
   */
  public enum EErrorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EET_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    EET_UNKNOWN(0, 0),
    /**
     * <code>EET_USERERROR = 1;</code>
     *
     * <pre>
     *&#47; 用户ID错误
     * </pre>
     */
    EET_USERERROR(1, 1),
    /**
     * <code>EET_BUFERROR = 2;</code>
     *
     * <pre>
     *&#47; 数据错误
     * </pre>
     */
    EET_BUFERROR(2, 2),
    /**
     * <code>EET_SYSTEMERROR = 3;</code>
     *
     * <pre>
     *&#47; 系统故障
     * </pre>
     */
    EET_SYSTEMERROR(3, 3),
    ;

    /**
     * <code>EET_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int EET_UNKNOWN_VALUE = 0;
    /**
     * <code>EET_USERERROR = 1;</code>
     *
     * <pre>
     *&#47; 用户ID错误
     * </pre>
     */
    public static final int EET_USERERROR_VALUE = 1;
    /**
     * <code>EET_BUFERROR = 2;</code>
     *
     * <pre>
     *&#47; 数据错误
     * </pre>
     */
    public static final int EET_BUFERROR_VALUE = 2;
    /**
     * <code>EET_SYSTEMERROR = 3;</code>
     *
     * <pre>
     *&#47; 系统故障
     * </pre>
     */
    public static final int EET_SYSTEMERROR_VALUE = 3;


    public final int getNumber() { return value; }

    public static EErrorType valueOf(int value) {
      switch (value) {
        case 0: return EET_UNKNOWN;
        case 1: return EET_USERERROR;
        case 2: return EET_BUFERROR;
        case 3: return EET_SYSTEMERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EErrorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EErrorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EErrorType>() {
            public EErrorType findValueByNumber(int number) {
              return EErrorType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(3);
    }

    private static final EErrorType[] VALUES = values();

    public static EErrorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EErrorType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EErrorType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.ETextType}
   */
  public enum ETextType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ETT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    ETT_UNKNOWN(0, 0),
    /**
     * <code>ETT_TEXT = 1;</code>
     *
     * <pre>
     *&#47; 文本
     * </pre>
     */
    ETT_TEXT(1, 1),
    /**
     * <code>ETT_IMAGE = 2;</code>
     *
     * <pre>
     *&#47; 图片
     * </pre>
     */
    ETT_IMAGE(2, 2),
    /**
     * <code>ETT_TIETU = 3;</code>
     *
     * <pre>
     *&#47; 贴图
     * </pre>
     */
    ETT_TIETU(3, 3),
    /**
     * <code>ETT_YUYIN = 4;</code>
     *
     * <pre>
     *&#47; 语音
     * </pre>
     */
    ETT_YUYIN(4, 4),
    /**
     * <code>ETT_DITU = 5;</code>
     *
     * <pre>
     *&#47; 地图
     * </pre>
     */
    ETT_DITU(5, 5),
    /**
     * <code>ETT_GIFT = 6;</code>
     *
     * <pre>
     *&#47; 礼物
     * </pre>
     */
    ETT_GIFT(6, 6),
    /**
     * <code>ETT_COMPOUND = 100;</code>
     *
     * <pre>
     *&#47; 复合类型，由以上多种类型组合，至于具体有哪几种类型，由客户端在消息内容中自定义
     * </pre>
     */
    ETT_COMPOUND(7, 100),
    ;

    /**
     * <code>ETT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int ETT_UNKNOWN_VALUE = 0;
    /**
     * <code>ETT_TEXT = 1;</code>
     *
     * <pre>
     *&#47; 文本
     * </pre>
     */
    public static final int ETT_TEXT_VALUE = 1;
    /**
     * <code>ETT_IMAGE = 2;</code>
     *
     * <pre>
     *&#47; 图片
     * </pre>
     */
    public static final int ETT_IMAGE_VALUE = 2;
    /**
     * <code>ETT_TIETU = 3;</code>
     *
     * <pre>
     *&#47; 贴图
     * </pre>
     */
    public static final int ETT_TIETU_VALUE = 3;
    /**
     * <code>ETT_YUYIN = 4;</code>
     *
     * <pre>
     *&#47; 语音
     * </pre>
     */
    public static final int ETT_YUYIN_VALUE = 4;
    /**
     * <code>ETT_DITU = 5;</code>
     *
     * <pre>
     *&#47; 地图
     * </pre>
     */
    public static final int ETT_DITU_VALUE = 5;
    /**
     * <code>ETT_GIFT = 6;</code>
     *
     * <pre>
     *&#47; 礼物
     * </pre>
     */
    public static final int ETT_GIFT_VALUE = 6;
    /**
     * <code>ETT_COMPOUND = 100;</code>
     *
     * <pre>
     *&#47; 复合类型，由以上多种类型组合，至于具体有哪几种类型，由客户端在消息内容中自定义
     * </pre>
     */
    public static final int ETT_COMPOUND_VALUE = 100;


    public final int getNumber() { return value; }

    public static ETextType valueOf(int value) {
      switch (value) {
        case 0: return ETT_UNKNOWN;
        case 1: return ETT_TEXT;
        case 2: return ETT_IMAGE;
        case 3: return ETT_TIETU;
        case 4: return ETT_YUYIN;
        case 5: return ETT_DITU;
        case 6: return ETT_GIFT;
        case 100: return ETT_COMPOUND;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ETextType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ETextType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ETextType>() {
            public ETextType findValueByNumber(int number) {
              return ETextType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(4);
    }

    private static final ETextType[] VALUES = values();

    public static ETextType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ETextType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.ETextType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EChatType}
   */
  public enum EChatType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ECT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    ECT_UNKNOWN(0, 0),
    /**
     * <code>ECT_NORMAL = 1;</code>
     *
     * <pre>
     *&#47; 正常聊天
     * </pre>
     */
    ECT_NORMAL(1, 1),
    /**
     * <code>ECT_SYSTEM = 2;</code>
     *
     * <pre>
     *&#47; 系统聊天
     * </pre>
     */
    ECT_SYSTEM(2, 2),
    /**
     * <code>ECT_READSTATE = 3;</code>
     *
     * <pre>
     *&#47; 聊天消息已读状态设置
     * </pre>
     */
    ECT_READSTATE(3, 3),
    /**
     * <code>ECT_PRODUCT = 4;</code>
     *
     * <pre>
     *&#47; 产品消息
     * </pre>
     */
    ECT_PRODUCT(4, 4),
    /**
     * <code>ECT_GROUP = 5;</code>
     *
     * <pre>
     *&#47; 群聊
     * </pre>
     */
    ECT_GROUP(5, 5),
    /**
     * <code>ECT_SNAP = 6;</code>
     *
     * <pre>
     *&#47; 瞬间(阅后即焚)
     * </pre>
     */
    ECT_SNAP(6, 6),
    /**
     * <code>ECT_OPENSTATE = 7;</code>
     *
     * <pre>
     *&#47; 聊天消息打开状态设置
     * </pre>
     */
    ECT_OPENSTATE(7, 7),
    ;

    /**
     * <code>ECT_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int ECT_UNKNOWN_VALUE = 0;
    /**
     * <code>ECT_NORMAL = 1;</code>
     *
     * <pre>
     *&#47; 正常聊天
     * </pre>
     */
    public static final int ECT_NORMAL_VALUE = 1;
    /**
     * <code>ECT_SYSTEM = 2;</code>
     *
     * <pre>
     *&#47; 系统聊天
     * </pre>
     */
    public static final int ECT_SYSTEM_VALUE = 2;
    /**
     * <code>ECT_READSTATE = 3;</code>
     *
     * <pre>
     *&#47; 聊天消息已读状态设置
     * </pre>
     */
    public static final int ECT_READSTATE_VALUE = 3;
    /**
     * <code>ECT_PRODUCT = 4;</code>
     *
     * <pre>
     *&#47; 产品消息
     * </pre>
     */
    public static final int ECT_PRODUCT_VALUE = 4;
    /**
     * <code>ECT_GROUP = 5;</code>
     *
     * <pre>
     *&#47; 群聊
     * </pre>
     */
    public static final int ECT_GROUP_VALUE = 5;
    /**
     * <code>ECT_SNAP = 6;</code>
     *
     * <pre>
     *&#47; 瞬间(阅后即焚)
     * </pre>
     */
    public static final int ECT_SNAP_VALUE = 6;
    /**
     * <code>ECT_OPENSTATE = 7;</code>
     *
     * <pre>
     *&#47; 聊天消息打开状态设置
     * </pre>
     */
    public static final int ECT_OPENSTATE_VALUE = 7;


    public final int getNumber() { return value; }

    public static EChatType valueOf(int value) {
      switch (value) {
        case 0: return ECT_UNKNOWN;
        case 1: return ECT_NORMAL;
        case 2: return ECT_SYSTEM;
        case 3: return ECT_READSTATE;
        case 4: return ECT_PRODUCT;
        case 5: return ECT_GROUP;
        case 6: return ECT_SNAP;
        case 7: return ECT_OPENSTATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EChatType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EChatType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EChatType>() {
            public EChatType findValueByNumber(int number) {
              return EChatType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(5);
    }

    private static final EChatType[] VALUES = values();

    public static EChatType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EChatType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EChatType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.ESetType}
   */
  public enum ESetType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ET_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    ET_UNKNOWN(0, 0),
    /**
     * <code>ET_SET = 1;</code>
     *
     * <pre>
     *&#47; 设置
     * </pre>
     */
    ET_SET(1, 1),
    /**
     * <code>ET_CLEAR = 2;</code>
     *
     * <pre>
     *&#47; 清除
     * </pre>
     */
    ET_CLEAR(2, 2),
    ;

    /**
     * <code>ET_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int ET_UNKNOWN_VALUE = 0;
    /**
     * <code>ET_SET = 1;</code>
     *
     * <pre>
     *&#47; 设置
     * </pre>
     */
    public static final int ET_SET_VALUE = 1;
    /**
     * <code>ET_CLEAR = 2;</code>
     *
     * <pre>
     *&#47; 清除
     * </pre>
     */
    public static final int ET_CLEAR_VALUE = 2;


    public final int getNumber() { return value; }

    public static ESetType valueOf(int value) {
      switch (value) {
        case 0: return ET_UNKNOWN;
        case 1: return ET_SET;
        case 2: return ET_CLEAR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ESetType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ESetType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ESetType>() {
            public ESetType findValueByNumber(int number) {
              return ESetType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(6);
    }

    private static final ESetType[] VALUES = values();

    public static ESetType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ESetType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.ESetType)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.EC2S}
   */
  public enum EC2S
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>C2S_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    C2S_UNKNOWN(0, 0),
    /**
     * <code>C2S_HEARTBEAT = 257;</code>
     *
     * <pre>
     *UserLogin-登录协议
     * </pre>
     */
    C2S_HEARTBEAT(1, 257),
    /**
     * <code>C2S_LOGINUSER = 258;</code>
     *
     * <pre>
     *&#47; 登录
     * </pre>
     */
    C2S_LOGINUSER(2, 258),
    /**
     * <code>C2S_LOGOUTUSER = 259;</code>
     *
     * <pre>
     *&#47; 退出
     * </pre>
     */
    C2S_LOGOUTUSER(3, 259),
    /**
     * <code>C2S_USERCHAT = 513;</code>
     *
     * <pre>
     *UserChat-用户聊天协议
     * </pre>
     */
    C2S_USERCHAT(4, 513),
    /**
     * <code>C2S_FORBIDUSER = 514;</code>
     *
     * <pre>
     *&#47; 屏蔽聊天
     * </pre>
     */
    C2S_FORBIDUSER(5, 514),
    /**
     * <code>C2S_USERCHATRECV = 515;</code>
     *
     * <pre>
     *&#47; 聊天接收
     * </pre>
     */
    C2S_USERCHATRECV(6, 515),
    /**
     * <code>C2S_USERCHATCONFIRM = 516;</code>
     *
     * <pre>
     *&#47; 聊天接收确认
     * </pre>
     */
    C2S_USERCHATCONFIRM(7, 516),
    /**
     * <code>C2S_USERCHATREADSTATE = 517;</code>
     *
     * <pre>
     *&#47; 聊天消息已读状态设置	
     * </pre>
     */
    C2S_USERCHATREADSTATE(8, 517),
    /**
     * <code>C2S_CREATE_TEAM_REQ = 769;</code>
     *
     * <pre>
     *team.proto-群协议
     * </pre>
     */
    C2S_CREATE_TEAM_REQ(9, 769),
    /**
     * <code>C2S_GET_TEAM_BASE_INFO_REQ = 770;</code>
     *
     * <pre>
     *&#47; 获取群基本信息
     * </pre>
     */
    C2S_GET_TEAM_BASE_INFO_REQ(10, 770),
    /**
     * <code>C2S_CHANGE_TEAM_INFO_REQ = 771;</code>
     *
     * <pre>
     *&#47; 修改群信息
     * </pre>
     */
    C2S_CHANGE_TEAM_INFO_REQ(11, 771),
    /**
     * <code>C2S_JOIN_TEAM_REQ = 772;</code>
     *
     * <pre>
     *&#47; 入群请求
     * </pre>
     */
    C2S_JOIN_TEAM_REQ(12, 772),
    /**
     * <code>C2S_ADMIN_JOIN_TEAM_RSP = 773;</code>
     *
     * <pre>
     *&#47; 对入群请求的回复
     * </pre>
     */
    C2S_ADMIN_JOIN_TEAM_RSP(13, 773),
    /**
     * <code>C2S_ADMIN_TEAM_REQ = 774;</code>
     *
     * <pre>
     *&#47; 对群进行管理操作请求
     * </pre>
     */
    C2S_ADMIN_TEAM_REQ(14, 774),
    /**
     * <code>C2S_GET_TEAM_MEMBERS_REQ = 775;</code>
     *
     * <pre>
     *&#47; 获取群成员请求
     * </pre>
     */
    C2S_GET_TEAM_MEMBERS_REQ(15, 775),
    /**
     * <code>C2S_GET_JOINED_TEAMS_REQ = 776;</code>
     *
     * <pre>
     *&#47; 获取用户加入的群
     * </pre>
     */
    C2S_GET_JOINED_TEAMS_REQ(16, 776),
    /**
     * <code>C2S_TEAM_CHAT_MSG_REQ = 777;</code>
     *
     * <pre>
     *&#47; 聊天请求
     * </pre>
     */
    C2S_TEAM_CHAT_MSG_REQ(17, 777),
    /**
     * <code>C2S_GET_TEAM_MSG_REQ = 778;</code>
     *
     * <pre>
     *&#47; 获取群消息请求
     * </pre>
     */
    C2S_GET_TEAM_MSG_REQ(18, 778),
    /**
     * <code>C2S_CONFIRM_TEAM_MSG_REQ = 779;</code>
     *
     * <pre>
     *&#47; 确认获取群消息
     * </pre>
     */
    C2S_CONFIRM_TEAM_MSG_REQ(19, 779),
    /**
     * <code>C2S_CHANGE_TEAM_CARD_REQ = 780;</code>
     *
     * <pre>
     *&#47; 修改群名片
     * </pre>
     */
    C2S_CHANGE_TEAM_CARD_REQ(20, 780),
    /**
     * <code>C2S_ADMIN_TEAM_RESOURCE_REQ = 781;</code>
     *
     * <pre>
     *&#47; 管理群资源请求
     * </pre>
     */
    C2S_ADMIN_TEAM_RESOURCE_REQ(21, 781),
    /**
     * <code>C2S_CREATE_LIVE_CHAT_ROOM_REQ = 1281;</code>
     *
     * <pre>
     *&#47; livechat.proto 直播聊天相关
     * </pre>
     */
    C2S_CREATE_LIVE_CHAT_ROOM_REQ(22, 1281),
    /**
     * <code>C2S_DISSOLVE_LIVE_CHAT_ROOM_REQ = 1282;</code>
     *
     * <pre>
     *&#47; 解散直播聊天室
     * </pre>
     */
    C2S_DISSOLVE_LIVE_CHAT_ROOM_REQ(23, 1282),
    /**
     * <code>C2S_ENTER_LIVE_CHAT_ROOM_REQ = 1283;</code>
     *
     * <pre>
     *&#47; 进入直播聊天室
     * </pre>
     */
    C2S_ENTER_LIVE_CHAT_ROOM_REQ(24, 1283),
    /**
     * <code>C2S_LEAVE_LIVE_CHAT_ROOM_REQ = 1284;</code>
     *
     * <pre>
     *&#47; 离开直播聊天室
     * </pre>
     */
    C2S_LEAVE_LIVE_CHAT_ROOM_REQ(25, 1284),
    /**
     * <code>C2S_LIVE_CHAT_REQ = 1285;</code>
     *
     * <pre>
     *&#47; 直播聊天请求
     * </pre>
     */
    C2S_LIVE_CHAT_REQ(26, 1285),
    /**
     * <code>C2S_LIVE_CHAT_NOTIFY_RSP = 1286;</code>
     *
     * <pre>
     *&#47; 直播聊天通知确认
     * </pre>
     */
    C2S_LIVE_CHAT_NOTIFY_RSP(27, 1286),
    /**
     * <code>C2S_LIVE_NOTIFICATION_NOTIFY_RSP = 1287;</code>
     *
     * <pre>
     *&#47; 直播聊天室通知确认
     * </pre>
     */
    C2S_LIVE_NOTIFICATION_NOTIFY_RSP(28, 1287),
    ;

    /**
     * <code>C2S_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int C2S_UNKNOWN_VALUE = 0;
    /**
     * <code>C2S_HEARTBEAT = 257;</code>
     *
     * <pre>
     *UserLogin-登录协议
     * </pre>
     */
    public static final int C2S_HEARTBEAT_VALUE = 257;
    /**
     * <code>C2S_LOGINUSER = 258;</code>
     *
     * <pre>
     *&#47; 登录
     * </pre>
     */
    public static final int C2S_LOGINUSER_VALUE = 258;
    /**
     * <code>C2S_LOGOUTUSER = 259;</code>
     *
     * <pre>
     *&#47; 退出
     * </pre>
     */
    public static final int C2S_LOGOUTUSER_VALUE = 259;
    /**
     * <code>C2S_USERCHAT = 513;</code>
     *
     * <pre>
     *UserChat-用户聊天协议
     * </pre>
     */
    public static final int C2S_USERCHAT_VALUE = 513;
    /**
     * <code>C2S_FORBIDUSER = 514;</code>
     *
     * <pre>
     *&#47; 屏蔽聊天
     * </pre>
     */
    public static final int C2S_FORBIDUSER_VALUE = 514;
    /**
     * <code>C2S_USERCHATRECV = 515;</code>
     *
     * <pre>
     *&#47; 聊天接收
     * </pre>
     */
    public static final int C2S_USERCHATRECV_VALUE = 515;
    /**
     * <code>C2S_USERCHATCONFIRM = 516;</code>
     *
     * <pre>
     *&#47; 聊天接收确认
     * </pre>
     */
    public static final int C2S_USERCHATCONFIRM_VALUE = 516;
    /**
     * <code>C2S_USERCHATREADSTATE = 517;</code>
     *
     * <pre>
     *&#47; 聊天消息已读状态设置	
     * </pre>
     */
    public static final int C2S_USERCHATREADSTATE_VALUE = 517;
    /**
     * <code>C2S_CREATE_TEAM_REQ = 769;</code>
     *
     * <pre>
     *team.proto-群协议
     * </pre>
     */
    public static final int C2S_CREATE_TEAM_REQ_VALUE = 769;
    /**
     * <code>C2S_GET_TEAM_BASE_INFO_REQ = 770;</code>
     *
     * <pre>
     *&#47; 获取群基本信息
     * </pre>
     */
    public static final int C2S_GET_TEAM_BASE_INFO_REQ_VALUE = 770;
    /**
     * <code>C2S_CHANGE_TEAM_INFO_REQ = 771;</code>
     *
     * <pre>
     *&#47; 修改群信息
     * </pre>
     */
    public static final int C2S_CHANGE_TEAM_INFO_REQ_VALUE = 771;
    /**
     * <code>C2S_JOIN_TEAM_REQ = 772;</code>
     *
     * <pre>
     *&#47; 入群请求
     * </pre>
     */
    public static final int C2S_JOIN_TEAM_REQ_VALUE = 772;
    /**
     * <code>C2S_ADMIN_JOIN_TEAM_RSP = 773;</code>
     *
     * <pre>
     *&#47; 对入群请求的回复
     * </pre>
     */
    public static final int C2S_ADMIN_JOIN_TEAM_RSP_VALUE = 773;
    /**
     * <code>C2S_ADMIN_TEAM_REQ = 774;</code>
     *
     * <pre>
     *&#47; 对群进行管理操作请求
     * </pre>
     */
    public static final int C2S_ADMIN_TEAM_REQ_VALUE = 774;
    /**
     * <code>C2S_GET_TEAM_MEMBERS_REQ = 775;</code>
     *
     * <pre>
     *&#47; 获取群成员请求
     * </pre>
     */
    public static final int C2S_GET_TEAM_MEMBERS_REQ_VALUE = 775;
    /**
     * <code>C2S_GET_JOINED_TEAMS_REQ = 776;</code>
     *
     * <pre>
     *&#47; 获取用户加入的群
     * </pre>
     */
    public static final int C2S_GET_JOINED_TEAMS_REQ_VALUE = 776;
    /**
     * <code>C2S_TEAM_CHAT_MSG_REQ = 777;</code>
     *
     * <pre>
     *&#47; 聊天请求
     * </pre>
     */
    public static final int C2S_TEAM_CHAT_MSG_REQ_VALUE = 777;
    /**
     * <code>C2S_GET_TEAM_MSG_REQ = 778;</code>
     *
     * <pre>
     *&#47; 获取群消息请求
     * </pre>
     */
    public static final int C2S_GET_TEAM_MSG_REQ_VALUE = 778;
    /**
     * <code>C2S_CONFIRM_TEAM_MSG_REQ = 779;</code>
     *
     * <pre>
     *&#47; 确认获取群消息
     * </pre>
     */
    public static final int C2S_CONFIRM_TEAM_MSG_REQ_VALUE = 779;
    /**
     * <code>C2S_CHANGE_TEAM_CARD_REQ = 780;</code>
     *
     * <pre>
     *&#47; 修改群名片
     * </pre>
     */
    public static final int C2S_CHANGE_TEAM_CARD_REQ_VALUE = 780;
    /**
     * <code>C2S_ADMIN_TEAM_RESOURCE_REQ = 781;</code>
     *
     * <pre>
     *&#47; 管理群资源请求
     * </pre>
     */
    public static final int C2S_ADMIN_TEAM_RESOURCE_REQ_VALUE = 781;
    /**
     * <code>C2S_CREATE_LIVE_CHAT_ROOM_REQ = 1281;</code>
     *
     * <pre>
     *&#47; livechat.proto 直播聊天相关
     * </pre>
     */
    public static final int C2S_CREATE_LIVE_CHAT_ROOM_REQ_VALUE = 1281;
    /**
     * <code>C2S_DISSOLVE_LIVE_CHAT_ROOM_REQ = 1282;</code>
     *
     * <pre>
     *&#47; 解散直播聊天室
     * </pre>
     */
    public static final int C2S_DISSOLVE_LIVE_CHAT_ROOM_REQ_VALUE = 1282;
    /**
     * <code>C2S_ENTER_LIVE_CHAT_ROOM_REQ = 1283;</code>
     *
     * <pre>
     *&#47; 进入直播聊天室
     * </pre>
     */
    public static final int C2S_ENTER_LIVE_CHAT_ROOM_REQ_VALUE = 1283;
    /**
     * <code>C2S_LEAVE_LIVE_CHAT_ROOM_REQ = 1284;</code>
     *
     * <pre>
     *&#47; 离开直播聊天室
     * </pre>
     */
    public static final int C2S_LEAVE_LIVE_CHAT_ROOM_REQ_VALUE = 1284;
    /**
     * <code>C2S_LIVE_CHAT_REQ = 1285;</code>
     *
     * <pre>
     *&#47; 直播聊天请求
     * </pre>
     */
    public static final int C2S_LIVE_CHAT_REQ_VALUE = 1285;
    /**
     * <code>C2S_LIVE_CHAT_NOTIFY_RSP = 1286;</code>
     *
     * <pre>
     *&#47; 直播聊天通知确认
     * </pre>
     */
    public static final int C2S_LIVE_CHAT_NOTIFY_RSP_VALUE = 1286;
    /**
     * <code>C2S_LIVE_NOTIFICATION_NOTIFY_RSP = 1287;</code>
     *
     * <pre>
     *&#47; 直播聊天室通知确认
     * </pre>
     */
    public static final int C2S_LIVE_NOTIFICATION_NOTIFY_RSP_VALUE = 1287;


    public final int getNumber() { return value; }

    public static EC2S valueOf(int value) {
      switch (value) {
        case 0: return C2S_UNKNOWN;
        case 257: return C2S_HEARTBEAT;
        case 258: return C2S_LOGINUSER;
        case 259: return C2S_LOGOUTUSER;
        case 513: return C2S_USERCHAT;
        case 514: return C2S_FORBIDUSER;
        case 515: return C2S_USERCHATRECV;
        case 516: return C2S_USERCHATCONFIRM;
        case 517: return C2S_USERCHATREADSTATE;
        case 769: return C2S_CREATE_TEAM_REQ;
        case 770: return C2S_GET_TEAM_BASE_INFO_REQ;
        case 771: return C2S_CHANGE_TEAM_INFO_REQ;
        case 772: return C2S_JOIN_TEAM_REQ;
        case 773: return C2S_ADMIN_JOIN_TEAM_RSP;
        case 774: return C2S_ADMIN_TEAM_REQ;
        case 775: return C2S_GET_TEAM_MEMBERS_REQ;
        case 776: return C2S_GET_JOINED_TEAMS_REQ;
        case 777: return C2S_TEAM_CHAT_MSG_REQ;
        case 778: return C2S_GET_TEAM_MSG_REQ;
        case 779: return C2S_CONFIRM_TEAM_MSG_REQ;
        case 780: return C2S_CHANGE_TEAM_CARD_REQ;
        case 781: return C2S_ADMIN_TEAM_RESOURCE_REQ;
        case 1281: return C2S_CREATE_LIVE_CHAT_ROOM_REQ;
        case 1282: return C2S_DISSOLVE_LIVE_CHAT_ROOM_REQ;
        case 1283: return C2S_ENTER_LIVE_CHAT_ROOM_REQ;
        case 1284: return C2S_LEAVE_LIVE_CHAT_ROOM_REQ;
        case 1285: return C2S_LIVE_CHAT_REQ;
        case 1286: return C2S_LIVE_CHAT_NOTIFY_RSP;
        case 1287: return C2S_LIVE_NOTIFICATION_NOTIFY_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EC2S>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EC2S>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EC2S>() {
            public EC2S findValueByNumber(int number) {
              return EC2S.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(7);
    }

    private static final EC2S[] VALUES = values();

    public static EC2S valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EC2S(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.EC2S)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.ES2C}
   */
  public enum ES2C
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>S2C_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    S2C_UNKNOWN(0, 0),
    /**
     * <code>S2C_COMMON_ACK = 1;</code>
     *
     * <pre>
     *&#47; 通知消息确认
     * </pre>
     */
    S2C_COMMON_ACK(1, 1),
    /**
     * <code>S2C_LOGINUSERRES = 385;</code>
     *
     * <pre>
     *UserLogin-登录协议
     * </pre>
     */
    S2C_LOGINUSERRES(2, 385),
    /**
     * <code>S2C_INITRES = 386;</code>
     *
     * <pre>
     *&#47; 进聊天系统初始化结果
     * </pre>
     */
    S2C_INITRES(3, 386),
    /**
     * <code>S2C_USERKICKRES = 387;</code>
     *
     * <pre>
     *&#47; 被踢下线
     * </pre>
     */
    S2C_USERKICKRES(4, 387),
    /**
     * <code>S2C_MESSAGEERROR = 388;</code>
     *
     * <pre>
     *&#47; 消息错误
     * </pre>
     */
    S2C_MESSAGEERROR(5, 388),
    /**
     * <code>S2C_USERCHATRES = 641;</code>
     *
     * <pre>
     *UserChat-用户聊天协议
     * </pre>
     */
    S2C_USERCHATRES(6, 641),
    /**
     * <code>S2C_USERCHATCASTRES = 642;</code>
     *
     * <pre>
     *&#47; 聊天新消息广播
     * </pre>
     */
    S2C_USERCHATCASTRES(7, 642),
    /**
     * <code>S2C_USERCHATRECVRES = 643;</code>
     *
     * <pre>
     *&#47; 聊天消息接收
     * </pre>
     */
    S2C_USERCHATRECVRES(8, 643),
    /**
     * <code>S2C_FORBIDUSERRES = 644;</code>
     *
     * <pre>
     *&#47; 屏蔽聊天结果
     * </pre>
     */
    S2C_FORBIDUSERRES(9, 644),
    /**
     * <code>S2C_USERCHATRECVEND = 645;</code>
     *
     * <pre>
     *&#47; 聊天消息接收完毕
     * </pre>
     */
    S2C_USERCHATRECVEND(10, 645),
    /**
     * <code>S2C_USERCHATUPDATERES = 646;</code>
     *
     * <pre>
     *&#47; 聊天结果(发给自己)
     * </pre>
     */
    S2C_USERCHATUPDATERES(11, 646),
    /**
     * <code>S2C_CREATE_TEAM_RSP = 1537;</code>
     *
     * <pre>
     *team.proto-群协议
     * ------------------------以下为群操作----------------------------
     * </pre>
     */
    S2C_CREATE_TEAM_RSP(12, 1537),
    /**
     * <code>S2C_GET_TEAM_BASE_INFO_RSP = 1538;</code>
     *
     * <pre>
     *&#47; 获取群基本信息返回
     * </pre>
     */
    S2C_GET_TEAM_BASE_INFO_RSP(13, 1538),
    /**
     * <code>S2C_TEAM_INFO_CHANGED_NTY = 1539;</code>
     *
     * <pre>
     *&#47; 群成员变化通知
     * </pre>
     */
    S2C_TEAM_INFO_CHANGED_NTY(14, 1539),
    /**
     * <code>S2C_JOIN_TEAM_RSP = 1540;</code>
     *
     * <pre>
     *&#47; 入群返回
     * </pre>
     */
    S2C_JOIN_TEAM_RSP(15, 1540),
    /**
     * <code>S2C_ADMIN_JOIN_TEAM_REQ = 1541;</code>
     *
     * <pre>
     *&#47; 将入群请求发给对方
     * </pre>
     */
    S2C_ADMIN_JOIN_TEAM_REQ(16, 1541),
    /**
     * <code>S2C_TEAM_ADMINED_NTY = 1542;</code>
     *
     * <pre>
     *&#47; 群成员变化通知
     * </pre>
     */
    S2C_TEAM_ADMINED_NTY(17, 1542),
    /**
     * <code>S2C_GET_TEAM_MEMBERS_RSP = 1543;</code>
     *
     * <pre>
     *&#47; 获取群成员回复
     * </pre>
     */
    S2C_GET_TEAM_MEMBERS_RSP(18, 1543),
    /**
     * <code>S2C_GET_JOINED_TEAMS_RSP = 1544;</code>
     *
     * <pre>
     *&#47; 获取用户加入的群的回复
     * </pre>
     */
    S2C_GET_JOINED_TEAMS_RSP(19, 1544),
    /**
     * <code>S2C_TEAM_MSG_NTY = 1545;</code>
     *
     * <pre>
     *&#47; 群消息通知
     * </pre>
     */
    S2C_TEAM_MSG_NTY(20, 1545),
    /**
     * <code>S2C_PUSH_TEAM_CHAT_MSG = 1546;</code>
     *
     * <pre>
     *&#47; 向客户端推送群聊消息
     * </pre>
     */
    S2C_PUSH_TEAM_CHAT_MSG(21, 1546),
    /**
     * <code>S2C_TEAM_CARD_CHANGED_NTY = 1547;</code>
     *
     * <pre>
     *&#47; 群名片发生变化
     * </pre>
     */
    S2C_TEAM_CARD_CHANGED_NTY(22, 1547),
    /**
     * <code>S2C_ADMIN_TEAM_RESOURCE_RSP = 1548;</code>
     *
     * <pre>
     *&#47; 管理群资源返回
     * </pre>
     */
    S2C_ADMIN_TEAM_RESOURCE_RSP(23, 1548),
    /**
     * <code>S2C_CREATE_LIVE_CHAT_ROOM_RSP = 2049;</code>
     *
     * <pre>
     *&#47; livechat.proto 直播聊天相关
     * </pre>
     */
    S2C_CREATE_LIVE_CHAT_ROOM_RSP(24, 2049),
    /**
     * <code>S2C_DISSOLVE_LIVE_CHAT_ROOM_RSP = 2050;</code>
     *
     * <pre>
     *&#47; 解散直播聊天室返回
     * </pre>
     */
    S2C_DISSOLVE_LIVE_CHAT_ROOM_RSP(25, 2050),
    /**
     * <code>S2C_ENTER_LIVE_CHAT_ROOM_RSP = 2051;</code>
     *
     * <pre>
     *&#47; 进入直播聊天室返回
     * </pre>
     */
    S2C_ENTER_LIVE_CHAT_ROOM_RSP(26, 2051),
    /**
     * <code>S2C_LEAVE_LIVE_CHAT_ROOM_RSP = 2052;</code>
     *
     * <pre>
     *&#47; 离开直播聊天室返回
     * </pre>
     */
    S2C_LEAVE_LIVE_CHAT_ROOM_RSP(27, 2052),
    /**
     * <code>S2C_LIVE_CHAT_RSP = 2053;</code>
     *
     * <pre>
     *&#47; 直播聊天请求返回
     * </pre>
     */
    S2C_LIVE_CHAT_RSP(28, 2053),
    /**
     * <code>S2C_LIVE_CHAT_NOTIFY = 2054;</code>
     *
     * <pre>
     *&#47; 直播聊天通知
     * </pre>
     */
    S2C_LIVE_CHAT_NOTIFY(29, 2054),
    /**
     * <code>S2C_LIVE_NOTIFICATION_NOTIFY = 2055;</code>
     *
     * <pre>
     *&#47; 直播聊天室通知
     * </pre>
     */
    S2C_LIVE_NOTIFICATION_NOTIFY(30, 2055),
    /**
     * <code>RM2R_CREATE_LIVE_CHAT_ROOM_RSP = 2056;</code>
     *
     * <pre>
     * // 房间管理服务器通知房间服务器 创建房间消息
     * </pre>
     */
    RM2R_CREATE_LIVE_CHAT_ROOM_RSP(31, 2056),
    ;

    /**
     * <code>S2C_UNKNOWN = 0;</code>
     *
     * <pre>
     *&#47; 未知类型
     * </pre>
     */
    public static final int S2C_UNKNOWN_VALUE = 0;
    /**
     * <code>S2C_COMMON_ACK = 1;</code>
     *
     * <pre>
     *&#47; 通知消息确认
     * </pre>
     */
    public static final int S2C_COMMON_ACK_VALUE = 1;
    /**
     * <code>S2C_LOGINUSERRES = 385;</code>
     *
     * <pre>
     *UserLogin-登录协议
     * </pre>
     */
    public static final int S2C_LOGINUSERRES_VALUE = 385;
    /**
     * <code>S2C_INITRES = 386;</code>
     *
     * <pre>
     *&#47; 进聊天系统初始化结果
     * </pre>
     */
    public static final int S2C_INITRES_VALUE = 386;
    /**
     * <code>S2C_USERKICKRES = 387;</code>
     *
     * <pre>
     *&#47; 被踢下线
     * </pre>
     */
    public static final int S2C_USERKICKRES_VALUE = 387;
    /**
     * <code>S2C_MESSAGEERROR = 388;</code>
     *
     * <pre>
     *&#47; 消息错误
     * </pre>
     */
    public static final int S2C_MESSAGEERROR_VALUE = 388;
    /**
     * <code>S2C_USERCHATRES = 641;</code>
     *
     * <pre>
     *UserChat-用户聊天协议
     * </pre>
     */
    public static final int S2C_USERCHATRES_VALUE = 641;
    /**
     * <code>S2C_USERCHATCASTRES = 642;</code>
     *
     * <pre>
     *&#47; 聊天新消息广播
     * </pre>
     */
    public static final int S2C_USERCHATCASTRES_VALUE = 642;
    /**
     * <code>S2C_USERCHATRECVRES = 643;</code>
     *
     * <pre>
     *&#47; 聊天消息接收
     * </pre>
     */
    public static final int S2C_USERCHATRECVRES_VALUE = 643;
    /**
     * <code>S2C_FORBIDUSERRES = 644;</code>
     *
     * <pre>
     *&#47; 屏蔽聊天结果
     * </pre>
     */
    public static final int S2C_FORBIDUSERRES_VALUE = 644;
    /**
     * <code>S2C_USERCHATRECVEND = 645;</code>
     *
     * <pre>
     *&#47; 聊天消息接收完毕
     * </pre>
     */
    public static final int S2C_USERCHATRECVEND_VALUE = 645;
    /**
     * <code>S2C_USERCHATUPDATERES = 646;</code>
     *
     * <pre>
     *&#47; 聊天结果(发给自己)
     * </pre>
     */
    public static final int S2C_USERCHATUPDATERES_VALUE = 646;
    /**
     * <code>S2C_CREATE_TEAM_RSP = 1537;</code>
     *
     * <pre>
     *team.proto-群协议
     * ------------------------以下为群操作----------------------------
     * </pre>
     */
    public static final int S2C_CREATE_TEAM_RSP_VALUE = 1537;
    /**
     * <code>S2C_GET_TEAM_BASE_INFO_RSP = 1538;</code>
     *
     * <pre>
     *&#47; 获取群基本信息返回
     * </pre>
     */
    public static final int S2C_GET_TEAM_BASE_INFO_RSP_VALUE = 1538;
    /**
     * <code>S2C_TEAM_INFO_CHANGED_NTY = 1539;</code>
     *
     * <pre>
     *&#47; 群成员变化通知
     * </pre>
     */
    public static final int S2C_TEAM_INFO_CHANGED_NTY_VALUE = 1539;
    /**
     * <code>S2C_JOIN_TEAM_RSP = 1540;</code>
     *
     * <pre>
     *&#47; 入群返回
     * </pre>
     */
    public static final int S2C_JOIN_TEAM_RSP_VALUE = 1540;
    /**
     * <code>S2C_ADMIN_JOIN_TEAM_REQ = 1541;</code>
     *
     * <pre>
     *&#47; 将入群请求发给对方
     * </pre>
     */
    public static final int S2C_ADMIN_JOIN_TEAM_REQ_VALUE = 1541;
    /**
     * <code>S2C_TEAM_ADMINED_NTY = 1542;</code>
     *
     * <pre>
     *&#47; 群成员变化通知
     * </pre>
     */
    public static final int S2C_TEAM_ADMINED_NTY_VALUE = 1542;
    /**
     * <code>S2C_GET_TEAM_MEMBERS_RSP = 1543;</code>
     *
     * <pre>
     *&#47; 获取群成员回复
     * </pre>
     */
    public static final int S2C_GET_TEAM_MEMBERS_RSP_VALUE = 1543;
    /**
     * <code>S2C_GET_JOINED_TEAMS_RSP = 1544;</code>
     *
     * <pre>
     *&#47; 获取用户加入的群的回复
     * </pre>
     */
    public static final int S2C_GET_JOINED_TEAMS_RSP_VALUE = 1544;
    /**
     * <code>S2C_TEAM_MSG_NTY = 1545;</code>
     *
     * <pre>
     *&#47; 群消息通知
     * </pre>
     */
    public static final int S2C_TEAM_MSG_NTY_VALUE = 1545;
    /**
     * <code>S2C_PUSH_TEAM_CHAT_MSG = 1546;</code>
     *
     * <pre>
     *&#47; 向客户端推送群聊消息
     * </pre>
     */
    public static final int S2C_PUSH_TEAM_CHAT_MSG_VALUE = 1546;
    /**
     * <code>S2C_TEAM_CARD_CHANGED_NTY = 1547;</code>
     *
     * <pre>
     *&#47; 群名片发生变化
     * </pre>
     */
    public static final int S2C_TEAM_CARD_CHANGED_NTY_VALUE = 1547;
    /**
     * <code>S2C_ADMIN_TEAM_RESOURCE_RSP = 1548;</code>
     *
     * <pre>
     *&#47; 管理群资源返回
     * </pre>
     */
    public static final int S2C_ADMIN_TEAM_RESOURCE_RSP_VALUE = 1548;
    /**
     * <code>S2C_CREATE_LIVE_CHAT_ROOM_RSP = 2049;</code>
     *
     * <pre>
     *&#47; livechat.proto 直播聊天相关
     * </pre>
     */
    public static final int S2C_CREATE_LIVE_CHAT_ROOM_RSP_VALUE = 2049;
    /**
     * <code>S2C_DISSOLVE_LIVE_CHAT_ROOM_RSP = 2050;</code>
     *
     * <pre>
     *&#47; 解散直播聊天室返回
     * </pre>
     */
    public static final int S2C_DISSOLVE_LIVE_CHAT_ROOM_RSP_VALUE = 2050;
    /**
     * <code>S2C_ENTER_LIVE_CHAT_ROOM_RSP = 2051;</code>
     *
     * <pre>
     *&#47; 进入直播聊天室返回
     * </pre>
     */
    public static final int S2C_ENTER_LIVE_CHAT_ROOM_RSP_VALUE = 2051;
    /**
     * <code>S2C_LEAVE_LIVE_CHAT_ROOM_RSP = 2052;</code>
     *
     * <pre>
     *&#47; 离开直播聊天室返回
     * </pre>
     */
    public static final int S2C_LEAVE_LIVE_CHAT_ROOM_RSP_VALUE = 2052;
    /**
     * <code>S2C_LIVE_CHAT_RSP = 2053;</code>
     *
     * <pre>
     *&#47; 直播聊天请求返回
     * </pre>
     */
    public static final int S2C_LIVE_CHAT_RSP_VALUE = 2053;
    /**
     * <code>S2C_LIVE_CHAT_NOTIFY = 2054;</code>
     *
     * <pre>
     *&#47; 直播聊天通知
     * </pre>
     */
    public static final int S2C_LIVE_CHAT_NOTIFY_VALUE = 2054;
    /**
     * <code>S2C_LIVE_NOTIFICATION_NOTIFY = 2055;</code>
     *
     * <pre>
     *&#47; 直播聊天室通知
     * </pre>
     */
    public static final int S2C_LIVE_NOTIFICATION_NOTIFY_VALUE = 2055;
    /**
     * <code>RM2R_CREATE_LIVE_CHAT_ROOM_RSP = 2056;</code>
     *
     * <pre>
     * // 房间管理服务器通知房间服务器 创建房间消息
     * </pre>
     */
    public static final int RM2R_CREATE_LIVE_CHAT_ROOM_RSP_VALUE = 2056;


    public final int getNumber() { return value; }

    public static ES2C valueOf(int value) {
      switch (value) {
        case 0: return S2C_UNKNOWN;
        case 1: return S2C_COMMON_ACK;
        case 385: return S2C_LOGINUSERRES;
        case 386: return S2C_INITRES;
        case 387: return S2C_USERKICKRES;
        case 388: return S2C_MESSAGEERROR;
        case 641: return S2C_USERCHATRES;
        case 642: return S2C_USERCHATCASTRES;
        case 643: return S2C_USERCHATRECVRES;
        case 644: return S2C_FORBIDUSERRES;
        case 645: return S2C_USERCHATRECVEND;
        case 646: return S2C_USERCHATUPDATERES;
        case 1537: return S2C_CREATE_TEAM_RSP;
        case 1538: return S2C_GET_TEAM_BASE_INFO_RSP;
        case 1539: return S2C_TEAM_INFO_CHANGED_NTY;
        case 1540: return S2C_JOIN_TEAM_RSP;
        case 1541: return S2C_ADMIN_JOIN_TEAM_REQ;
        case 1542: return S2C_TEAM_ADMINED_NTY;
        case 1543: return S2C_GET_TEAM_MEMBERS_RSP;
        case 1544: return S2C_GET_JOINED_TEAMS_RSP;
        case 1545: return S2C_TEAM_MSG_NTY;
        case 1546: return S2C_PUSH_TEAM_CHAT_MSG;
        case 1547: return S2C_TEAM_CARD_CHANGED_NTY;
        case 1548: return S2C_ADMIN_TEAM_RESOURCE_RSP;
        case 2049: return S2C_CREATE_LIVE_CHAT_ROOM_RSP;
        case 2050: return S2C_DISSOLVE_LIVE_CHAT_ROOM_RSP;
        case 2051: return S2C_ENTER_LIVE_CHAT_ROOM_RSP;
        case 2052: return S2C_LEAVE_LIVE_CHAT_ROOM_RSP;
        case 2053: return S2C_LIVE_CHAT_RSP;
        case 2054: return S2C_LIVE_CHAT_NOTIFY;
        case 2055: return S2C_LIVE_NOTIFICATION_NOTIFY;
        case 2056: return RM2R_CREATE_LIVE_CHAT_ROOM_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ES2C>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ES2C>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ES2C>() {
            public ES2C findValueByNumber(int number) {
              return ES2C.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(8);
    }

    private static final ES2C[] VALUES = values();

    public static ES2C valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ES2C(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.ES2C)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.E_SRV_TYPE}
   *
   * <pre>
   * 服务器类型
   * </pre>
   */
  public enum E_SRV_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EST_UNKNOW = 0;</code>
     */
    EST_UNKNOW(0, 0),
    /**
     * <code>EST_GATE = 1;</code>
     *
     * <pre>
     * 网关服务器
     * </pre>
     */
    EST_GATE(1, 1),
    /**
     * <code>EST_VALIDATE = 2;</code>
     *
     * <pre>
     * 验证服务器
     * </pre>
     */
    EST_VALIDATE(2, 2),
    /**
     * <code>EST_ROOM = 3;</code>
     *
     * <pre>
     * 房间服务器
     * </pre>
     */
    EST_ROOM(3, 3),
    /**
     * <code>EST_DATAOPT = 4;</code>
     *
     * <pre>
     * 数据库操作服务器
     * </pre>
     */
    EST_DATAOPT(4, 4),
    /**
     * <code>EST_ROOMMGE = 5;</code>
     *
     * <pre>
     * RoomManage服务器
     * </pre>
     */
    EST_ROOMMGE(5, 5),
    /**
     * <code>EST_MSGQUEUE = 6;</code>
     *
     * <pre>
     * MsgQueue 服务器
     * </pre>
     */
    EST_MSGQUEUE(6, 6),
    ;

    /**
     * <code>EST_UNKNOW = 0;</code>
     */
    public static final int EST_UNKNOW_VALUE = 0;
    /**
     * <code>EST_GATE = 1;</code>
     *
     * <pre>
     * 网关服务器
     * </pre>
     */
    public static final int EST_GATE_VALUE = 1;
    /**
     * <code>EST_VALIDATE = 2;</code>
     *
     * <pre>
     * 验证服务器
     * </pre>
     */
    public static final int EST_VALIDATE_VALUE = 2;
    /**
     * <code>EST_ROOM = 3;</code>
     *
     * <pre>
     * 房间服务器
     * </pre>
     */
    public static final int EST_ROOM_VALUE = 3;
    /**
     * <code>EST_DATAOPT = 4;</code>
     *
     * <pre>
     * 数据库操作服务器
     * </pre>
     */
    public static final int EST_DATAOPT_VALUE = 4;
    /**
     * <code>EST_ROOMMGE = 5;</code>
     *
     * <pre>
     * RoomManage服务器
     * </pre>
     */
    public static final int EST_ROOMMGE_VALUE = 5;
    /**
     * <code>EST_MSGQUEUE = 6;</code>
     *
     * <pre>
     * MsgQueue 服务器
     * </pre>
     */
    public static final int EST_MSGQUEUE_VALUE = 6;


    public final int getNumber() { return value; }

    public static E_SRV_TYPE valueOf(int value) {
      switch (value) {
        case 0: return EST_UNKNOW;
        case 1: return EST_GATE;
        case 2: return EST_VALIDATE;
        case 3: return EST_ROOM;
        case 4: return EST_DATAOPT;
        case 5: return EST_ROOMMGE;
        case 6: return EST_MSGQUEUE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<E_SRV_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<E_SRV_TYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<E_SRV_TYPE>() {
            public E_SRV_TYPE findValueByNumber(int number) {
              return E_SRV_TYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(9);
    }

    private static final E_SRV_TYPE[] VALUES = values();

    public static E_SRV_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private E_SRV_TYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.E_SRV_TYPE)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.E_SRV_REGIST}
   *
   * <pre>
   * 服务器注册
   * </pre>
   */
  public enum E_SRV_REGIST
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ESR_UNKNOW = 0;</code>
     */
    ESR_UNKNOW(0, 0),
    /**
     * <code>ESR_REGIST = 1;</code>
     *
     * <pre>
     * 注册
     * </pre>
     */
    ESR_REGIST(1, 1),
    /**
     * <code>ESR_REGISTOK = 2;</code>
     *
     * <pre>
     * 注册成功
     * </pre>
     */
    ESR_REGISTOK(2, 2),
    /**
     * <code>ESR_REGISTERR = 3;</code>
     *
     * <pre>
     * 注册失败
     * </pre>
     */
    ESR_REGISTERR(3, 3),
    ;

    /**
     * <code>ESR_UNKNOW = 0;</code>
     */
    public static final int ESR_UNKNOW_VALUE = 0;
    /**
     * <code>ESR_REGIST = 1;</code>
     *
     * <pre>
     * 注册
     * </pre>
     */
    public static final int ESR_REGIST_VALUE = 1;
    /**
     * <code>ESR_REGISTOK = 2;</code>
     *
     * <pre>
     * 注册成功
     * </pre>
     */
    public static final int ESR_REGISTOK_VALUE = 2;
    /**
     * <code>ESR_REGISTERR = 3;</code>
     *
     * <pre>
     * 注册失败
     * </pre>
     */
    public static final int ESR_REGISTERR_VALUE = 3;


    public final int getNumber() { return value; }

    public static E_SRV_REGIST valueOf(int value) {
      switch (value) {
        case 0: return ESR_UNKNOW;
        case 1: return ESR_REGIST;
        case 2: return ESR_REGISTOK;
        case 3: return ESR_REGISTERR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<E_SRV_REGIST>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<E_SRV_REGIST>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<E_SRV_REGIST>() {
            public E_SRV_REGIST findValueByNumber(int number) {
              return E_SRV_REGIST.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(10);
    }

    private static final E_SRV_REGIST[] VALUES = values();

    public static E_SRV_REGIST valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private E_SRV_REGIST(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.E_SRV_REGIST)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.E_USER_STATE}
   */
  public enum E_USER_STATE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EUS_USERIN = 0;</code>
     */
    EUS_USERIN(0, 0),
    /**
     * <code>EUS_USEROUT = 1;</code>
     */
    EUS_USEROUT(1, 1),
    ;

    /**
     * <code>EUS_USERIN = 0;</code>
     */
    public static final int EUS_USERIN_VALUE = 0;
    /**
     * <code>EUS_USEROUT = 1;</code>
     */
    public static final int EUS_USEROUT_VALUE = 1;


    public final int getNumber() { return value; }

    public static E_USER_STATE valueOf(int value) {
      switch (value) {
        case 0: return EUS_USERIN;
        case 1: return EUS_USEROUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<E_USER_STATE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<E_USER_STATE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<E_USER_STATE>() {
            public E_USER_STATE findValueByNumber(int number) {
              return E_USER_STATE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(11);
    }

    private static final E_USER_STATE[] VALUES = values();

    public static E_USER_STATE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private E_USER_STATE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.E_USER_STATE)
  }

  /**
   * Protobuf enum {@code com.pineapplelive.cn.entity.E_SRV_MSGTYPE}
   *
   * <pre>
   * 消息类型
   * </pre>
   */
  public enum E_SRV_MSGTYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ESM_UNKNOW = 0;</code>
     */
    ESM_UNKNOW(0, 0),
    /**
     * <code>ESM_REGIST = 2305;</code>
     *
     * <pre>
     * 注册
     * </pre>
     */
    ESM_REGIST(1, 2305),
    /**
     * <code>ESM_USERSTATE = 2306;</code>
     */
    ESM_USERSTATE(2, 2306),
    /**
     * <code>ESM_USERINOUTROOM = 2307;</code>
     */
    ESM_USERINOUTROOM(3, 2307),
    /**
     * <code>ESM_ARR_USER_NOTIFICATION_NOTIFY = 2308;</code>
     */
    ESM_ARR_USER_NOTIFICATION_NOTIFY(4, 2308),
    /**
     * <code>ESM_ARR_LIVE_CHAT_NOTIFY = 2309;</code>
     */
    ESM_ARR_LIVE_CHAT_NOTIFY(5, 2309),
    /**
     * <code>ESM_DISSOLVE_ROOM = 2310;</code>
     */
    ESM_DISSOLVE_ROOM(6, 2310),
    /**
     * <code>ESM_CHAT_QUEUE = 2311;</code>
     */
    ESM_CHAT_QUEUE(7, 2311),
    /**
     * <code>ESM_ALL_ONLINE_CHAT_RECV_RES = 2312;</code>
     */
    ESM_ALL_ONLINE_CHAT_RECV_RES(8, 2312),
    /**
     * <code>ESM_OFFLINE_MSG = 2320;</code>
     */
    ESM_OFFLINE_MSG(9, 2320),
    /**
     * <code>ESM_GET_OFFLINE_MSG = 2321;</code>
     */
    ESM_GET_OFFLINE_MSG(10, 2321),
    /**
     * <code>ESM_SEND_SPECIFY_GROUP_USER = 2322;</code>
     */
    ESM_SEND_SPECIFY_GROUP_USER(11, 2322),
    /**
     * <code>ESM_ARR_USER_CHAT_RECV = 2323;</code>
     */
    ESM_ARR_USER_CHAT_RECV(12, 2323),
    /**
     * <code>ESM_ARR_USER_CHAT_RECV_RES = 2324;</code>
     */
    ESM_ARR_USER_CHAT_RECV_RES(13, 2324),
    /**
     * <code>ESM_ARR_OFFLINE_MSG = 2325;</code>
     */
    ESM_ARR_OFFLINE_MSG(14, 2325),
    /**
     * <code>ESM_SYNC_MSG = 2326;</code>
     */
    ESM_SYNC_MSG(15, 2326),
    /**
     * <code>ESM_SYNC_ROOMS = 2327;</code>
     */
    ESM_SYNC_ROOMS(16, 2327),
    /**
     * <code>ESM_SYNC_ROOM_MEMBERS = 2328;</code>
     */
    ESM_SYNC_ROOM_MEMBERS(17, 2328),
    /**
     * <code>ESM_ROOM_CENSUS = 2329;</code>
     *
     * <pre>
     * 房间用户统计
     * </pre>
     */
    ESM_ROOM_CENSUS(18, 2329),
    /**
     * <code>ESM_ROOM_Detailed = 2336;</code>
     *
     * <pre>
     * 房间用户统计的详细
     * </pre>
     */
    ESM_ROOM_Detailed(19, 2336),
    /**
     * <code>ESM_ROOM_User_State = 2337;</code>
     *
     * <pre>
     * 房间用户状态
     * </pre>
     */
    ESM_ROOM_User_State(20, 2337),
    ;

    /**
     * <code>ESM_UNKNOW = 0;</code>
     */
    public static final int ESM_UNKNOW_VALUE = 0;
    /**
     * <code>ESM_REGIST = 2305;</code>
     *
     * <pre>
     * 注册
     * </pre>
     */
    public static final int ESM_REGIST_VALUE = 2305;
    /**
     * <code>ESM_USERSTATE = 2306;</code>
     */
    public static final int ESM_USERSTATE_VALUE = 2306;
    /**
     * <code>ESM_USERINOUTROOM = 2307;</code>
     */
    public static final int ESM_USERINOUTROOM_VALUE = 2307;
    /**
     * <code>ESM_ARR_USER_NOTIFICATION_NOTIFY = 2308;</code>
     */
    public static final int ESM_ARR_USER_NOTIFICATION_NOTIFY_VALUE = 2308;
    /**
     * <code>ESM_ARR_LIVE_CHAT_NOTIFY = 2309;</code>
     */
    public static final int ESM_ARR_LIVE_CHAT_NOTIFY_VALUE = 2309;
    /**
     * <code>ESM_DISSOLVE_ROOM = 2310;</code>
     */
    public static final int ESM_DISSOLVE_ROOM_VALUE = 2310;
    /**
     * <code>ESM_CHAT_QUEUE = 2311;</code>
     */
    public static final int ESM_CHAT_QUEUE_VALUE = 2311;
    /**
     * <code>ESM_ALL_ONLINE_CHAT_RECV_RES = 2312;</code>
     */
    public static final int ESM_ALL_ONLINE_CHAT_RECV_RES_VALUE = 2312;
    /**
     * <code>ESM_OFFLINE_MSG = 2320;</code>
     */
    public static final int ESM_OFFLINE_MSG_VALUE = 2320;
    /**
     * <code>ESM_GET_OFFLINE_MSG = 2321;</code>
     */
    public static final int ESM_GET_OFFLINE_MSG_VALUE = 2321;
    /**
     * <code>ESM_SEND_SPECIFY_GROUP_USER = 2322;</code>
     */
    public static final int ESM_SEND_SPECIFY_GROUP_USER_VALUE = 2322;
    /**
     * <code>ESM_ARR_USER_CHAT_RECV = 2323;</code>
     */
    public static final int ESM_ARR_USER_CHAT_RECV_VALUE = 2323;
    /**
     * <code>ESM_ARR_USER_CHAT_RECV_RES = 2324;</code>
     */
    public static final int ESM_ARR_USER_CHAT_RECV_RES_VALUE = 2324;
    /**
     * <code>ESM_ARR_OFFLINE_MSG = 2325;</code>
     */
    public static final int ESM_ARR_OFFLINE_MSG_VALUE = 2325;
    /**
     * <code>ESM_SYNC_MSG = 2326;</code>
     */
    public static final int ESM_SYNC_MSG_VALUE = 2326;
    /**
     * <code>ESM_SYNC_ROOMS = 2327;</code>
     */
    public static final int ESM_SYNC_ROOMS_VALUE = 2327;
    /**
     * <code>ESM_SYNC_ROOM_MEMBERS = 2328;</code>
     */
    public static final int ESM_SYNC_ROOM_MEMBERS_VALUE = 2328;
    /**
     * <code>ESM_ROOM_CENSUS = 2329;</code>
     *
     * <pre>
     * 房间用户统计
     * </pre>
     */
    public static final int ESM_ROOM_CENSUS_VALUE = 2329;
    /**
     * <code>ESM_ROOM_Detailed = 2336;</code>
     *
     * <pre>
     * 房间用户统计的详细
     * </pre>
     */
    public static final int ESM_ROOM_Detailed_VALUE = 2336;
    /**
     * <code>ESM_ROOM_User_State = 2337;</code>
     *
     * <pre>
     * 房间用户状态
     * </pre>
     */
    public static final int ESM_ROOM_User_State_VALUE = 2337;


    public final int getNumber() { return value; }

    public static E_SRV_MSGTYPE valueOf(int value) {
      switch (value) {
        case 0: return ESM_UNKNOW;
        case 2305: return ESM_REGIST;
        case 2306: return ESM_USERSTATE;
        case 2307: return ESM_USERINOUTROOM;
        case 2308: return ESM_ARR_USER_NOTIFICATION_NOTIFY;
        case 2309: return ESM_ARR_LIVE_CHAT_NOTIFY;
        case 2310: return ESM_DISSOLVE_ROOM;
        case 2311: return ESM_CHAT_QUEUE;
        case 2312: return ESM_ALL_ONLINE_CHAT_RECV_RES;
        case 2320: return ESM_OFFLINE_MSG;
        case 2321: return ESM_GET_OFFLINE_MSG;
        case 2322: return ESM_SEND_SPECIFY_GROUP_USER;
        case 2323: return ESM_ARR_USER_CHAT_RECV;
        case 2324: return ESM_ARR_USER_CHAT_RECV_RES;
        case 2325: return ESM_ARR_OFFLINE_MSG;
        case 2326: return ESM_SYNC_MSG;
        case 2327: return ESM_SYNC_ROOMS;
        case 2328: return ESM_SYNC_ROOM_MEMBERS;
        case 2329: return ESM_ROOM_CENSUS;
        case 2336: return ESM_ROOM_Detailed;
        case 2337: return ESM_ROOM_User_State;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<E_SRV_MSGTYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<E_SRV_MSGTYPE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<E_SRV_MSGTYPE>() {
            public E_SRV_MSGTYPE findValueByNumber(int number) {
              return E_SRV_MSGTYPE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return General.getDescriptor().getEnumTypes().get(12);
    }

    private static final E_SRV_MSGTYPE[] VALUES = values();

    public static E_SRV_MSGTYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private E_SRV_MSGTYPE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.pineapplelive.cn.entity.E_SRV_MSGTYPE)
  }

  public interface CommonAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.pineapplelive.cn.entity.CommonAck)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 tid = 1;</code>
     *
     * <pre>
     *&#47; 事务ID，由客户端填写，只是用来确认消息
     * </pre>
     */
    boolean hasTid();
    /**
     * <code>required uint64 tid = 1;</code>
     *
     * <pre>
     *&#47; 事务ID，由客户端填写，只是用来确认消息
     * </pre>
     */
    long getTid();

    /**
     * <code>required uint32 error = 2;</code>
     *
     * <pre>
     *&#47; ERT_SUCCESS为成功，其他为失败
     * </pre>
     */
    boolean hasError();
    /**
     * <code>required uint32 error = 2;</code>
     *
     * <pre>
     *&#47; ERT_SUCCESS为成功，其他为失败
     * </pre>
     */
    int getError();
  }
  /**
   * Protobuf type {@code com.pineapplelive.cn.entity.CommonAck}
   *
   * <pre>
   *&#47; &#64;brief 对消息的确认, 只代表服务器已经收到消息，不代表操作结果
   * CmdID=S2C_COMMON_ACK
   * </pre>
   */
  public static final class CommonAck extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.pineapplelive.cn.entity.CommonAck)
      CommonAckOrBuilder {
    // Use CommonAck.newBuilder() to construct.
    private CommonAck(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CommonAck(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CommonAck defaultInstance;
    public static CommonAck getDefaultInstance() {
      return defaultInstance;
    }

    public CommonAck getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CommonAck(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              tid_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              error_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return General.internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return General.internal_static_com_pineapplelive_cn_entity_CommonAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              CommonAck.class, Builder.class);
    }

    public static com.google.protobuf.Parser<CommonAck> PARSER =
        new com.google.protobuf.AbstractParser<CommonAck>() {
      public CommonAck parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommonAck(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<CommonAck> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TID_FIELD_NUMBER = 1;
    private long tid_;
    /**
     * <code>required uint64 tid = 1;</code>
     *
     * <pre>
     *&#47; 事务ID，由客户端填写，只是用来确认消息
     * </pre>
     */
    public boolean hasTid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 tid = 1;</code>
     *
     * <pre>
     *&#47; 事务ID，由客户端填写，只是用来确认消息
     * </pre>
     */
    public long getTid() {
      return tid_;
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private int error_;
    /**
     * <code>required uint32 error = 2;</code>
     *
     * <pre>
     *&#47; ERT_SUCCESS为成功，其他为失败
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 error = 2;</code>
     *
     * <pre>
     *&#47; ERT_SUCCESS为成功，其他为失败
     * </pre>
     */
    public int getError() {
      return error_;
    }

    private void initFields() {
      tid_ = 0L;
      error_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasError()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, tid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, error_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, tid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, error_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static CommonAck parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static CommonAck parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static CommonAck parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static CommonAck parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static CommonAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static CommonAck parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static CommonAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static CommonAck parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static CommonAck parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static CommonAck parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(CommonAck prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.pineapplelive.cn.entity.CommonAck}
     *
     * <pre>
     *&#47; &#64;brief 对消息的确认, 只代表服务器已经收到消息，不代表操作结果
     * CmdID=S2C_COMMON_ACK
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.pineapplelive.cn.entity.CommonAck)
        CommonAckOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return General.internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return General.internal_static_com_pineapplelive_cn_entity_CommonAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                CommonAck.class, Builder.class);
      }

      // Construct using com.pineapplelive.cn.entity.General.CommonAck.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        error_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return General.internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor;
      }

      public CommonAck getDefaultInstanceForType() {
        return CommonAck.getDefaultInstance();
      }

      public CommonAck build() {
        CommonAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public CommonAck buildPartial() {
        CommonAck result = new CommonAck(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tid_ = tid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof CommonAck) {
          return mergeFrom((CommonAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(CommonAck other) {
        if (other == CommonAck.getDefaultInstance()) return this;
        if (other.hasTid()) {
          setTid(other.getTid());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTid()) {
          
          return false;
        }
        if (!hasError()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        CommonAck parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (CommonAck) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long tid_ ;
      /**
       * <code>required uint64 tid = 1;</code>
       *
       * <pre>
       *&#47; 事务ID，由客户端填写，只是用来确认消息
       * </pre>
       */
      public boolean hasTid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 tid = 1;</code>
       *
       * <pre>
       *&#47; 事务ID，由客户端填写，只是用来确认消息
       * </pre>
       */
      public long getTid() {
        return tid_;
      }
      /**
       * <code>required uint64 tid = 1;</code>
       *
       * <pre>
       *&#47; 事务ID，由客户端填写，只是用来确认消息
       * </pre>
       */
      public Builder setTid(long value) {
        bitField0_ |= 0x00000001;
        tid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 tid = 1;</code>
       *
       * <pre>
       *&#47; 事务ID，由客户端填写，只是用来确认消息
       * </pre>
       */
      public Builder clearTid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tid_ = 0L;
        onChanged();
        return this;
      }

      private int error_ ;
      /**
       * <code>required uint32 error = 2;</code>
       *
       * <pre>
       *&#47; ERT_SUCCESS为成功，其他为失败
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 error = 2;</code>
       *
       * <pre>
       *&#47; ERT_SUCCESS为成功，其他为失败
       * </pre>
       */
      public int getError() {
        return error_;
      }
      /**
       * <code>required uint32 error = 2;</code>
       *
       * <pre>
       *&#47; ERT_SUCCESS为成功，其他为失败
       * </pre>
       */
      public Builder setError(int value) {
        bitField0_ |= 0x00000002;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 error = 2;</code>
       *
       * <pre>
       *&#47; ERT_SUCCESS为成功，其他为失败
       * </pre>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000002);
        error_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.pineapplelive.cn.entity.CommonAck)
    }

    static {
      defaultInstance = new CommonAck(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.pineapplelive.cn.entity.CommonAck)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_pineapplelive_cn_entity_CommonAck_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\rgeneral.proto\022\033com.pineapplelive.cn.en" +
      "tity\"\'\n\tCommonAck\022\013\n\003tid\030\001 \002(\004\022\r\n\005error\030" +
      "\002 \002(\r*;\n\nEPhoneType\022\017\n\013EPT_UNKNOWN\020\000\022\017\n\013" +
      "EPT_ANDROID\020\001\022\013\n\007EPT_IOS\020\002*L\n\017EEncryptio" +
      "nType\022\024\n\020EENCRYPT_UNKNOWN\020\000\022\021\n\rEENCRYPT_" +
      "NONE\020\001\022\020\n\014EENCRYPT_AES\020\002*\267\002\n\010EResType\022\017\n" +
      "\013ERT_UNKNOWN\020\000\022\017\n\013ERT_SUCCESS\020\001\022\014\n\010ERT_F" +
      "AIL\020\002\022\016\n\nERT_NOAUTH\020\003\022\017\n\013ERT_VER_LOW\020\004\022\017" +
      "\n\013ERT_VER_ERR\020\005\022\023\n\017ERT_ENCRYPT_ERR\020\006\022\013\n\007" +
      "ERT_ARG\020\007\022\021\n\rERT_PRIVILEGE\020d\022\017\n\013ERT_MAXI",
      "MUM\020e\022\016\n\nERT_REPEAT\020f\022\021\n\rERT_NOT_FOUND\020g" +
      "\022\020\n\014ERT_HAS_BEEN\020h\022\026\n\022ERT_SENSITIVE_WORD" +
      "\020i\022\026\n\022ERT_PARSE_PROTOBUF\020j\022\036\n\032ERT_DAILY_" +
      "NEW_CHAT_MAXIMUM\020k*W\n\nEErrorType\022\017\n\013EET_" +
      "UNKNOWN\020\000\022\021\n\rEET_USERERROR\020\001\022\020\n\014EET_BUFE" +
      "RROR\020\002\022\023\n\017EET_SYSTEMERROR\020\003*\205\001\n\tETextTyp" +
      "e\022\017\n\013ETT_UNKNOWN\020\000\022\014\n\010ETT_TEXT\020\001\022\r\n\tETT_" +
      "IMAGE\020\002\022\r\n\tETT_TIETU\020\003\022\r\n\tETT_YUYIN\020\004\022\014\n" +
      "\010ETT_DITU\020\005\022\014\n\010ETT_GIFT\020\006\022\020\n\014ETT_COMPOUN" +
      "D\020d*\220\001\n\tEChatType\022\017\n\013ECT_UNKNOWN\020\000\022\016\n\nEC",
      "T_NORMAL\020\001\022\016\n\nECT_SYSTEM\020\002\022\021\n\rECT_READST" +
      "ATE\020\003\022\017\n\013ECT_PRODUCT\020\004\022\r\n\tECT_GROUP\020\005\022\014\n" +
      "\010ECT_SNAP\020\006\022\021\n\rECT_OPENSTATE\020\007*4\n\010ESetTy" +
      "pe\022\016\n\nET_UNKNOWN\020\000\022\n\n\006ET_SET\020\001\022\014\n\010ET_CLE" +
      "AR\020\002*\265\006\n\004EC2S\022\017\n\013C2S_UNKNOWN\020\000\022\022\n\rC2S_HE" +
      "ARTBEAT\020\201\002\022\022\n\rC2S_LOGINUSER\020\202\002\022\023\n\016C2S_LO" +
      "GOUTUSER\020\203\002\022\021\n\014C2S_USERCHAT\020\201\004\022\023\n\016C2S_FO" +
      "RBIDUSER\020\202\004\022\025\n\020C2S_USERCHATRECV\020\203\004\022\030\n\023C2" +
      "S_USERCHATCONFIRM\020\204\004\022\032\n\025C2S_USERCHATREAD" +
      "STATE\020\205\004\022\030\n\023C2S_CREATE_TEAM_REQ\020\201\006\022\037\n\032C2",
      "S_GET_TEAM_BASE_INFO_REQ\020\202\006\022\035\n\030C2S_CHANG" +
      "E_TEAM_INFO_REQ\020\203\006\022\026\n\021C2S_JOIN_TEAM_REQ\020" +
      "\204\006\022\034\n\027C2S_ADMIN_JOIN_TEAM_RSP\020\205\006\022\027\n\022C2S_" +
      "ADMIN_TEAM_REQ\020\206\006\022\035\n\030C2S_GET_TEAM_MEMBER" +
      "S_REQ\020\207\006\022\035\n\030C2S_GET_JOINED_TEAMS_REQ\020\210\006\022" +
      "\032\n\025C2S_TEAM_CHAT_MSG_REQ\020\211\006\022\031\n\024C2S_GET_T" +
      "EAM_MSG_REQ\020\212\006\022\035\n\030C2S_CONFIRM_TEAM_MSG_R" +
      "EQ\020\213\006\022\035\n\030C2S_CHANGE_TEAM_CARD_REQ\020\214\006\022 \n\033" +
      "C2S_ADMIN_TEAM_RESOURCE_REQ\020\215\006\022\"\n\035C2S_CR" +
      "EATE_LIVE_CHAT_ROOM_REQ\020\201\n\022$\n\037C2S_DISSOL",
      "VE_LIVE_CHAT_ROOM_REQ\020\202\n\022!\n\034C2S_ENTER_LI" +
      "VE_CHAT_ROOM_REQ\020\203\n\022!\n\034C2S_LEAVE_LIVE_CH" +
      "AT_ROOM_REQ\020\204\n\022\026\n\021C2S_LIVE_CHAT_REQ\020\205\n\022\035" +
      "\n\030C2S_LIVE_CHAT_NOTIFY_RSP\020\206\n\022%\n C2S_LIV" +
      "E_NOTIFICATION_NOTIFY_RSP\020\207\n*\204\007\n\004ES2C\022\017\n" +
      "\013S2C_UNKNOWN\020\000\022\022\n\016S2C_COMMON_ACK\020\001\022\025\n\020S2" +
      "C_LOGINUSERRES\020\201\003\022\020\n\013S2C_INITRES\020\202\003\022\024\n\017S" +
      "2C_USERKICKRES\020\203\003\022\025\n\020S2C_MESSAGEERROR\020\204\003" +
      "\022\024\n\017S2C_USERCHATRES\020\201\005\022\030\n\023S2C_USERCHATCA" +
      "STRES\020\202\005\022\030\n\023S2C_USERCHATRECVRES\020\203\005\022\026\n\021S2",
      "C_FORBIDUSERRES\020\204\005\022\030\n\023S2C_USERCHATRECVEN" +
      "D\020\205\005\022\032\n\025S2C_USERCHATUPDATERES\020\206\005\022\030\n\023S2C_" +
      "CREATE_TEAM_RSP\020\201\014\022\037\n\032S2C_GET_TEAM_BASE_" +
      "INFO_RSP\020\202\014\022\036\n\031S2C_TEAM_INFO_CHANGED_NTY" +
      "\020\203\014\022\026\n\021S2C_JOIN_TEAM_RSP\020\204\014\022\034\n\027S2C_ADMIN" +
      "_JOIN_TEAM_REQ\020\205\014\022\031\n\024S2C_TEAM_ADMINED_NT" +
      "Y\020\206\014\022\035\n\030S2C_GET_TEAM_MEMBERS_RSP\020\207\014\022\035\n\030S" +
      "2C_GET_JOINED_TEAMS_RSP\020\210\014\022\025\n\020S2C_TEAM_M" +
      "SG_NTY\020\211\014\022\033\n\026S2C_PUSH_TEAM_CHAT_MSG\020\212\014\022\036" +
      "\n\031S2C_TEAM_CARD_CHANGED_NTY\020\213\014\022 \n\033S2C_AD",
      "MIN_TEAM_RESOURCE_RSP\020\214\014\022\"\n\035S2C_CREATE_L" +
      "IVE_CHAT_ROOM_RSP\020\201\020\022$\n\037S2C_DISSOLVE_LIV" +
      "E_CHAT_ROOM_RSP\020\202\020\022!\n\034S2C_ENTER_LIVE_CHA" +
      "T_ROOM_RSP\020\203\020\022!\n\034S2C_LEAVE_LIVE_CHAT_ROO" +
      "M_RSP\020\204\020\022\026\n\021S2C_LIVE_CHAT_RSP\020\205\020\022\031\n\024S2C_" +
      "LIVE_CHAT_NOTIFY\020\206\020\022!\n\034S2C_LIVE_NOTIFICA" +
      "TION_NOTIFY\020\207\020\022#\n\036RM2R_CREATE_LIVE_CHAT_" +
      "ROOM_RSP\020\210\020*~\n\nE_SRV_TYPE\022\016\n\nEST_UNKNOW\020" +
      "\000\022\014\n\010EST_GATE\020\001\022\020\n\014EST_VALIDATE\020\002\022\014\n\010EST" +
      "_ROOM\020\003\022\017\n\013EST_DATAOPT\020\004\022\017\n\013EST_ROOMMGE\020",
      "\005\022\020\n\014EST_MSGQUEUE\020\006*S\n\014E_SRV_REGIST\022\016\n\nE" +
      "SR_UNKNOW\020\000\022\016\n\nESR_REGIST\020\001\022\020\n\014ESR_REGIS" +
      "TOK\020\002\022\021\n\rESR_REGISTERR\020\003*/\n\014E_USER_STATE" +
      "\022\016\n\nEUS_USERIN\020\000\022\017\n\013EUS_USEROUT\020\001*\250\004\n\rE_" +
      "SRV_MSGTYPE\022\016\n\nESM_UNKNOW\020\000\022\017\n\nESM_REGIS" +
      "T\020\201\022\022\022\n\rESM_USERSTATE\020\202\022\022\026\n\021ESM_USERINOU" +
      "TROOM\020\203\022\022%\n ESM_ARR_USER_NOTIFICATION_NO" +
      "TIFY\020\204\022\022\035\n\030ESM_ARR_LIVE_CHAT_NOTIFY\020\205\022\022\026" +
      "\n\021ESM_DISSOLVE_ROOM\020\206\022\022\023\n\016ESM_CHAT_QUEUE" +
      "\020\207\022\022!\n\034ESM_ALL_ONLINE_CHAT_RECV_RES\020\210\022\022\024",
      "\n\017ESM_OFFLINE_MSG\020\220\022\022\030\n\023ESM_GET_OFFLINE_" +
      "MSG\020\221\022\022 \n\033ESM_SEND_SPECIFY_GROUP_USER\020\222\022" +
      "\022\033\n\026ESM_ARR_USER_CHAT_RECV\020\223\022\022\037\n\032ESM_ARR" +
      "_USER_CHAT_RECV_RES\020\224\022\022\030\n\023ESM_ARR_OFFLIN" +
      "E_MSG\020\225\022\022\021\n\014ESM_SYNC_MSG\020\226\022\022\023\n\016ESM_SYNC_" +
      "ROOMS\020\227\022\022\032\n\025ESM_SYNC_ROOM_MEMBERS\020\230\022\022\024\n\017" +
      "ESM_ROOM_CENSUS\020\231\022\022\026\n\021ESM_ROOM_Detailed\020" +
      "\240\022\022\030\n\023ESM_ROOM_User_State\020\241\022B&\n\033com.pine" +
      "applelive.cn.entityB\007General"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_pineapplelive_cn_entity_CommonAck_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_pineapplelive_cn_entity_CommonAck_descriptor,
        new String[] { "Tid", "Error", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
