// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushStreamPKByProto.proto

#ifndef PROTOBUF_PushStreamPKByProto_2eproto__INCLUDED
#define PROTOBUF_PushStreamPKByProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Entity.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PushStreamPKByProto_2eproto();
void protobuf_InitDefaults_PushStreamPKByProto_2eproto();
void protobuf_AssignDesc_PushStreamPKByProto_2eproto();
void protobuf_ShutdownFile_PushStreamPKByProto_2eproto();

class pushPKStream;

// ===================================================================

class pushPKStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.pushPKStream) */ {
 public:
  pushPKStream();
  virtual ~pushPKStream();

  pushPKStream(const pushPKStream& from);

  inline pushPKStream& operator=(const pushPKStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pushPKStream& default_instance();

  static const pushPKStream* internal_default_instance();

  void Swap(pushPKStream* other);

  // implements Message ----------------------------------------------

  inline pushPKStream* New() const { return New(NULL); }

  pushPKStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pushPKStream& from);
  void MergeFrom(const pushPKStream& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(pushPKStream* other);
  void UnsafeMergeFrom(const pushPKStream& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tagAnchorId = 1;
  void clear_taganchorid();
  static const int kTagAnchorIdFieldNumber = 1;
  const ::std::string& taganchorid() const;
  void set_taganchorid(const ::std::string& value);
  void set_taganchorid(const char* value);
  void set_taganchorid(const char* value, size_t size);
  ::std::string* mutable_taganchorid();
  ::std::string* release_taganchorid();
  void set_allocated_taganchorid(::std::string* taganchorid);

  // optional string anchorId = 2;
  void clear_anchorid();
  static const int kAnchorIdFieldNumber = 2;
  const ::std::string& anchorid() const;
  void set_anchorid(const ::std::string& value);
  void set_anchorid(const char* value);
  void set_anchorid(const char* value, size_t size);
  ::std::string* mutable_anchorid();
  ::std::string* release_anchorid();
  void set_allocated_anchorid(::std::string* anchorid);

  // optional string mergeStreamUrl = 3;
  void clear_mergestreamurl();
  static const int kMergeStreamUrlFieldNumber = 3;
  const ::std::string& mergestreamurl() const;
  void set_mergestreamurl(const ::std::string& value);
  void set_mergestreamurl(const char* value);
  void set_mergestreamurl(const char* value, size_t size);
  ::std::string* mutable_mergestreamurl();
  ::std::string* release_mergestreamurl();
  void set_allocated_mergestreamurl(::std::string* mergestreamurl);

  // optional string PKId = 4;
  void clear_pkid();
  static const int kPKIdFieldNumber = 4;
  const ::std::string& pkid() const;
  void set_pkid(const ::std::string& value);
  void set_pkid(const char* value);
  void set_pkid(const char* value, size_t size);
  ::std::string* mutable_pkid();
  ::std::string* release_pkid();
  void set_allocated_pkid(::std::string* pkid);

  // optional string tagRoomId = 5;
  void clear_tagroomid();
  static const int kTagRoomIdFieldNumber = 5;
  const ::std::string& tagroomid() const;
  void set_tagroomid(const ::std::string& value);
  void set_tagroomid(const char* value);
  void set_tagroomid(const char* value, size_t size);
  ::std::string* mutable_tagroomid();
  ::std::string* release_tagroomid();
  void set_allocated_tagroomid(::std::string* tagroomid);

  // optional string tagStreamId = 6;
  void clear_tagstreamid();
  static const int kTagStreamIdFieldNumber = 6;
  const ::std::string& tagstreamid() const;
  void set_tagstreamid(const ::std::string& value);
  void set_tagstreamid(const char* value);
  void set_tagstreamid(const char* value, size_t size);
  ::std::string* mutable_tagstreamid();
  ::std::string* release_tagstreamid();
  void set_allocated_tagstreamid(::std::string* tagstreamid);

  // @@protoc_insertion_point(class_scope:proto.pushPKStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr taganchorid_;
  ::google::protobuf::internal::ArenaStringPtr anchorid_;
  ::google::protobuf::internal::ArenaStringPtr mergestreamurl_;
  ::google::protobuf::internal::ArenaStringPtr pkid_;
  ::google::protobuf::internal::ArenaStringPtr tagroomid_;
  ::google::protobuf::internal::ArenaStringPtr tagstreamid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_PushStreamPKByProto_2eproto_impl();
  friend void  protobuf_AddDesc_PushStreamPKByProto_2eproto_impl();
  friend void protobuf_AssignDesc_PushStreamPKByProto_2eproto();
  friend void protobuf_ShutdownFile_PushStreamPKByProto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<pushPKStream> pushPKStream_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// pushPKStream

// optional string tagAnchorId = 1;
inline void pushPKStream::clear_taganchorid() {
  taganchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::taganchorid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagAnchorId)
  return taganchorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_taganchorid(const ::std::string& value) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagAnchorId)
}
inline void pushPKStream::set_taganchorid(const char* value) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagAnchorId)
}
inline void pushPKStream::set_taganchorid(const char* value, size_t size) {
  
  taganchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagAnchorId)
}
inline ::std::string* pushPKStream::mutable_taganchorid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagAnchorId)
  return taganchorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_taganchorid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagAnchorId)
  
  return taganchorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_taganchorid(::std::string* taganchorid) {
  if (taganchorid != NULL) {
    
  } else {
    
  }
  taganchorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taganchorid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagAnchorId)
}

// optional string anchorId = 2;
inline void pushPKStream::clear_anchorid() {
  anchorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::anchorid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.anchorId)
  return anchorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_anchorid(const ::std::string& value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.anchorId)
}
inline void pushPKStream::set_anchorid(const char* value) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.anchorId)
}
inline void pushPKStream::set_anchorid(const char* value, size_t size) {
  
  anchorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.anchorId)
}
inline ::std::string* pushPKStream::mutable_anchorid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.anchorId)
  return anchorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_anchorid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.anchorId)
  
  return anchorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_anchorid(::std::string* anchorid) {
  if (anchorid != NULL) {
    
  } else {
    
  }
  anchorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchorid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.anchorId)
}

// optional string mergeStreamUrl = 3;
inline void pushPKStream::clear_mergestreamurl() {
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::mergestreamurl() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.mergeStreamUrl)
  return mergestreamurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_mergestreamurl(const ::std::string& value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.mergeStreamUrl)
}
inline void pushPKStream::set_mergestreamurl(const char* value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.mergeStreamUrl)
}
inline void pushPKStream::set_mergestreamurl(const char* value, size_t size) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.mergeStreamUrl)
}
inline ::std::string* pushPKStream::mutable_mergestreamurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.mergeStreamUrl)
  return mergestreamurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_mergestreamurl() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.mergeStreamUrl)
  
  return mergestreamurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_mergestreamurl(::std::string* mergestreamurl) {
  if (mergestreamurl != NULL) {
    
  } else {
    
  }
  mergestreamurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mergestreamurl);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.mergeStreamUrl)
}

// optional string PKId = 4;
inline void pushPKStream::clear_pkid() {
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::pkid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.PKId)
  return pkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_pkid(const ::std::string& value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.PKId)
}
inline void pushPKStream::set_pkid(const char* value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.PKId)
}
inline void pushPKStream::set_pkid(const char* value, size_t size) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.PKId)
}
inline ::std::string* pushPKStream::mutable_pkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.PKId)
  return pkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_pkid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.PKId)
  
  return pkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_pkid(::std::string* pkid) {
  if (pkid != NULL) {
    
  } else {
    
  }
  pkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.PKId)
}

// optional string tagRoomId = 5;
inline void pushPKStream::clear_tagroomid() {
  tagroomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::tagroomid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagRoomId)
  return tagroomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_tagroomid(const ::std::string& value) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagRoomId)
}
inline void pushPKStream::set_tagroomid(const char* value) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagRoomId)
}
inline void pushPKStream::set_tagroomid(const char* value, size_t size) {
  
  tagroomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagRoomId)
}
inline ::std::string* pushPKStream::mutable_tagroomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagRoomId)
  return tagroomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_tagroomid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagRoomId)
  
  return tagroomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_tagroomid(::std::string* tagroomid) {
  if (tagroomid != NULL) {
    
  } else {
    
  }
  tagroomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagroomid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagRoomId)
}

// optional string tagStreamId = 6;
inline void pushPKStream::clear_tagstreamid() {
  tagstreamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pushPKStream::tagstreamid() const {
  // @@protoc_insertion_point(field_get:proto.pushPKStream.tagStreamId)
  return tagstreamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_tagstreamid(const ::std::string& value) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushPKStream.tagStreamId)
}
inline void pushPKStream::set_tagstreamid(const char* value) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushPKStream.tagStreamId)
}
inline void pushPKStream::set_tagstreamid(const char* value, size_t size) {
  
  tagstreamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushPKStream.tagStreamId)
}
inline ::std::string* pushPKStream::mutable_tagstreamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushPKStream.tagStreamId)
  return tagstreamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pushPKStream::release_tagstreamid() {
  // @@protoc_insertion_point(field_release:proto.pushPKStream.tagStreamId)
  
  return tagstreamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pushPKStream::set_allocated_tagstreamid(::std::string* tagstreamid) {
  if (tagstreamid != NULL) {
    
  } else {
    
  }
  tagstreamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagstreamid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushPKStream.tagStreamId)
}

inline const pushPKStream* pushPKStream::internal_default_instance() {
  return &pushPKStream_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PushStreamPKByProto_2eproto__INCLUDED
