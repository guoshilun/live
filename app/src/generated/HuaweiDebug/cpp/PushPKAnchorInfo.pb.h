// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushPKAnchorInfo.proto

#ifndef PROTOBUF_PushPKAnchorInfo_2eproto__INCLUDED
#define PROTOBUF_PushPKAnchorInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Entity.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PushPKAnchorInfo_2eproto();
void protobuf_InitDefaults_PushPKAnchorInfo_2eproto();
void protobuf_AssignDesc_PushPKAnchorInfo_2eproto();
void protobuf_ShutdownFile_PushPKAnchorInfo_2eproto();

class PushPKAnchorInfoMessage;

// ===================================================================

class PushPKAnchorInfoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PushPKAnchorInfoMessage) */ {
 public:
  PushPKAnchorInfoMessage();
  virtual ~PushPKAnchorInfoMessage();

  PushPKAnchorInfoMessage(const PushPKAnchorInfoMessage& from);

  inline PushPKAnchorInfoMessage& operator=(const PushPKAnchorInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushPKAnchorInfoMessage& default_instance();

  static const PushPKAnchorInfoMessage* internal_default_instance();

  void Swap(PushPKAnchorInfoMessage* other);

  // implements Message ----------------------------------------------

  inline PushPKAnchorInfoMessage* New() const { return New(NULL); }

  PushPKAnchorInfoMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushPKAnchorInfoMessage& from);
  void MergeFrom(const PushPKAnchorInfoMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushPKAnchorInfoMessage* other);
  void UnsafeMergeFrom(const PushPKAnchorInfoMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string picture = 3;
  void clear_picture();
  static const int kPictureFieldNumber = 3;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // optional int32 anchorGrade = 4;
  void clear_anchorgrade();
  static const int kAnchorGradeFieldNumber = 4;
  ::google::protobuf::int32 anchorgrade() const;
  void set_anchorgrade(::google::protobuf::int32 value);

  // optional string roomId = 5;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 5;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional string mergeStreamUrl = 6;
  void clear_mergestreamurl();
  static const int kMergeStreamUrlFieldNumber = 6;
  const ::std::string& mergestreamurl() const;
  void set_mergestreamurl(const ::std::string& value);
  void set_mergestreamurl(const char* value);
  void set_mergestreamurl(const char* value, size_t size);
  ::std::string* mutable_mergestreamurl();
  ::std::string* release_mergestreamurl();
  void set_allocated_mergestreamurl(::std::string* mergestreamurl);

  // optional string leftPkMaxVictory = 7;
  void clear_leftpkmaxvictory();
  static const int kLeftPkMaxVictoryFieldNumber = 7;
  const ::std::string& leftpkmaxvictory() const;
  void set_leftpkmaxvictory(const ::std::string& value);
  void set_leftpkmaxvictory(const char* value);
  void set_leftpkmaxvictory(const char* value, size_t size);
  ::std::string* mutable_leftpkmaxvictory();
  ::std::string* release_leftpkmaxvictory();
  void set_allocated_leftpkmaxvictory(::std::string* leftpkmaxvictory);

  // optional string rightPkMaxVictory = 8;
  void clear_rightpkmaxvictory();
  static const int kRightPkMaxVictoryFieldNumber = 8;
  const ::std::string& rightpkmaxvictory() const;
  void set_rightpkmaxvictory(const ::std::string& value);
  void set_rightpkmaxvictory(const char* value);
  void set_rightpkmaxvictory(const char* value, size_t size);
  ::std::string* mutable_rightpkmaxvictory();
  ::std::string* release_rightpkmaxvictory();
  void set_allocated_rightpkmaxvictory(::std::string* rightpkmaxvictory);

  // @@protoc_insertion_point(class_scope:proto.PushPKAnchorInfoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr roomid_;
  ::google::protobuf::internal::ArenaStringPtr mergestreamurl_;
  ::google::protobuf::internal::ArenaStringPtr leftpkmaxvictory_;
  ::google::protobuf::internal::ArenaStringPtr rightpkmaxvictory_;
  ::google::protobuf::int32 anchorgrade_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_PushPKAnchorInfo_2eproto_impl();
  friend void  protobuf_AddDesc_PushPKAnchorInfo_2eproto_impl();
  friend void protobuf_AssignDesc_PushPKAnchorInfo_2eproto();
  friend void protobuf_ShutdownFile_PushPKAnchorInfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PushPKAnchorInfoMessage> PushPKAnchorInfoMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PushPKAnchorInfoMessage

// optional string userId = 1;
inline void PushPKAnchorInfoMessage::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::userid() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.userId)
}
inline void PushPKAnchorInfoMessage::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.userId)
}
inline void PushPKAnchorInfoMessage::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.userId)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_userid() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.userId)
}

// optional string nickname = 2;
inline void PushPKAnchorInfoMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::nickname() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.nickname)
}
inline void PushPKAnchorInfoMessage::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.nickname)
}
inline void PushPKAnchorInfoMessage::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.nickname)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.nickname)
}

// optional string picture = 3;
inline void PushPKAnchorInfoMessage::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::picture() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.picture)
}
inline void PushPKAnchorInfoMessage::set_picture(const char* value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.picture)
}
inline void PushPKAnchorInfoMessage::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.picture)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_picture() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.picture)
}

// optional int32 anchorGrade = 4;
inline void PushPKAnchorInfoMessage::clear_anchorgrade() {
  anchorgrade_ = 0;
}
inline ::google::protobuf::int32 PushPKAnchorInfoMessage::anchorgrade() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.anchorGrade)
  return anchorgrade_;
}
inline void PushPKAnchorInfoMessage::set_anchorgrade(::google::protobuf::int32 value) {
  
  anchorgrade_ = value;
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.anchorGrade)
}

// optional string roomId = 5;
inline void PushPKAnchorInfoMessage::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::roomid() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.roomId)
}
inline void PushPKAnchorInfoMessage::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.roomId)
}
inline void PushPKAnchorInfoMessage::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.roomId)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.roomId)
}

// optional string mergeStreamUrl = 6;
inline void PushPKAnchorInfoMessage::clear_mergestreamurl() {
  mergestreamurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::mergestreamurl() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  return mergestreamurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_mergestreamurl(const ::std::string& value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
inline void PushPKAnchorInfoMessage::set_mergestreamurl(const char* value) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
inline void PushPKAnchorInfoMessage::set_mergestreamurl(const char* value, size_t size) {
  
  mergestreamurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_mergestreamurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  return mergestreamurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_mergestreamurl() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
  
  return mergestreamurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_mergestreamurl(::std::string* mergestreamurl) {
  if (mergestreamurl != NULL) {
    
  } else {
    
  }
  mergestreamurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mergestreamurl);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.mergeStreamUrl)
}

// optional string leftPkMaxVictory = 7;
inline void PushPKAnchorInfoMessage::clear_leftpkmaxvictory() {
  leftpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::leftpkmaxvictory() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  return leftpkmaxvictory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const ::std::string& value) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
inline void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const char* value) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
inline void PushPKAnchorInfoMessage::set_leftpkmaxvictory(const char* value, size_t size) {
  
  leftpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_leftpkmaxvictory() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  return leftpkmaxvictory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_leftpkmaxvictory() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
  
  return leftpkmaxvictory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_leftpkmaxvictory(::std::string* leftpkmaxvictory) {
  if (leftpkmaxvictory != NULL) {
    
  } else {
    
  }
  leftpkmaxvictory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leftpkmaxvictory);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.leftPkMaxVictory)
}

// optional string rightPkMaxVictory = 8;
inline void PushPKAnchorInfoMessage::clear_rightpkmaxvictory() {
  rightpkmaxvictory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushPKAnchorInfoMessage::rightpkmaxvictory() const {
  // @@protoc_insertion_point(field_get:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  return rightpkmaxvictory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const ::std::string& value) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
inline void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const char* value) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
inline void PushPKAnchorInfoMessage::set_rightpkmaxvictory(const char* value, size_t size) {
  
  rightpkmaxvictory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}
inline ::std::string* PushPKAnchorInfoMessage::mutable_rightpkmaxvictory() {
  
  // @@protoc_insertion_point(field_mutable:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  return rightpkmaxvictory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushPKAnchorInfoMessage::release_rightpkmaxvictory() {
  // @@protoc_insertion_point(field_release:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
  
  return rightpkmaxvictory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushPKAnchorInfoMessage::set_allocated_rightpkmaxvictory(::std::string* rightpkmaxvictory) {
  if (rightpkmaxvictory != NULL) {
    
  } else {
    
  }
  rightpkmaxvictory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rightpkmaxvictory);
  // @@protoc_insertion_point(field_set_allocated:proto.PushPKAnchorInfoMessage.rightPkMaxVictory)
}

inline const PushPKAnchorInfoMessage* PushPKAnchorInfoMessage::internal_default_instance() {
  return &PushPKAnchorInfoMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PushPKAnchorInfo_2eproto__INCLUDED
