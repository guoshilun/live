// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushLinkByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushLinkByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* pushLonk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pushLonk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushLinkByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushLinkByProto_2eproto() {
  protobuf_AddDesc_PushLinkByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushLinkByProto.proto");
  GOOGLE_CHECK(file != NULL);
  pushLonk_descriptor_ = file->message_type(0);
  static const int pushLonk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, usergrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, streamid_),
  };
  pushLonk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pushLonk_descriptor_,
      pushLonk::internal_default_instance(),
      pushLonk_offsets_,
      -1,
      -1,
      -1,
      sizeof(pushLonk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pushLonk, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushLinkByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pushLonk_descriptor_, pushLonk::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushLinkByProto_2eproto() {
  pushLonk_default_instance_.Shutdown();
  delete pushLonk_reflection_;
}

void protobuf_InitDefaults_PushLinkByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  pushLonk_default_instance_.DefaultConstruct();
  pushLonk_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushLinkByProto_2eproto_once_);
void protobuf_InitDefaults_PushLinkByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushLinkByProto_2eproto_once_,
                 &protobuf_InitDefaults_PushLinkByProto_2eproto_impl);
}
void protobuf_AddDesc_PushLinkByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushLinkByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PushLinkByProto.proto\022\005proto\032\014Entity.p"
    "roto\"p\n\010pushLonk\022\016\n\006userId\030\001 \001(\t\022\017\n\007pict"
    "ure\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\021\n\tuserGrade"
    "\030\004 \001(\005\022\014\n\004time\030\005 \001(\005\022\020\n\010streamId\030\006 \001(\tB "
    "\n\036com.sencorsta.ids.common.protob\006proto3", 200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushLinkByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushLinkByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushLinkByProto_2eproto_once_);
void protobuf_AddDesc_PushLinkByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushLinkByProto_2eproto_once_,
                 &protobuf_AddDesc_PushLinkByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushLinkByProto_2eproto {
  StaticDescriptorInitializer_PushLinkByProto_2eproto() {
    protobuf_AddDesc_PushLinkByProto_2eproto();
  }
} static_descriptor_initializer_PushLinkByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pushLonk::kUserIdFieldNumber;
const int pushLonk::kPictureFieldNumber;
const int pushLonk::kNicknameFieldNumber;
const int pushLonk::kUserGradeFieldNumber;
const int pushLonk::kTimeFieldNumber;
const int pushLonk::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pushLonk::pushLonk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushLinkByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.pushLonk)
}

void pushLonk::InitAsDefaultInstance() {
}

pushLonk::pushLonk(const pushLonk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.pushLonk)
}

void pushLonk::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usergrade_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&usergrade_) + sizeof(time_));
  _cached_size_ = 0;
}

pushLonk::~pushLonk() {
  // @@protoc_insertion_point(destructor:proto.pushLonk)
  SharedDtor();
}

void pushLonk::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pushLonk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pushLonk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pushLonk_descriptor_;
}

const pushLonk& pushLonk::default_instance() {
  protobuf_InitDefaults_PushLinkByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<pushLonk> pushLonk_default_instance_;

pushLonk* pushLonk::New(::google::protobuf::Arena* arena) const {
  pushLonk* n = new pushLonk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pushLonk::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.pushLonk)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pushLonk, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pushLonk*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(usergrade_, time_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool pushLonk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.pushLonk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushLonk.userId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_picture;
        break;
      }

      // optional string picture = 2;
      case 2: {
        if (tag == 18) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->picture().data(), this->picture().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushLonk.picture"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushLonk.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userGrade;
        break;
      }

      // optional int32 userGrade = 4;
      case 4: {
        if (tag == 32) {
         parse_userGrade:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usergrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_streamId;
        break;
      }

      // optional string streamId = 6;
      case 6: {
        if (tag == 50) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.pushLonk.streamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.pushLonk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.pushLonk)
  return false;
#undef DO_
}

void pushLonk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.pushLonk)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string picture = 2;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.picture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->picture(), output);
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int32 userGrade = 4;
  if (this->usergrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usergrade(), output);
  }

  // optional int32 time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional string streamId = 6;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->streamid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.pushLonk)
}

::google::protobuf::uint8* pushLonk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.pushLonk)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string picture = 2;
  if (this->picture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.picture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->picture(), target);
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 userGrade = 4;
  if (this->usergrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usergrade(), target);
  }

  // optional int32 time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional string streamId = 6;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.pushLonk.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->streamid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.pushLonk)
  return target;
}

size_t pushLonk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.pushLonk)
  size_t total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string picture = 2;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->picture());
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional int32 userGrade = 4;
  if (this->usergrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usergrade());
  }

  // optional int32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // optional string streamId = 6;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pushLonk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.pushLonk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pushLonk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pushLonk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.pushLonk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.pushLonk)
    UnsafeMergeFrom(*source);
  }
}

void pushLonk::MergeFrom(const pushLonk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.pushLonk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void pushLonk::UnsafeMergeFrom(const pushLonk& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.picture().size() > 0) {

    picture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.usergrade() != 0) {
    set_usergrade(from.usergrade());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.streamid().size() > 0) {

    streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
  }
}

void pushLonk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.pushLonk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pushLonk::CopyFrom(const pushLonk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.pushLonk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool pushLonk::IsInitialized() const {

  return true;
}

void pushLonk::Swap(pushLonk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pushLonk::InternalSwap(pushLonk* other) {
  userid_.Swap(&other->userid_);
  picture_.Swap(&other->picture_);
  nickname_.Swap(&other->nickname_);
  std::swap(usergrade_, other->usergrade_);
  std::swap(time_, other->time_);
  streamid_.Swap(&other->streamid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pushLonk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pushLonk_descriptor_;
  metadata.reflection = pushLonk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pushLonk

// optional string userId = 1;
void pushLonk::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushLonk::userid() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushLonk.userId)
}
void pushLonk::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushLonk.userId)
}
void pushLonk::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushLonk.userId)
}
::std::string* pushLonk::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushLonk.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushLonk::release_userid() {
  // @@protoc_insertion_point(field_release:proto.pushLonk.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushLonk.userId)
}

// optional string picture = 2;
void pushLonk::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushLonk::picture() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushLonk.picture)
}
void pushLonk::set_picture(const char* value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushLonk.picture)
}
void pushLonk::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushLonk.picture)
}
::std::string* pushLonk::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushLonk.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushLonk::release_picture() {
  // @@protoc_insertion_point(field_release:proto.pushLonk.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:proto.pushLonk.picture)
}

// optional string nickname = 3;
void pushLonk::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushLonk::nickname() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushLonk.nickname)
}
void pushLonk::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushLonk.nickname)
}
void pushLonk::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushLonk.nickname)
}
::std::string* pushLonk::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushLonk.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushLonk::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.pushLonk.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.pushLonk.nickname)
}

// optional int32 userGrade = 4;
void pushLonk::clear_usergrade() {
  usergrade_ = 0;
}
::google::protobuf::int32 pushLonk::usergrade() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.userGrade)
  return usergrade_;
}
void pushLonk::set_usergrade(::google::protobuf::int32 value) {
  
  usergrade_ = value;
  // @@protoc_insertion_point(field_set:proto.pushLonk.userGrade)
}

// optional int32 time = 5;
void pushLonk::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 pushLonk::time() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.time)
  return time_;
}
void pushLonk::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.pushLonk.time)
}

// optional string streamId = 6;
void pushLonk::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pushLonk::streamid() const {
  // @@protoc_insertion_point(field_get:proto.pushLonk.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.pushLonk.streamId)
}
void pushLonk::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.pushLonk.streamId)
}
void pushLonk::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.pushLonk.streamId)
}
::std::string* pushLonk::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.pushLonk.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pushLonk::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.pushLonk.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pushLonk::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.pushLonk.streamId)
}

inline const pushLonk* pushLonk::internal_default_instance() {
  return &pushLonk_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
