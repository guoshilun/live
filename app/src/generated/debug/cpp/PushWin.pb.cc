// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PushWin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PushWin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* PushWinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushWinMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PushWin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PushWin_2eproto() {
  protobuf_AddDesc_PushWin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PushWin.proto");
  GOOGLE_CHECK(file != NULL);
  PushWinMessage_descriptor_ = file->message_type(0);
  static const int PushWinMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinMessage, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinMessage, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinMessage, money_),
  };
  PushWinMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PushWinMessage_descriptor_,
      PushWinMessage::internal_default_instance(),
      PushWinMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(PushWinMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PushWin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PushWinMessage_descriptor_, PushWinMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PushWin_2eproto() {
  PushWinMessage_default_instance_.Shutdown();
  delete PushWinMessage_reflection_;
}

void protobuf_InitDefaults_PushWin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  PushWinMessage_default_instance_.DefaultConstruct();
  PushWinMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PushWin_2eproto_once_);
void protobuf_InitDefaults_PushWin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PushWin_2eproto_once_,
                 &protobuf_InitDefaults_PushWin_2eproto_impl);
}
void protobuf_AddDesc_PushWin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PushWin_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPushWin.proto\022\005proto\032\014Entity.proto\"G\n\016"
    "PushWinMessage\022\013\n\003win\030\001 \001(\005\022\013\n\003num\030\002 \001(\005"
    "\022\014\n\004type\030\003 \001(\005\022\r\n\005money\030\004 \001(\005B \n\036com.sen"
    "corsta.ids.common.protob\006proto3", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PushWin.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PushWin_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PushWin_2eproto_once_);
void protobuf_AddDesc_PushWin_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PushWin_2eproto_once_,
                 &protobuf_AddDesc_PushWin_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PushWin_2eproto {
  StaticDescriptorInitializer_PushWin_2eproto() {
    protobuf_AddDesc_PushWin_2eproto();
  }
} static_descriptor_initializer_PushWin_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushWinMessage::kWinFieldNumber;
const int PushWinMessage::kNumFieldNumber;
const int PushWinMessage::kTypeFieldNumber;
const int PushWinMessage::kMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushWinMessage::PushWinMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PushWin_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PushWinMessage)
}

void PushWinMessage::InitAsDefaultInstance() {
}

PushWinMessage::PushWinMessage(const PushWinMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.PushWinMessage)
}

void PushWinMessage::SharedCtor() {
  ::memset(&win_, 0, reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&win_) + sizeof(money_));
  _cached_size_ = 0;
}

PushWinMessage::~PushWinMessage() {
  // @@protoc_insertion_point(destructor:proto.PushWinMessage)
  SharedDtor();
}

void PushWinMessage::SharedDtor() {
}

void PushWinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushWinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushWinMessage_descriptor_;
}

const PushWinMessage& PushWinMessage::default_instance() {
  protobuf_InitDefaults_PushWin_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PushWinMessage> PushWinMessage_default_instance_;

PushWinMessage* PushWinMessage::New(::google::protobuf::Arena* arena) const {
  PushWinMessage* n = new PushWinMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushWinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PushWinMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PushWinMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PushWinMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(win_, money_);

#undef ZR_HELPER_
#undef ZR_

}

bool PushWinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PushWinMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 win = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PushWinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PushWinMessage)
  return false;
#undef DO_
}

void PushWinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PushWinMessage)
  // optional int32 win = 1;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

  // optional int32 num = 2;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 money = 4;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PushWinMessage)
}

::google::protobuf::uint8* PushWinMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PushWinMessage)
  // optional int32 win = 1;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win(), target);
  }

  // optional int32 num = 2;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 money = 4;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.PushWinMessage)
  return target;
}

size_t PushWinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PushWinMessage)
  size_t total_size = 0;

  // optional int32 win = 1;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  // optional int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  // optional int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 money = 4;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushWinMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PushWinMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PushWinMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushWinMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PushWinMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PushWinMessage)
    UnsafeMergeFrom(*source);
  }
}

void PushWinMessage::MergeFrom(const PushWinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PushWinMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PushWinMessage::UnsafeMergeFrom(const PushWinMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
}

void PushWinMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PushWinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushWinMessage::CopyFrom(const PushWinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PushWinMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PushWinMessage::IsInitialized() const {

  return true;
}

void PushWinMessage::Swap(PushWinMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushWinMessage::InternalSwap(PushWinMessage* other) {
  std::swap(win_, other->win_);
  std::swap(num_, other->num_);
  std::swap(type_, other->type_);
  std::swap(money_, other->money_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushWinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushWinMessage_descriptor_;
  metadata.reflection = PushWinMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushWinMessage

// optional int32 win = 1;
void PushWinMessage::clear_win() {
  win_ = 0;
}
::google::protobuf::int32 PushWinMessage::win() const {
  // @@protoc_insertion_point(field_get:proto.PushWinMessage.win)
  return win_;
}
void PushWinMessage::set_win(::google::protobuf::int32 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:proto.PushWinMessage.win)
}

// optional int32 num = 2;
void PushWinMessage::clear_num() {
  num_ = 0;
}
::google::protobuf::int32 PushWinMessage::num() const {
  // @@protoc_insertion_point(field_get:proto.PushWinMessage.num)
  return num_;
}
void PushWinMessage::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.PushWinMessage.num)
}

// optional int32 type = 3;
void PushWinMessage::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 PushWinMessage::type() const {
  // @@protoc_insertion_point(field_get:proto.PushWinMessage.type)
  return type_;
}
void PushWinMessage::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.PushWinMessage.type)
}

// optional int32 money = 4;
void PushWinMessage::clear_money() {
  money_ = 0;
}
::google::protobuf::int32 PushWinMessage::money() const {
  // @@protoc_insertion_point(field_get:proto.PushWinMessage.money)
  return money_;
}
void PushWinMessage::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.PushWinMessage.money)
}

inline const PushWinMessage* PushWinMessage::internal_default_instance() {
  return &PushWinMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
