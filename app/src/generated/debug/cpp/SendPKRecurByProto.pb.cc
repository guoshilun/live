// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendPKRecurByProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SendPKRecurByProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* SendPKRecurReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPKRecurReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendPKRecurRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendPKRecurRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SendPKRecurByProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SendPKRecurByProto_2eproto() {
  protobuf_AddDesc_SendPKRecurByProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SendPKRecurByProto.proto");
  GOOGLE_CHECK(file != NULL);
  SendPKRecurReq_descriptor_ = file->message_type(0);
  static const int SendPKRecurReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurReq, streamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurReq, taguserid_),
  };
  SendPKRecurReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendPKRecurReq_descriptor_,
      SendPKRecurReq::internal_default_instance(),
      SendPKRecurReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendPKRecurReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurReq, _internal_metadata_));
  SendPKRecurRes_descriptor_ = file->message_type(1);
  static const int SendPKRecurRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurRes, msg_),
  };
  SendPKRecurRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendPKRecurRes_descriptor_,
      SendPKRecurRes::internal_default_instance(),
      SendPKRecurRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendPKRecurRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendPKRecurRes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SendPKRecurByProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendPKRecurReq_descriptor_, SendPKRecurReq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendPKRecurRes_descriptor_, SendPKRecurRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SendPKRecurByProto_2eproto() {
  SendPKRecurReq_default_instance_.Shutdown();
  delete SendPKRecurReq_reflection_;
  SendPKRecurRes_default_instance_.Shutdown();
  delete SendPKRecurRes_reflection_;
}

void protobuf_InitDefaults_SendPKRecurByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_InitDefaults_Entity_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  SendPKRecurReq_default_instance_.DefaultConstruct();
  SendPKRecurRes_default_instance_.DefaultConstruct();
  SendPKRecurReq_default_instance_.get_mutable()->InitAsDefaultInstance();
  SendPKRecurRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_SendPKRecurByProto_2eproto_once_);
void protobuf_InitDefaults_SendPKRecurByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_SendPKRecurByProto_2eproto_once_,
                 &protobuf_InitDefaults_SendPKRecurByProto_2eproto_impl);
}
void protobuf_AddDesc_SendPKRecurByProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_SendPKRecurByProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SendPKRecurByProto.proto\022\005proto\032\014Entit"
    "y.proto\"E\n\016SendPKRecurReq\022\016\n\006roomId\030\001 \001("
    "\t\022\020\n\010streamId\030\002 \001(\t\022\021\n\ttagUserId\030\003 \001(\t\"/"
    "\n\016SendPKRecurRes\022\035\n\003msg\030\001 \001(\0132\020.proto.Re"
    "turnMsgB \n\036com.sencorsta.ids.common.prot"
    "ob\006proto3", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SendPKRecurByProto.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SendPKRecurByProto_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SendPKRecurByProto_2eproto_once_);
void protobuf_AddDesc_SendPKRecurByProto_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SendPKRecurByProto_2eproto_once_,
                 &protobuf_AddDesc_SendPKRecurByProto_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SendPKRecurByProto_2eproto {
  StaticDescriptorInitializer_SendPKRecurByProto_2eproto() {
    protobuf_AddDesc_SendPKRecurByProto_2eproto();
  }
} static_descriptor_initializer_SendPKRecurByProto_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPKRecurReq::kRoomIdFieldNumber;
const int SendPKRecurReq::kStreamIdFieldNumber;
const int SendPKRecurReq::kTagUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPKRecurReq::SendPKRecurReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SendPKRecurByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SendPKRecurReq)
}

void SendPKRecurReq::InitAsDefaultInstance() {
}

SendPKRecurReq::SendPKRecurReq(const SendPKRecurReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.SendPKRecurReq)
}

void SendPKRecurReq::SharedCtor() {
  roomid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taguserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendPKRecurReq::~SendPKRecurReq() {
  // @@protoc_insertion_point(destructor:proto.SendPKRecurReq)
  SharedDtor();
}

void SendPKRecurReq::SharedDtor() {
  roomid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taguserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendPKRecurReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPKRecurReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPKRecurReq_descriptor_;
}

const SendPKRecurReq& SendPKRecurReq::default_instance() {
  protobuf_InitDefaults_SendPKRecurByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SendPKRecurReq> SendPKRecurReq_default_instance_;

SendPKRecurReq* SendPKRecurReq::New(::google::protobuf::Arena* arena) const {
  SendPKRecurReq* n = new SendPKRecurReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendPKRecurReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SendPKRecurReq)
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taguserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendPKRecurReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SendPKRecurReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SendPKRecurReq.roomId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_streamId;
        break;
      }

      // optional string streamId = 2;
      case 2: {
        if (tag == 18) {
         parse_streamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streamid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->streamid().data(), this->streamid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SendPKRecurReq.streamId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tagUserId;
        break;
      }

      // optional string tagUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_tagUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taguserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taguserid().data(), this->taguserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SendPKRecurReq.tagUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SendPKRecurReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SendPKRecurReq)
  return false;
#undef DO_
}

void SendPKRecurReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SendPKRecurReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.roomId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomid(), output);
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.streamId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->streamid(), output);
  }

  // optional string tagUserId = 3;
  if (this->taguserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taguserid().data(), this->taguserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.tagUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->taguserid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SendPKRecurReq)
}

::google::protobuf::uint8* SendPKRecurReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SendPKRecurReq)
  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.roomId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->streamid().data(), this->streamid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.streamId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->streamid(), target);
  }

  // optional string tagUserId = 3;
  if (this->taguserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taguserid().data(), this->taguserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SendPKRecurReq.tagUserId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->taguserid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.SendPKRecurReq)
  return target;
}

size_t SendPKRecurReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SendPKRecurReq)
  size_t total_size = 0;

  // optional string roomId = 1;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // optional string streamId = 2;
  if (this->streamid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->streamid());
  }

  // optional string tagUserId = 3;
  if (this->taguserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taguserid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPKRecurReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SendPKRecurReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendPKRecurReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendPKRecurReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SendPKRecurReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SendPKRecurReq)
    UnsafeMergeFrom(*source);
  }
}

void SendPKRecurReq::MergeFrom(const SendPKRecurReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SendPKRecurReq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SendPKRecurReq::UnsafeMergeFrom(const SendPKRecurReq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roomid().size() > 0) {

    roomid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
  }
  if (from.streamid().size() > 0) {

    streamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.streamid_);
  }
  if (from.taguserid().size() > 0) {

    taguserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taguserid_);
  }
}

void SendPKRecurReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SendPKRecurReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPKRecurReq::CopyFrom(const SendPKRecurReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SendPKRecurReq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SendPKRecurReq::IsInitialized() const {

  return true;
}

void SendPKRecurReq::Swap(SendPKRecurReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPKRecurReq::InternalSwap(SendPKRecurReq* other) {
  roomid_.Swap(&other->roomid_);
  streamid_.Swap(&other->streamid_);
  taguserid_.Swap(&other->taguserid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendPKRecurReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPKRecurReq_descriptor_;
  metadata.reflection = SendPKRecurReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendPKRecurReq

// optional string roomId = 1;
void SendPKRecurReq::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendPKRecurReq::roomid() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRecurReq.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SendPKRecurReq.roomId)
}
void SendPKRecurReq::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SendPKRecurReq.roomId)
}
void SendPKRecurReq::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SendPKRecurReq.roomId)
}
::std::string* SendPKRecurReq::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SendPKRecurReq.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendPKRecurReq::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.SendPKRecurReq.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRecurReq.roomId)
}

// optional string streamId = 2;
void SendPKRecurReq::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendPKRecurReq::streamid() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRecurReq.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SendPKRecurReq.streamId)
}
void SendPKRecurReq::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SendPKRecurReq.streamId)
}
void SendPKRecurReq::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SendPKRecurReq.streamId)
}
::std::string* SendPKRecurReq::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SendPKRecurReq.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendPKRecurReq::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.SendPKRecurReq.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRecurReq.streamId)
}

// optional string tagUserId = 3;
void SendPKRecurReq::clear_taguserid() {
  taguserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendPKRecurReq::taguserid() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRecurReq.tagUserId)
  return taguserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_taguserid(const ::std::string& value) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SendPKRecurReq.tagUserId)
}
void SendPKRecurReq::set_taguserid(const char* value) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SendPKRecurReq.tagUserId)
}
void SendPKRecurReq::set_taguserid(const char* value, size_t size) {
  
  taguserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SendPKRecurReq.tagUserId)
}
::std::string* SendPKRecurReq::mutable_taguserid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SendPKRecurReq.tagUserId)
  return taguserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendPKRecurReq::release_taguserid() {
  // @@protoc_insertion_point(field_release:proto.SendPKRecurReq.tagUserId)
  
  return taguserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendPKRecurReq::set_allocated_taguserid(::std::string* taguserid) {
  if (taguserid != NULL) {
    
  } else {
    
  }
  taguserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taguserid);
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRecurReq.tagUserId)
}

inline const SendPKRecurReq* SendPKRecurReq::internal_default_instance() {
  return &SendPKRecurReq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendPKRecurRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendPKRecurRes::SendPKRecurRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_SendPKRecurByProto_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SendPKRecurRes)
}

void SendPKRecurRes::InitAsDefaultInstance() {
  msg_ = const_cast< ::proto::ReturnMsg*>(
      ::proto::ReturnMsg::internal_default_instance());
}

SendPKRecurRes::SendPKRecurRes(const SendPKRecurRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.SendPKRecurRes)
}

void SendPKRecurRes::SharedCtor() {
  msg_ = NULL;
  _cached_size_ = 0;
}

SendPKRecurRes::~SendPKRecurRes() {
  // @@protoc_insertion_point(destructor:proto.SendPKRecurRes)
  SharedDtor();
}

void SendPKRecurRes::SharedDtor() {
  if (this != &SendPKRecurRes_default_instance_.get()) {
    delete msg_;
  }
}

void SendPKRecurRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendPKRecurRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendPKRecurRes_descriptor_;
}

const SendPKRecurRes& SendPKRecurRes::default_instance() {
  protobuf_InitDefaults_SendPKRecurByProto_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SendPKRecurRes> SendPKRecurRes_default_instance_;

SendPKRecurRes* SendPKRecurRes::New(::google::protobuf::Arena* arena) const {
  SendPKRecurRes* n = new SendPKRecurRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendPKRecurRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SendPKRecurRes)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool SendPKRecurRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SendPKRecurRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.ReturnMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SendPKRecurRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SendPKRecurRes)
  return false;
#undef DO_
}

void SendPKRecurRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SendPKRecurRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SendPKRecurRes)
}

::google::protobuf::uint8* SendPKRecurRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SendPKRecurRes)
  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.SendPKRecurRes)
  return target;
}

size_t SendPKRecurRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SendPKRecurRes)
  size_t total_size = 0;

  // optional .proto.ReturnMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendPKRecurRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SendPKRecurRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendPKRecurRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendPKRecurRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SendPKRecurRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SendPKRecurRes)
    UnsafeMergeFrom(*source);
  }
}

void SendPKRecurRes::MergeFrom(const SendPKRecurRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SendPKRecurRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SendPKRecurRes::UnsafeMergeFrom(const SendPKRecurRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_msg()) {
    mutable_msg()->::proto::ReturnMsg::MergeFrom(from.msg());
  }
}

void SendPKRecurRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SendPKRecurRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPKRecurRes::CopyFrom(const SendPKRecurRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SendPKRecurRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SendPKRecurRes::IsInitialized() const {

  return true;
}

void SendPKRecurRes::Swap(SendPKRecurRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendPKRecurRes::InternalSwap(SendPKRecurRes* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendPKRecurRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendPKRecurRes_descriptor_;
  metadata.reflection = SendPKRecurRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendPKRecurRes

// optional .proto.ReturnMsg msg = 1;
bool SendPKRecurRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
void SendPKRecurRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::proto::ReturnMsg& SendPKRecurRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.SendPKRecurRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
::proto::ReturnMsg* SendPKRecurRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.SendPKRecurRes.msg)
  return msg_;
}
::proto::ReturnMsg* SendPKRecurRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.SendPKRecurRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void SendPKRecurRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SendPKRecurRes.msg)
}

inline const SendPKRecurRes* SendPKRecurRes::internal_default_instance() {
  return &SendPKRecurRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
