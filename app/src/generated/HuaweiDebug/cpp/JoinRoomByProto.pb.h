// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoinRoomByProto.proto

#ifndef PROTOBUF_JoinRoomByProto_2eproto__INCLUDED
#define PROTOBUF_JoinRoomByProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Entity.pb.h"
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_JoinRoomByProto_2eproto();
void protobuf_InitDefaults_JoinRoomByProto_2eproto();
void protobuf_AssignDesc_JoinRoomByProto_2eproto();
void protobuf_ShutdownFile_JoinRoomByProto_2eproto();

class JoinRoomByProtoReq;
class JoinRoomByProtoRes;

// ===================================================================

class JoinRoomByProtoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.JoinRoomByProtoReq) */ {
 public:
  JoinRoomByProtoReq();
  virtual ~JoinRoomByProtoReq();

  JoinRoomByProtoReq(const JoinRoomByProtoReq& from);

  inline JoinRoomByProtoReq& operator=(const JoinRoomByProtoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomByProtoReq& default_instance();

  static const JoinRoomByProtoReq* internal_default_instance();

  void Swap(JoinRoomByProtoReq* other);

  // implements Message ----------------------------------------------

  inline JoinRoomByProtoReq* New() const { return New(NULL); }

  JoinRoomByProtoReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinRoomByProtoReq& from);
  void MergeFrom(const JoinRoomByProtoReq& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinRoomByProtoReq* other);
  void UnsafeMergeFrom(const JoinRoomByProtoReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // @@protoc_insertion_point(class_scope:proto.JoinRoomByProtoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roomid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_JoinRoomByProto_2eproto_impl();
  friend void  protobuf_AddDesc_JoinRoomByProto_2eproto_impl();
  friend void protobuf_AssignDesc_JoinRoomByProto_2eproto();
  friend void protobuf_ShutdownFile_JoinRoomByProto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomByProtoReq> JoinRoomByProtoReq_default_instance_;

// -------------------------------------------------------------------

class JoinRoomByProtoRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.JoinRoomByProtoRes) */ {
 public:
  JoinRoomByProtoRes();
  virtual ~JoinRoomByProtoRes();

  JoinRoomByProtoRes(const JoinRoomByProtoRes& from);

  inline JoinRoomByProtoRes& operator=(const JoinRoomByProtoRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomByProtoRes& default_instance();

  static const JoinRoomByProtoRes* internal_default_instance();

  void Swap(JoinRoomByProtoRes* other);

  // implements Message ----------------------------------------------

  inline JoinRoomByProtoRes* New() const { return New(NULL); }

  JoinRoomByProtoRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinRoomByProtoRes& from);
  void MergeFrom(const JoinRoomByProtoRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinRoomByProtoRes* other);
  void UnsafeMergeFrom(const JoinRoomByProtoRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.ReturnMsg msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::proto::ReturnMsg& msg() const;
  ::proto::ReturnMsg* mutable_msg();
  ::proto::ReturnMsg* release_msg();
  void set_allocated_msg(::proto::ReturnMsg* msg);

  // optional int32 banned = 2;
  void clear_banned();
  static const int kBannedFieldNumber = 2;
  ::google::protobuf::int32 banned() const;
  void set_banned(::google::protobuf::int32 value);

  // optional string playUrl = 3;
  void clear_playurl();
  static const int kPlayUrlFieldNumber = 3;
  const ::std::string& playurl() const;
  void set_playurl(const ::std::string& value);
  void set_playurl(const char* value);
  void set_playurl(const char* value, size_t size);
  ::std::string* mutable_playurl();
  ::std::string* release_playurl();
  void set_allocated_playurl(::std::string* playurl);

  // optional string roomName = 4;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // optional int32 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string picture = 6;
  void clear_picture();
  static const int kPictureFieldNumber = 6;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // optional string nickname = 7;
  void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string account = 8;
  void clear_account();
  static const int kAccountFieldNumber = 8;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string userId = 9;
  void clear_userid();
  static const int kUserIdFieldNumber = 9;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 anchorGrade = 10;
  void clear_anchorgrade();
  static const int kAnchorGradeFieldNumber = 10;
  ::google::protobuf::int32 anchorgrade() const;
  void set_anchorgrade(::google::protobuf::int32 value);

  // optional int32 needExperience = 11;
  void clear_needexperience();
  static const int kNeedExperienceFieldNumber = 11;
  ::google::protobuf::int32 needexperience() const;
  void set_needexperience(::google::protobuf::int32 value);

  // optional int32 isAttention = 12;
  void clear_isattention();
  static const int kIsAttentionFieldNumber = 12;
  ::google::protobuf::int32 isattention() const;
  void set_isattention(::google::protobuf::int32 value);

  // optional int32 ranking = 13;
  void clear_ranking();
  static const int kRankingFieldNumber = 13;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional int32 oth = 14;
  void clear_oth();
  static const int kOthFieldNumber = 14;
  ::google::protobuf::int32 oth() const;
  void set_oth(::google::protobuf::int32 value);

  // optional string streamId = 15;
  void clear_streamid();
  static const int kStreamIdFieldNumber = 15;
  const ::std::string& streamid() const;
  void set_streamid(const ::std::string& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  ::std::string* mutable_streamid();
  ::std::string* release_streamid();
  void set_allocated_streamid(::std::string* streamid);

  // optional string streamPkId = 16;
  void clear_streampkid();
  static const int kStreamPkIdFieldNumber = 16;
  const ::std::string& streampkid() const;
  void set_streampkid(const ::std::string& value);
  void set_streampkid(const char* value);
  void set_streampkid(const char* value, size_t size);
  ::std::string* mutable_streampkid();
  ::std::string* release_streampkid();
  void set_allocated_streampkid(::std::string* streampkid);

  // optional string pkId = 17;
  void clear_pkid();
  static const int kPkIdFieldNumber = 17;
  const ::std::string& pkid() const;
  void set_pkid(const ::std::string& value);
  void set_pkid(const char* value);
  void set_pkid(const char* value, size_t size);
  ::std::string* mutable_pkid();
  ::std::string* release_pkid();
  void set_allocated_pkid(::std::string* pkid);

  // optional int32 gameState = 18;
  void clear_gamestate();
  static const int kGameStateFieldNumber = 18;
  ::google::protobuf::int32 gamestate() const;
  void set_gamestate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.JoinRoomByProtoRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playurl_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr streamid_;
  ::google::protobuf::internal::ArenaStringPtr streampkid_;
  ::google::protobuf::internal::ArenaStringPtr pkid_;
  ::proto::ReturnMsg* msg_;
  ::google::protobuf::int32 banned_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 anchorgrade_;
  ::google::protobuf::int32 needexperience_;
  ::google::protobuf::int32 isattention_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 oth_;
  ::google::protobuf::int32 gamestate_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_JoinRoomByProto_2eproto_impl();
  friend void  protobuf_AddDesc_JoinRoomByProto_2eproto_impl();
  friend void protobuf_AssignDesc_JoinRoomByProto_2eproto();
  friend void protobuf_ShutdownFile_JoinRoomByProto_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomByProtoRes> JoinRoomByProtoRes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomByProtoReq

// optional string roomId = 1;
inline void JoinRoomByProtoReq::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoReq::roomid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoReq.roomId)
  return roomid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoReq::set_roomid(const ::std::string& value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoReq.roomId)
}
inline void JoinRoomByProtoReq::set_roomid(const char* value) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoReq.roomId)
}
inline void JoinRoomByProtoReq::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoReq.roomId)
}
inline ::std::string* JoinRoomByProtoReq::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoReq.roomId)
  return roomid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoReq::release_roomid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoReq.roomId)
  
  return roomid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoReq::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoReq.roomId)
}

inline const JoinRoomByProtoReq* JoinRoomByProtoReq::internal_default_instance() {
  return &JoinRoomByProtoReq_default_instance_.get();
}
// -------------------------------------------------------------------

// JoinRoomByProtoRes

// optional .proto.ReturnMsg msg = 1;
inline bool JoinRoomByProtoRes::has_msg() const {
  return this != internal_default_instance() && msg_ != NULL;
}
inline void JoinRoomByProtoRes::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
inline const ::proto::ReturnMsg& JoinRoomByProtoRes::msg() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::ReturnMsg::internal_default_instance();
}
inline ::proto::ReturnMsg* JoinRoomByProtoRes::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::proto::ReturnMsg;
  }
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.msg)
  return msg_;
}
inline ::proto::ReturnMsg* JoinRoomByProtoRes::release_msg() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.msg)
  
  ::proto::ReturnMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void JoinRoomByProtoRes::set_allocated_msg(::proto::ReturnMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.msg)
}

// optional int32 banned = 2;
inline void JoinRoomByProtoRes::clear_banned() {
  banned_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::banned() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.banned)
  return banned_;
}
inline void JoinRoomByProtoRes::set_banned(::google::protobuf::int32 value) {
  
  banned_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.banned)
}

// optional string playUrl = 3;
inline void JoinRoomByProtoRes::clear_playurl() {
  playurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::playurl() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.playUrl)
  return playurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_playurl(const ::std::string& value) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.playUrl)
}
inline void JoinRoomByProtoRes::set_playurl(const char* value) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.playUrl)
}
inline void JoinRoomByProtoRes::set_playurl(const char* value, size_t size) {
  
  playurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.playUrl)
}
inline ::std::string* JoinRoomByProtoRes::mutable_playurl() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.playUrl)
  return playurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_playurl() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.playUrl)
  
  return playurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_playurl(::std::string* playurl) {
  if (playurl != NULL) {
    
  } else {
    
  }
  playurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playurl);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.playUrl)
}

// optional string roomName = 4;
inline void JoinRoomByProtoRes::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::roomname() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.roomName)
}
inline void JoinRoomByProtoRes::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.roomName)
}
inline void JoinRoomByProtoRes::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.roomName)
}
inline ::std::string* JoinRoomByProtoRes::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_roomname() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.roomName)
}

// optional int32 count = 5;
inline void JoinRoomByProtoRes::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::count() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.count)
  return count_;
}
inline void JoinRoomByProtoRes::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.count)
}

// optional string picture = 6;
inline void JoinRoomByProtoRes::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::picture() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.picture)
  return picture_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.picture)
}
inline void JoinRoomByProtoRes::set_picture(const char* value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.picture)
}
inline void JoinRoomByProtoRes::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.picture)
}
inline ::std::string* JoinRoomByProtoRes::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_picture() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.picture)
}

// optional string nickname = 7;
inline void JoinRoomByProtoRes::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::nickname() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.nickname)
}
inline void JoinRoomByProtoRes::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.nickname)
}
inline void JoinRoomByProtoRes::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.nickname)
}
inline ::std::string* JoinRoomByProtoRes::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.nickname)
}

// optional string account = 8;
inline void JoinRoomByProtoRes::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::account() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.account)
}
inline void JoinRoomByProtoRes::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.account)
}
inline void JoinRoomByProtoRes::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.account)
}
inline ::std::string* JoinRoomByProtoRes::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_account() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.account)
}

// optional string userId = 9;
inline void JoinRoomByProtoRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::userid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.userId)
}
inline void JoinRoomByProtoRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.userId)
}
inline void JoinRoomByProtoRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.userId)
}
inline ::std::string* JoinRoomByProtoRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_userid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.userId)
}

// optional int32 anchorGrade = 10;
inline void JoinRoomByProtoRes::clear_anchorgrade() {
  anchorgrade_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::anchorgrade() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.anchorGrade)
  return anchorgrade_;
}
inline void JoinRoomByProtoRes::set_anchorgrade(::google::protobuf::int32 value) {
  
  anchorgrade_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.anchorGrade)
}

// optional int32 needExperience = 11;
inline void JoinRoomByProtoRes::clear_needexperience() {
  needexperience_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::needexperience() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.needExperience)
  return needexperience_;
}
inline void JoinRoomByProtoRes::set_needexperience(::google::protobuf::int32 value) {
  
  needexperience_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.needExperience)
}

// optional int32 isAttention = 12;
inline void JoinRoomByProtoRes::clear_isattention() {
  isattention_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::isattention() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.isAttention)
  return isattention_;
}
inline void JoinRoomByProtoRes::set_isattention(::google::protobuf::int32 value) {
  
  isattention_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.isAttention)
}

// optional int32 ranking = 13;
inline void JoinRoomByProtoRes::clear_ranking() {
  ranking_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::ranking() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.ranking)
  return ranking_;
}
inline void JoinRoomByProtoRes::set_ranking(::google::protobuf::int32 value) {
  
  ranking_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.ranking)
}

// optional int32 oth = 14;
inline void JoinRoomByProtoRes::clear_oth() {
  oth_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::oth() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.oth)
  return oth_;
}
inline void JoinRoomByProtoRes::set_oth(::google::protobuf::int32 value) {
  
  oth_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.oth)
}

// optional string streamId = 15;
inline void JoinRoomByProtoRes::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::streamid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.streamId)
  return streamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_streamid(const ::std::string& value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.streamId)
}
inline void JoinRoomByProtoRes::set_streamid(const char* value) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.streamId)
}
inline void JoinRoomByProtoRes::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.streamId)
}
inline ::std::string* JoinRoomByProtoRes::mutable_streamid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.streamId)
  return streamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_streamid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.streamId)
  
  return streamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_streamid(::std::string* streamid) {
  if (streamid != NULL) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.streamId)
}

// optional string streamPkId = 16;
inline void JoinRoomByProtoRes::clear_streampkid() {
  streampkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::streampkid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.streamPkId)
  return streampkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_streampkid(const ::std::string& value) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.streamPkId)
}
inline void JoinRoomByProtoRes::set_streampkid(const char* value) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.streamPkId)
}
inline void JoinRoomByProtoRes::set_streampkid(const char* value, size_t size) {
  
  streampkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.streamPkId)
}
inline ::std::string* JoinRoomByProtoRes::mutable_streampkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.streamPkId)
  return streampkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_streampkid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.streamPkId)
  
  return streampkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_streampkid(::std::string* streampkid) {
  if (streampkid != NULL) {
    
  } else {
    
  }
  streampkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), streampkid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.streamPkId)
}

// optional string pkId = 17;
inline void JoinRoomByProtoRes::clear_pkid() {
  pkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomByProtoRes::pkid() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.pkId)
  return pkid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_pkid(const ::std::string& value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.pkId)
}
inline void JoinRoomByProtoRes::set_pkid(const char* value) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.JoinRoomByProtoRes.pkId)
}
inline void JoinRoomByProtoRes::set_pkid(const char* value, size_t size) {
  
  pkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.JoinRoomByProtoRes.pkId)
}
inline ::std::string* JoinRoomByProtoRes::mutable_pkid() {
  
  // @@protoc_insertion_point(field_mutable:proto.JoinRoomByProtoRes.pkId)
  return pkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomByProtoRes::release_pkid() {
  // @@protoc_insertion_point(field_release:proto.JoinRoomByProtoRes.pkId)
  
  return pkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomByProtoRes::set_allocated_pkid(::std::string* pkid) {
  if (pkid != NULL) {
    
  } else {
    
  }
  pkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkid);
  // @@protoc_insertion_point(field_set_allocated:proto.JoinRoomByProtoRes.pkId)
}

// optional int32 gameState = 18;
inline void JoinRoomByProtoRes::clear_gamestate() {
  gamestate_ = 0;
}
inline ::google::protobuf::int32 JoinRoomByProtoRes::gamestate() const {
  // @@protoc_insertion_point(field_get:proto.JoinRoomByProtoRes.gameState)
  return gamestate_;
}
inline void JoinRoomByProtoRes::set_gamestate(::google::protobuf::int32 value) {
  
  gamestate_ = value;
  // @@protoc_insertion_point(field_set:proto.JoinRoomByProtoRes.gameState)
}

inline const JoinRoomByProtoRes* JoinRoomByProtoRes::internal_default_instance() {
  return &JoinRoomByProtoRes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JoinRoomByProto_2eproto__INCLUDED
